<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael-J</title>
  <subtitle>一个修行路上的码农</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://michael-j.net/"/>
  <updated>2017-06-03T15:09:55.788Z</updated>
  <id>http://michael-j.net/</id>
  
  <author>
    <name>Michael Jiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>架构师应该是一种角色，而不是一个职位</title>
    <link href="http://michael-j.net/2017/06/03/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%BA%94%E8%AF%A5%E6%98%AF%E4%B8%80%E7%A7%8D%E8%A7%92%E8%89%B2%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E8%81%8C%E4%BD%8D/"/>
    <id>http://michael-j.net/2017/06/03/架构师应该是一种角色，而不是一个职位/</id>
    <published>2017-06-03T07:23:13.000Z</published>
    <updated>2017-06-03T15:09:55.788Z</updated>
    
    <content type="html"><![CDATA[<p>昨天看到一篇关于“架构师”的文章，读后非常有感触。我个人比较认同作者的大部分观点，故决定将原文进行翻译，和国内的开发者一起分享。原文地址：<a href="https://dzone.com/articles/architect-should-be-a-role-not-a-position" target="_blank" rel="external">“Architect” Should Be a Role, Not a Position”</a>。</p>
<a id="more"></a>
<p>当一个资深的开发者变得更加资深时会发生什么事情？他们经常会被提拔做去“架构师”。有时一个架构师也不一定非要是开发者，如果他们能看到更大的蓝图。最终，总有一个人挂着“架构师”的头衔：他对要开发的系统和正在开发的系统做出架构上决策。在一些更大的公司，还有“架构师议会”，每个团队指定的架构师们聚在一起决定着一些明智的事情。</p>
<p>但我认为专门设立“架构师”的职位是一个糟糕的想法。架构师应该是建筑行业的一个职位，这是说的过去的，因为你不能在项目中期改变和调整架构。但是软件架构是十分灵活的，不应该预先就严格地定义好。而且开发工作和架构设计是如此的紧密关联，所以说某个人决定“什么要做”和“什么不要做”是不科学的。这会带来各种各样的问题，主要是因为架构师经常无法全面的考虑到具体的实现是怎么样。如果一个架构师长时间不写代码，他们更加倾向于忽略“实现细节”，转而仅仅考虑抽象设计。然而，抽象总是伴随着遗漏，只考虑抽象而不考虑特定的实现这样的解决方案很少行得通。</p>
<p>我的第一个论点就是：在不知道详细地编写所有代码地情况下，你无法在成为一个优秀的架构师。大多数情况下都不是“简单地编码”。如果你已经成为架构师多年，同时也多年没有写过代码了，那几乎可以肯定你不是一个优秀的架构师。</p>
<p>当然，你可能是一个优秀的架构师。或许在你所在的那个特别的公司里，有人坐在象牙塔中，指挥着码农去整合这个实现那个，这可能说的过去。但即使是这种情况，也有更好的方法。</p>
<p>架构师应该是一种角色。每个资深的团队成员都可以也应该扮演架构师的角色，不用每个团队指定一个人来当。实际上，最好有多个人来扮演架构师。在会议中讨论架构设计和讨论功能设计类似，如果你是那个要实现所有事情的人，那么你需要带着明确的想法去参会。任何的过度设计（大部分架构师经常会犯这个错误）需要在你面前证明是合理的——“我是否愿意去写这些模板代码，或者是否有一种更简单优雅的实现方式”。</p>
<p>职位可以使“软件工程师”，但角色可以是“敏捷大师”、”架构师”、”持续集成官”，等等。如果公司需要一个“架构师议会”去决定系统间更宏观的整合，开发者可以提名某个人去参与这些会议，这个人有可能是对这些系统最了解的人。</p>
<p>我知道现在架构师在想什么——有一些更加高层次的关注点开发要么不太能理解要么不应该为此被打扰。大错特错！如果你的开发不理解更高层次的架构规划，那么迟早你会遇到问题的。是的，因为他们要让代码适应你正在规划的更大的蓝图，他们需要被打扰。</p>
<p>还有一方面于团队成员的态度和动态的交流。如果某个不是特别优秀或者受人尊敬的开发被提升为“架构师”，那么可能破坏团队的和谐。另一方面，某些人被提升为“架构师”以后可能会过于自信，以至于他们会想当然的去做出设计决定，而不管那些反对他们的好的争论点。</p>
<p>所以，理想的情况（这是我的第二个论点）是取消架构师的职位。确保你团队中资深的成员能够参与架构设计和决策，那样他们可能会更有干劲，他们也会对他们开发的成果有一个更加清晰的规划。最为重要的是，架构决策不能脱离日常的“现实”的开发环境，否则它们会不必要的复杂化。</p>
<hr>
<p>很久没有翻译了，有很多句子拿捏不准。如果有误翻的地方，还望指正，谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天看到一篇关于“架构师”的文章，读后非常有感触。我个人比较认同作者的大部分观点，故决定将原文进行翻译，和国内的开发者一起分享。原文地址：&lt;a href=&quot;https://dzone.com/articles/architect-should-be-a-role-not-a-position&quot;&gt;“Architect” Should Be a Role, Not a Position”&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://michael-j.net/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="架构设计" scheme="http://michael-j.net/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="软件开发理论" scheme="http://michael-j.net/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>访问控制：为你的云上业务再加一把锁</title>
    <link href="http://michael-j.net/2017/06/01/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%B8%BA%E4%BD%A0%E7%9A%84%E4%BA%91%E4%B8%8A%E4%B8%9A%E5%8A%A1%E5%86%8D%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/"/>
    <id>http://michael-j.net/2017/06/01/访问控制：为你的云上业务再加一把锁/</id>
    <published>2017-06-01T10:56:02.000Z</published>
    <updated>2017-06-03T02:39:36.146Z</updated>
    
    <content type="html"><![CDATA[<p>企业上云首当其冲的就是要解决安全性的问题，是否满足企业对安全的诉求成了影响其是否上云的一个十分重要的因素之一。安全是一个很大的话题，从底层资源数据的安全到上层应用访问的安全，从访问客体（资源或服务）的安全到访问主体（人或者第三方服务）的安全，这些都属于安全的范畴之内。访问控制正是从资源访问的主客体关系出发，解决企业对资源访问的权限控制的需求。</p>
<p>维基百科对<strong><em>访问控制</em></strong>的定义如下：</p>
<blockquote>
<p>访问控制是指允许或禁止某人使用某项资源的能力。</p>
</blockquote>
<p>云环境下的访问控制使得这个问题变得复杂，我曾写过一篇<a href="http://michael-j.net/2017/03/07/%E5%AF%B9%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%80%9D%E8%80%83/">对云环境下访问控制系统的思考</a>来阐述这个问题。从2.14号上线访问控制以来，接入访问控制的业务越来越多，截止目前已有六大业务支持访问控制；同时，访问控制还对云服务提供了支持，用户可以授权给易盾和视频云来访问其在NOS（网易对象存储）的数据资源。现在，你可以自定义访问控制策略，通过一套特定DSL语法来定义权限。根据自己的实际使用场景和组织架构来定义对权限的需求，这具有十分重要的意义。</p>
<p>举个例子，如果不允许某某子账号删除<code>avatar</code>桶中<code>file-1.png</code>的图片，而允许其对其他任何文件有所有的控制权限，那么可以定义如下的策略来达到这个目的。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"version"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"statement"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"action"</span>: [</div><div class="line">                <span class="string">"comb:nos:DeleteObject"</span></div><div class="line">            ],</div><div class="line">            <span class="attr">"effect"</span>: <span class="string">"deny"</span>,</div><div class="line">            <span class="attr">"resource"</span>: [</div><div class="line">                <span class="string">"comb:nos:*:*:*:avatar/file-1.png"</span></div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"action"</span>: [</div><div class="line">                <span class="string">"comb:nos:*"</span></div><div class="line">            ],</div><div class="line">            <span class="attr">"effect"</span>: <span class="string">"allow"</span>,</div><div class="line">            <span class="attr">"resource"</span>: [</div><div class="line">                <span class="string">"comb:nos:*:*:*:*"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过语言来定义权限，用户将获得十分灵活的权限控制，当然也包含了细粒度的权限控制。使用DSL来定义权限的做法很早之前就存在了，可以追溯到2001年的<a href="https://en.wikipedia.org/wiki/XACML" target="_blank" rel="external">XACML</a>时代。目前主流的云计算厂商也均采用这种方式来描述权限。我们采用了业界相同的命名方式来降低用户的理解成本。这里对策略语法做一个简单的介绍。</p>
<p>策略语法就是有着一定约束关系的JSON格式数据，由<code>version</code>和<code>statement</code>两个部分组成。<code>version</code>目前只支持1，而<code>statement</code>则是描述策略的具体形式。<code>statement</code>由三个部分组成，<code>action</code>、<code>effect</code>和<code>resource</code>，这三个子句构成了访问控制最为核心的三个部分。</p>
<ul>
<li><code>effect</code>表示授权类型，只能是<code>allow</code>（允许）或者<code>deny</code>（拒绝）。</li>
<li><p><code>action</code>表示动作，组成结构为<code>product:service-name:action-name</code>。<code>product</code>目前只支持<code>comb</code>，<code>service-name</code>代表基础服务（蜂巢）下的服务，目前已支持的服务如下：</p>
<p>服务代号 | 服务名称<br>— | —<br>nos | 对象存储<br>nlb | 负载均衡<br>rds | 关系型数据库<br>mongodb | MongoDB<br>ncr | Redis缓存<br>cdn | CDN</p>
<p><code>action-name</code>表示具体动作的名称，例如nos支持<code>GetBucket</code>、<code>PutObject</code>等动作，cdn支持<code>CreateDomain</code>、<code>DisableDomain</code>等等，具体的动作请参考对应服务的文档。</p>
</li>
<li><p><code>resource</code>表示资源，组成结构为<code>product:service-name:region:az:account-id:resource-descriptor</code>。<code>product</code>和<code>service-name</code>和<code>action</code>中的意义相同，<code>region</code>表示地域，<code>az</code>表示可用域，目前只支持<code>*</code>，<code>account-id</code>是用户的主账号id，目前也只能填入<code>*</code>，<code>resource-descriptor</code>是具体资源的描述符。<code>resource-descriptor</code>根据具体的服务会有变化，整体上是树形结构的。例如：<code>bucket-1/file-1.png</code>可以表示nos中<code>bucket-1</code>的桶中的<code>file-1.png</code>文件，而<code>instance/nlb-1</code>可以表示nlb中实例名称为<code>nlb-1</code>的实例。具体的规则请参考对应服务的文档。</p>
</li>
</ul>
<p><code>statement</code>语句本身是一个Array，你可以在其中最多定义5条子句。这样就允许你将多条策略组合在一个策略里面，也可以根据需要将策略拆改，选择权在你手上。</p>
<p>通过上面的策略语言，企业完全可以根据自身的实际需要来定义权限，具有非常大的灵活性和自由度。如果你以前使用过其他云的访问控制产品，那么上手会很快。如果是第一次接触此类产品，也不用担心，我们提供了一个强大了“编译器”来检查你的策略语法是否合法，并提供简单直观的错误展示来帮你迅速定位问题，如下图所示。</p>
<img src="/2017/06/01/访问控制：为你的云上业务再加一把锁/compile_error.png" alt="错误提示" title="错误提示">
<p>另外，访问控制还提供了了<code>子账号</code>、<code>组</code>和<code>角色</code>来满足企业对访问主体描述性的需求，企业可以根据自身的组织架构和研发模式来组合使用这些身份。</p>
<p>掌握了授权策略后，理解鉴权的执行流程也是很重要的。鉴权流程按照Deny优先原则执行，如果有显式的Deny，那么直接拒绝；如果有显式的allow，那么则允许，否则也拒绝。具体流程如下。</p>
<img src="/2017/06/01/访问控制：为你的云上业务再加一把锁/auth_flow.png" alt="鉴权流程" title="鉴权流程">
<p>在授权时请遵循最小权限原则，即根据用户的需要，将刚好能满足其需求的权限赋予给他，这样有助于规避一些越权执行的问题。除此之外，最佳实践还包含及时收回用户不再需要的权限，尽量通过组和角色来授权等等。详细的文档可以参考访问控制的官方文档。</p>
<p>通过以上的介绍，不知道你是否对访问控制有一个大致的了解。如果还是有些云里雾里，那不如自己去动手定义一个属于自己的访问策略吧！</p>
]]></content>
    
    <summary type="html">
    
      企业上云首当其冲的就是要解决安全性的问题，是否满足企业对安全的诉求成了影响其是否上云的一个十分重要的因素之一。
    
    </summary>
    
      <category term="云计算" scheme="http://michael-j.net/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="cloud" scheme="http://michael-j.net/tags/cloud/"/>
    
      <category term="访问控制" scheme="http://michael-j.net/tags/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    
      <category term="DSL" scheme="http://michael-j.net/tags/DSL/"/>
    
      <category term="云计算" scheme="http://michael-j.net/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>评论从多说迁移到Disqus</title>
    <link href="http://michael-j.net/2017/05/21/%E8%AF%84%E8%AE%BA%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%BF%81%E7%A7%BB%E5%88%B0Disqus/"/>
    <id>http://michael-j.net/2017/05/21/评论从多说迁移到Disqus/</id>
    <published>2017-05-21T14:25:25.000Z</published>
    <updated>2017-05-21T14:36:06.661Z</updated>
    
    <content type="html"><![CDATA[<p>建站以来一直使用多说作为评论系统，我还是非常喜欢国人做的评论系统，简单实用接地气。但是不盈利的商业软件最终只能关闭，这方面国内对盈利模式得探索要不国外落后太多了。</p>
<p>虽然切换到Disqus以后免不了被墙，但目前我确实还没有找到称心如意的评论软件。如果网友们有好的评论系统，不放留言给我推荐，叩谢！</p>
]]></content>
    
    <summary type="html">
    
      本站的评论系统从多说迁移到Disqus
    
    </summary>
    
      <category term="生活" scheme="http://michael-j.net/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="blog" scheme="http://michael-j.net/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>对云环境下访问控制系统的思考</title>
    <link href="http://michael-j.net/2017/03/07/%E5%AF%B9%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://michael-j.net/2017/03/07/对云环境下访问控制系统的思考/</id>
    <published>2017-03-07T12:16:56.000Z</published>
    <updated>2017-06-03T03:28:46.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现在，云计算市场已是一片红海，不论是国内还是国外的云计算市场竞争都相当激烈。主流的云计算厂商在争夺企业客户方面都不留余地，因为企业用户对云计算的发展有着极为重要的意义，尤其是大企业客户。可以毫不夸张的说，没有企业用户，云计算的发展绝不会发展的如此迅速。</p>
<p>企业上云首当其冲的问题就是安全性，安全性已经成为企业上云最大的障碍。这里的安全性不光是基础设施的安全和稳定，比如虚拟机的高可用、RDS的高可靠等等，也包括应用层面的安全性，如WAF、证书服务、加密服务等等，还包括因为企业本身的IT架构/研发架构的复杂性带来的资源管控方面的安全性需求。毫不夸张地说，谁解决好了企业的安全性诉求，那么他就能在这片红海中立于不败之地。</p>
<p>安全是一个很大的话题，我不敢妄谈。最近我在做访问控制方面的工作，故此分享一下我对这个领域的一点思考。访问控制是安全中一块，也是十分重要的一块。有些云计算提供商甚至都没有将其划归到安全的范围，可能是没有意识到访问控制的重要性。AWS中访问控制的产品是<a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="external">IAM</a>，可以说是云计算厂商中做的最早也最为完善的一个。IAM在其的产品分类中有一个词我觉得形容该产品最为合适——“合规性“。其实访问控制就是满足企业用户对于合规性的需求，说白了就是规范企业用户对云计算资源的访问。</p>
<p>既然这是一篇关于访问控制的文章，那么我们先来看看关于访问控制的定义。</p>
<p>维基百科关于<strong><em>访问控制</em></strong>的定义是：访问控制是指允许或者禁止某人使用某项资源的能力。这个定义中有几个关键点需要留意：</p>
<ol>
<li>人</li>
<li>某项资源</li>
<li>允许/禁止</li>
<li>能力</li>
</ol>
<p>虽说维基百科关于访问控制的定义略显简陋，但是这个定义我觉得已经勾勒出了访问控制系统的大致形态。首先是人，访问控制的主体是人，所以其最为重要的使用群体是用户，那就是说这个系统是一个面向用户的系统。其次是某项资源，资源是访问控制的客体，某项的限定词则表明资源的具体形式是未知的。再次是允许/禁止，这是访问控制对外提供服务的最为直观的表现形式，用一个更为专业的名称来形容的话就是“鉴权”。最后是能力，为什么我把能力专门拿出来作为一个关键点来说，因为这是理论和实践的一个关键区分点之一。访问控制的理论为我们设计对应的系统和产品指明了方向，但是在生产环境中使用的还是遇到各种各样的现实问题。有一点需要特别注意的是，访问控制系统作为一个通用的公共服务，它需要提供的是一种能力，而不是针对特定环境和产品，否则只为沦为某个特定的专家系统。</p>
<p>维基百科关于【访问控制】的定义在理论层面已经颇为全面，然而从系统的设计到角度来看还缺少一个关键点，那就是——动作。这里的动作（可以也称之为操作）可以理解为具体系统所开放的能力，或者用户可以对系统执行的操作。例如，RDS产品需要开放<code>createDataBase\listDataBase\deleteDatabase</code>等等动作，又如NOS（网易对象存储）需要开放<code>listBucket\createBucket\listObject\putObject</code>等等动作。就算脱离云计算的环境，动作也是访问控制中不可缺少的要素之一，因为任何给人使用的产品都会伴随与人的交互，而这些交互的细粒度表现就是这些动作。</p>
<p>既然现在我们已经了解了访问控制的基本理论，那是否可以开始设计系统开始编码了呢？千万不要这么做，想清楚再做远比边做边想要节约时间。这听上去有点和现在的“敏捷开发“不太符合，实际上恰恰相反，”敏捷开发”虽然强调持续集成、快速迭代，但是这却是建立在前期良好的架构设计的基础之上的。言归正传，这是一篇关于访问控制实践探究的文章，在我们设计系统之前，先看看以前的访问控制系统一般是怎么做的。</p>
<h2 id="传统的访问控制模型"><a href="#传统的访问控制模型" class="headerlink" title="传统的访问控制模型"></a>传统的访问控制模型</h2><p>在访问控制系统的设计中，有两种设计模式是十分重要，也是得到广泛应用的，那就是访问控制列表（ACL）和基于角色的访问控制（RBAC）。</p>
<h4 id="1-访问控制列表（ACL）"><a href="#1-访问控制列表（ACL）" class="headerlink" title="1.访问控制列表（ACL）"></a>1.访问控制列表（ACL）</h4><p>访问控制列表是早期的一种访问控制技术，其原理十分简单，就是记录哪些用户对这个资源能进行哪些操作，有类似如下的二维表维护在文件中：</p>
<table>
<thead>
<tr>
<th>User</th>
<th>Create</th>
<th>Update</th>
<th>Query</th>
<th>Delete</th>
</tr>
</thead>
<tbody>
<tr>
<td>张三</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>李四</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>王五</td>
<td>×</td>
<td>×</td>
<td>√</td>
<td>×</td>
</tr>
</tbody>
</table>
<p>这种访问控制的方式好处显而易见，就是简单直观，易维护。这种设计在操作系统、路由器、交换机和工业控制系统中都得到了广泛的使用。不过，ACL的缺点也是显而易见的，那就是当用户、资源和操作组建增长时，维护这张表的代价会异常庞大，另外，这种设计模式将用户对资源的控制权限直接绑定，十分死板，灵活性不够，无法满足云环境下动态资源授权的需求。</p>
<h4 id="2-基于角色的访问控制（RBAC）"><a href="#2-基于角色的访问控制（RBAC）" class="headerlink" title="2.基于角色的访问控制（RBAC）"></a>2.基于角色的访问控制（RBAC）</h4><p>基于角色的访问控制将用户按其属性进行分类构建出一个个具体的角色，而将权限授权角色，用户通过扮演角色来间接地获取对应的权限。RBAC非常适合现实环境，尤其是企业，因为使用资源的使用者一般并不是资源的拥有者，资源的所有者属于企业。在云环境中更是如此，可能使用RDS的人是公司的开发或者PE，而RDS的归属者是对应的企业。RBAC从访问控制的主体的角度出发，很好使适应了企业的组织结构，同时也将用户和权限分离开了，用户只需要通过扮演不通的角色就能获得对应的权限，这种方式解决了云环境下动态授权的权限需求。</p>
<p>那是否RBAC能解决我们所有的问题了？显然不是。现实的问题往往是复杂的，不会像非黑即白这样简单。RBAC将人和权限分离的方法确实解决了一部分灵活性的问题，但是也增加了使用成本，同时它对细粒度的权限控制没有很好的应对之法。</p>
<h2 id="云环境下面临的挑战"><a href="#云环境下面临的挑战" class="headerlink" title="云环境下面临的挑战"></a>云环境下面临的挑战</h2><p>现在我们也知道了主流的访问控制模型一般是怎么做的了，那么如何应用在云环境中呢？我觉得在云环境下的访问控制系统主要面临以下几个挑战：</p>
<h4 id="1-资源标识的灵活性"><a href="#1-资源标识的灵活性" class="headerlink" title="1.资源标识的灵活性"></a>1.资源标识的灵活性</h4><p>访问控制的系统的立项一般都晚于云计算中的其他产品，因为它本身属于支撑产品。但随着其他产品形态组建完善，如何很好地描述各个产品的资源就成了一件非常令人头疼地问题。在一些IaaS的产品形态中，很大一部分是以实例(instance)的方式来提供服务的；而在某些PaaS的产品形态中，有些是实例的方式来提供服务，而又有一些有着很强的特殊性，比如上文提到的NOS，它们的资源描述是需要以树形方式来表达的。SaaS产品用统一的访问控制系统来管理一般不太可能，因为每个Software的产品形态和使用方式千差万别，你很难去做到统一。在对访问控制系统的设计过程中我发现了一个很有趣的现象，当你考虑的产品越接近应用层面（上层服务），访问控制系统就越接近专家系统。这样很好理解，越上层的服务它的特殊性越强，所以通用性越差，只能做成专家系统。</p>
<h4 id="2-细粒度的权限控制"><a href="#2-细粒度的权限控制" class="headerlink" title="2.细粒度的权限控制"></a>2.细粒度的权限控制</h4><p>访问控制系统的有一个比较困难的点，那就是细粒度的权限控制。这一点在访问控制模型中你找不到答案，它们只是在比较宏观的层面讨论了人和权限的关系。细粒度的权限控制是现实中存在的一个需求，比如一个企业有若干台虚拟机，有一些虚拟机用作webserver，而有一些虚拟机用作数据库，还有一些作为中间件服务器，比如Zookeeper等等。而使用这些虚拟机的人各不相同，他们能看到并操作的虚拟机也应该得到严格地监管，否则可能会引起安全事故。细粒度地权限控制关键点在于“多细”，越细致地控制会导致你的系统复杂度成倍增加，不利于的系统地可维护性。我的建议是只做到实例级别，但有一个例外，那就是对象存储。能做到多细的程度很大一部分取决于第一点中你地资源标识地方式，如果你的资源描述方式得当，那么更加细粒度地访问控制并不会增加你系统地复杂度。这个我会在下文中提到。</p>
<h4 id="3-身份的多样性"><a href="#3-身份的多样性" class="headerlink" title="3.身份的多样性"></a>3.身份的多样性</h4><p>如果一个云计算厂商想吃下一个大客户，满足其业务架构只是其一，还有一个十分重要的条件就是满足其组织架构。大企业绝对有实力也有能力解决其本身的业务架构，其实上不上云更多地是战略性的考虑，他们更加看重云服务的稳定性、安全性和可维护性。同时，其本身的组织架构也十分复杂，要想让其没有阻力地上云，解决其员工的身份问题首当其冲。所以现在主流的云厂商都会提供多种身份的表示方式，例如：子账号、组和角色。</p>
<h4 id="4-权限的描述方式"><a href="#4-权限的描述方式" class="headerlink" title="4.权限的描述方式"></a>4.权限的描述方式</h4><p>权限的描述方式也是十分重要的一个点，可以说这个点设计得好坏决定了你后期能否悠然地应对业务方的接入还是每天火急火燎地和各个业务方定协议定接口。我们知道所有需要访问控制的云产品必然有其支持的动作（Action），每个产品资源(Resource)的描述方式也各不相同，同时允许（Allow）还是禁止(Deny)针对某个资源的操作也是需要明确给出来的。这三个点构成了权限描述的三个要素。如果在前期的设计中没有充分思考这个问题，那么恭喜你，你很有可能给自己埋了一个深坑。你很有可能设计几张大表，来表示各个业务方支持的动作，资源以及用户和他们的关系。出现这样的设计是因为没有真正理解访问控制系统的业务领域。当你在设计这几张表的时候其实意味着访问控制系统在“理解”各个产品的功能，这对一个通用的访问控制系统是致命的。访问控制系统作为一个底层/共享的通用系统，对外输出地只能是能力，而不是去理解各个产品它们自己地业务领域。说到这里，我还是推荐所有的技术人员都有必要学习一下DDD的理论，就算不用自己写代码，系统性地学习其战略模式也会让你收益颇多。</p>
<h4 id="5-动态的授权体系"><a href="#5-动态的授权体系" class="headerlink" title="5.动态的授权体系"></a>5.动态的授权体系</h4><p>这一点相比以上4点来说要简单，这是因为如果你的访问控制系统已经很好地解决上面的挑战，那么你也就自然而然得获得了动态的授权体系。之说以是动态的，是因为云环境下用户和权限的关系往往不是一成不变的。用户在某个时刻希望获得A授权，而在另外一个时刻又希望获得B授权，而且有时授权还带有时效性，当过了截至时间授权也就自动失效了。这种动态性的需求是真实存在的，但我认为满足这个需求依赖于针对前4点的设计，如果把前面的设计做好了，那么系统也就自然而然地满足了动态性的需求，这是一个水到渠成的过程。</p>
<h2 id="业界是如何处理这个问题"><a href="#业界是如何处理这个问题" class="headerlink" title="业界是如何处理这个问题"></a>业界是如何处理这个问题</h2><p>说实话，当我去设计蜂巢的访问控制系统的时候并没有像现在考虑的这么全面。我意识到了一些问题的棘手性，也调研了现在业界做访问控制的方法，可以说做的最好的还是<a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="external">IAM</a>。<br><a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="external">IAM</a>将用户身份划归为子用户、组和角色，基本上这三种身份标识可以满足身份多样性的要求了。我觉得<a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="external">IAM</a>关于权限描述的方式令我耳目一新，它使用了领域专用（DSL）语言来描述权限，具体的形式如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</div><div class="line">  <span class="attr">"Statement"</span>: &#123;</div><div class="line">    <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</div><div class="line">    <span class="attr">"Action"</span>: <span class="string">"s3:ListBucket"</span>,</div><div class="line">    <span class="attr">"Resource"</span>: <span class="string">"arn:aws:s3:::example_bucket"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是我第一次接触<a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="external">DSL</a>的概念，当时对这种设计模式是完全懵逼的，也不太理解其设计思想。随着考虑的问题越来越多，我发现了<a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="external">DSL</a>的强大之处。因为云环境下的访问控制系统最令人头疼的问题就是资源和权限的描述方式，这种极致的灵活性很难通过设计表格来获得。因为任何的以表为中心的设计方式都会映射到某个具体的领域模型上，又因为各个业务的权限控制各不相同，难道说我要根据各个业务来建立模型？前面也说过了，这是万万不可取的，这样设计只会让你深陷无尽的加班和调试之中。用<a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="external">DSL</a>来将访问控制和具体的权限理解分隔开了是最为合适的方式。</p>
<p>通过一套约定的DSL语法来描述权限，访问控制系统可以获得极大的灵活性，同时也不需要理解具体的权限。对权限的理解还是由各个业务方自己控制，这样系统就获得了最大程度的解耦。访问控制系统只用维护这套DSL语法就可以无限的扩展性，多么完美的方案啊！有时间我会专门写一篇关于DSL的文章来对其应用场景进行分析。</p>
<p>实际上，用DSL语法来描述权限也不是<a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="external">IAM</a>首创，早在2001年就出现了响应的规范——<a href="https://en.wikipedia.org/wiki/XACML" target="_blank" rel="external">XACML</a>（可扩展的访问控制高标识语言），该规范现在已经发展到3.0了。其大致的鉴权流程如下图所示，如果对其原理由兴趣的同学可以查看对应的资料。</p>
<img src="/2017/03/07/对云环境下访问控制系统的思考/XACML.png" alt="This image shows the XACML architecture and a sample authorization flow." title="This image shows the XACML architecture and a sample authorization flow.">
<p>以上就是我对云环境下访问控制系统的一点理解，如有不严谨的地方，还望指正。总而言之，云环境下的访问控制系统面临的挑战很多，充分理解访问控制的原理有助于理解代码背后的意义，让我们的系统设计不至于走偏。基于<a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="external">DSL</a>的访问控制模型已经成为业界的主流，但各个云计算厂商自身的业务场景和面向目标人群又各有不通，如何制定适应自身环境的DSL成为了一个关键。后续有机会我会分享网易蜂巢在访问控制系统方面的实践。</p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.cec-ceda.org.cn/information/book/info_6.htm" target="_blank" rel="external">访问控制</a><br><a href="http://blog.csdn.net/bluishglc/article/details/6577778" target="_blank" rel="external">访问控制模型ACL和RBAC</a><br><a href="https://martinfowler.com/books/dsl.html" target="_blank" rel="external">DSL</a></p>
]]></content>
    
    <summary type="html">
    
      最近我在做访问控制方面的工作，故此分享一下我对这个领域的一点思考。
    
    </summary>
    
      <category term="云计算" scheme="http://michael-j.net/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="cloud" scheme="http://michael-j.net/tags/cloud/"/>
    
      <category term="访问控制" scheme="http://michael-j.net/tags/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    
      <category term="架构设计" scheme="http://michael-j.net/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="DSL" scheme="http://michael-j.net/tags/DSL/"/>
    
      <category term="云计算" scheme="http://michael-j.net/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot反序列对象失败</title>
    <link href="http://michael-j.net/2016/12/21/Spring-Boot%E5%8F%8D%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1%E5%A4%B1%E8%B4%A5/"/>
    <id>http://michael-j.net/2016/12/21/Spring-Boot反序列对象失败/</id>
    <published>2016-12-21T02:21:55.000Z</published>
    <updated>2017-06-03T03:40:36.241Z</updated>
    
    <content type="html"><![CDATA[<p>现在Spring Boot这个项目很火，尤其是微服务的流行，Spring Boot作为Java语言最热门的微服务框架之一，它极大地简化了Spring的配置过程。只需要一个注解就可以把整个工程拉起来，大大地降低了Spring的学习成本。我记得Spring Boot的某个开发人员说过，Spring Boot最令开发者激动的功能是可以自定义banner，哈哈，我也非常喜欢这个功能。</p>
<p>言归正传，开始介绍今天我遇到的一个诡异的问题。我使用Redis来缓存一些数据，但是这些数据在反序列的时候报错了。由于原工程涉及一些敏感信息，我新建了一个demo工程来说明这个问题。报错信息如下：</p>
<blockquote>
<p>java.lang.ClassCastException: com.netease.boot.dal.Product cannot be cast to com.netease.boot.dal.Product</p>
</blockquote>
<p>看到这个报错我就懵逼了，以致于我对了好几遍来确认眼睛没有看花。经过若干次重试，还是一样的错误。有人可能会对<code>Product</code>的实现产生怀疑，是不是没有加<code>serialVersionUID</code>，作为一个专业老司机，这点错误我还是不会犯得。我贴一下相关的代码：</p>
<p>Product类如下：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Serializable</span></span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = <span class="number">-5837342740172526607</span>L;</div><div class="line"></div><div class="line">    @Size(min = <span class="number">1</span>, max = <span class="number">32</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> code;</div><div class="line">    @Size(min = <span class="number">1</span>, max = <span class="number">16</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</div><div class="line">    @Size(max = <span class="number">255</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span> description;</div><div class="line">    @NotNull</div><div class="line">    <span class="keyword">private</span> EMailAddress principalEmail;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Product(<span class="keyword">String</span> code, <span class="keyword">String</span> name, <span class="keyword">String</span> description, EMailAddress principalEmail) &#123;</div><div class="line">        <span class="built_in">this</span>.code = code;</div><div class="line">        <span class="built_in">this</span>.name = name;</div><div class="line">        <span class="built_in">this</span>.description = description;</div><div class="line">        <span class="built_in">this</span>.principalEmail = principalEmail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> void changeName(<span class="keyword">String</span> <span class="keyword">new</span><span class="type">Name</span>) &#123;</div><div class="line">        <span class="built_in">this</span>.name = <span class="keyword">new</span><span class="type">Name</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> void changeDescription(<span class="keyword">String</span> <span class="keyword">new</span><span class="type">Description</span>) &#123;</div><div class="line">        <span class="built_in">this</span>.description = <span class="keyword">new</span><span class="type">Description</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> void changePrincipalEMail(EMailAddress <span class="keyword">new</span><span class="type">PrincipalEMail</span>) &#123;</div><div class="line">        <span class="built_in">this</span>.principalEmail = <span class="keyword">new</span><span class="type">PrincipalEMail</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getCode() &#123;</div><div class="line">        <span class="keyword">return</span> code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getName() &#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getDescription() &#123;</div><div class="line">        <span class="keyword">return</span> description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> EMailAddress getPrincipalEmail() &#123;</div><div class="line">        <span class="keyword">return</span> principalEmail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Product&#123;"</span> +</div><div class="line">                <span class="string">"bizCode='"</span> + code + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", description='"</span> + description + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", principalEmail="</span> + principalEmail +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>redis service相关的代码如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">　　@Override</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> put(<span class="keyword">String</span> <span class="built_in">key</span>, Serializable content) <span class="keyword">throws</span> RedisException &#123;</div><div class="line">    Jedis jedis = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        jedis = redisPoolConfig.getJedis();</div><div class="line">        <span class="built_in">byte</span>[] contentBytes = SerializationUtils.serialize(content);</div><div class="line">        jedis.<span class="built_in">set</span>(<span class="built_in">key</span>.getBytes(ENCODING), contentBytes);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        LOG.error(<span class="string">"Put error:&#123;&#125;."</span>, e.getMessage(), e);</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RedisException(e);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</div><div class="line">            redisPoolConfig.releaseJedis(jedis);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">　　@Override</div><div class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) <span class="keyword">throws</span> RedisException &#123;</div><div class="line">    Jedis jedis = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        jedis = redisPoolConfig.getJedis();</div><div class="line">        <span class="built_in">byte</span>[] valueBytes = jedis.<span class="built_in">get</span>(<span class="built_in">key</span>.getBytes(ENCODING));</div><div class="line">        <span class="keyword">if</span> (valueBytes == <span class="keyword">null</span> || valueBytes.length == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> SerializationUtils.deserialize(valueBytes);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        LOG.error(<span class="string">"Get error:&#123;&#125;."</span>, e.getMessage(), e);</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RedisException(e);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</div><div class="line">            redisPoolConfig.releaseJedis(jedis);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实在没办法，这尼玛是什么问题。因为我以前这么使用过，而且工作的非常好，为毛这次就不行了。没办法了，加debug代码，我让get方法返回Object，再外面强转，（冥冥中有一种感觉，像是泛型的问题）。修改后的代码如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">Object</span> <span class="built_in">get</span>(<span class="keyword">String</span> <span class="built_in">key</span>) <span class="keyword">throws</span> RedisException &#123;</div><div class="line">        Jedis jedis = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            jedis = redisPoolConfig.getJedis();</div><div class="line">            <span class="built_in">byte</span>[] valueBytes = jedis.<span class="built_in">get</span>(<span class="built_in">key</span>.getBytes(ENCODING));</div><div class="line">            <span class="keyword">if</span> (valueBytes == <span class="keyword">null</span> || valueBytes.length == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">Object</span> o = SerializationUtils.deserialize(valueBytes);</div><div class="line">            <span class="keyword">return</span> o;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOG.error(<span class="string">"Get error:&#123;&#125;."</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RedisException(e);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) &#123;</div><div class="line">                redisPoolConfig.releaseJedis(jedis);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在反序列化之后加断电debug，观察变量o，得到如下所示的图：<br><img src="http://7xnwpq.com1.z0.glb.clouddn.com/redis-deser.png" alt="redis-get"></p>
<p>WTF! IDE都识别出来了变量o是Product类型，但是后续的强转还是失败。经过我的测试发现所有的通过redis反序列化出来的类都有这个问题。万般无奈之下，我陷入了深深地沉思之中…之中…中…</p>
<p>我开始怀疑是序列化的姿势不对，但是为毛以前可以啊。不管了，先加一段测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">Product product = <span class="keyword">new</span> Product(<span class="string">"comb"</span>,<span class="string">"蜂巢"</span>,<span class="string">"云计算基础设施产品"</span>,<span class="keyword">new</span> EMailAddress(<span class="string">"hzxx@corp.netease.com"</span>));</div><div class="line">        <span class="comment">/*FileOutputStream fileOutputStream = new FileOutputStream("/home/mj/work/product.data");</span></div><div class="line">        fileOutputStream.write(SerializationUtils.serialize(policyContext));</div><div class="line">        fileOutputStream.flush();</div><div class="line">        fileOutputStream.close();*/</div><div class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"/home/mj/work/product.data"</span>));</div><div class="line">        oos.writeObject(product);</div><div class="line">        oos.flush();</div><div class="line">        oos.close();</div><div class="line"></div><div class="line">        <span class="comment">/*FileInputStream fileInputStream=new FileInputStream("/home/mj/work/product.data");</span></div><div class="line">        byte[] rawPolicyContext=new byte[fileInputStream.available()];</div><div class="line">        fileInputStream.read(rawPolicyContext);</div><div class="line">        PolicyContext pc = SerializationUtils.deserialize(rawPolicyContext);</div><div class="line">        System.out.println(pc);*/</div><div class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"/home/mj/work/product.data"</span>));</div><div class="line">        Product pc = (Product) ois.readObject();</div><div class="line">        System.out.println(pc);</div></pre></td></tr></table></figure>
<p>在倒数第二行打点，截图如下：</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/diy-deser.png" alt="diy-deser"></p>
<p>没截图没毛病啊，很正常啊。我还专门测试了<code>SerializationUtils</code>版的序列化方式(把上面的注释去掉)，发现结果也很正常，这尼玛到底是怎么回事。实际上，<code>SerializationUtils</code>也就是jdk自带的<code>ObjectOutputStream</code>和<code>ObjectInputStream</code>的简单封装。</p>
<p>在我走投无路之际，正准备研究<code>instanceof</code>的工作原理的时候，脑中闪过一道灵感——难道是classloader的问题？说干就干，debug得到如下情况：</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/classloader-1.png" alt="classloader-1"><br><img src="http://7xnwpq.com1.z0.glb.clouddn.com/classloader-2.png" alt="classloader-2"></p>
<p>终于发现问题所在了，原来两个classloader不一样，而<code>instanceof</code>是对同一个classloader而言的。再确定原因后，借助强大的google发现了这是Spring Boot DevTools的一个限制，相关的文档链接: <a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools-known-restart-limitations" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools-known-restart-limitations</a></p>
<p>原话是这样的：</p>
<blockquote>
<p>Restart functionality does not work well with objects that are deserialized using a standard ObjectInputStream. If you need to deserialize data, you may need to use Spring’s ConfigurableObjectInputStream in combination with Thread.currentThread().getContextClassLoader().<br>Unfortunately, several third-party libraries deserialize without considering the context classloader. If you find such a problem, you will need to request a fix with the original authors.</p>
</blockquote>
<p>DevTools是Spring Boot中一个很有用的工具，可以自动帮你重启应用，而不用你每次重启应用来debug，提高了生产效率。具体的用法可以参考相关的文档。这里的限制条件说的很清楚了，重启功能不能和使用标准的<code>ObjectInputStream</code>来反序列对象一起使用，如果你非要使用，那么请从线程的上下文中来获取classloader。</p>
<p>看到这里我瞬间明白了。因为devtools使用两个classloader，你工程中使用的第三方jar包被一个叫”base”的classloader所加载，而你正在开发的代码被一个叫”restart”的classloader所加载。如果检测到你的classpath路径下文件有变化，restart就会重新加载你工程的类。这样做以后能提高你的类加载速度，这在开发阶段是很有用的一个功能。</p>
<p>既然知道了原因，就很好解决了。因为我目前的工程比较小，而且只是一个restful后端应用，所有devtools对我的应用帮组不大。注释掉devtools依赖后就解决了上面的问题。如果你想使用这个工具，同时又有反序列化的需求，有两种方式解决：</p>
<ol>
<li>自定义一个<code>ObjectInputStream</code>，重写<code>resolveClass</code>方法，也可以使用Spring提供的<code>ConfigurableObjectInputStream</code>类。然后从<code>Thread.currentThread().getContextClassLoader()</code>获取classloader就可以解决该问题。</li>
<li>配置<code>spring-devtools.properties</code>文件，把你使用的第三方序列化工具也加入<code>restart　classloader</code>的控制范围内就行了。</li>
</ol>
<p>这两种方法均可以在Spring Boot的官方文档中有详细描述：<a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools</a>。</p>
<p>总结，从发现问题到定位原因耗时两个多小时，还是要加强对基础概念的深入理解才能快速定位原因啊！</p>
<p>文本的示例demo我已上传到github，有兴趣的同学可以下载自己debug一下：<a href="https://github.com/mymonkey110/boot-demo.git" target="_blank" rel="external">https://github.com/mymonkey110/boot-demo.git</a></p>
<p>参考资料:</p>
<p><a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools" target="_blank" rel="external">Spring Boot官方手册</a><br><a href="https://github.com/spring-projects/spring-boot/issues/3805" target="_blank" rel="external">spring-boot issue</a><br><a href="http://stackoverflow.com/questions/30795262/redis-serialization-and-deserialization" target="_blank" rel="external">redis serialization</a><br><a href="http://stackoverflow.com/questions/37977166/java-lang-classcastexception-dtoobject-cannot-be-cast-to-dtoobject" target="_blank" rel="external">classcastexception</a></p>
]]></content>
    
    <summary type="html">
    
      本文记录了一次我遇到的诡异的反序列对象失败的debug过程，希望对遇到该问题的读者有帮助。
    
    </summary>
    
      <category term="debug" scheme="http://michael-j.net/categories/debug/"/>
    
    
      <category term="debug" scheme="http://michael-j.net/tags/debug/"/>
    
      <category term="springboot" scheme="http://michael-j.net/tags/springboot/"/>
    
      <category term="deserialized" scheme="http://michael-j.net/tags/deserialized/"/>
    
      <category term="redis" scheme="http://michael-j.net/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>架构为什么会腐化</title>
    <link href="http://michael-j.net/2016/12/15/%E6%9E%B6%E6%9E%84%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%85%90%E5%8C%96/"/>
    <id>http://michael-j.net/2016/12/15/架构为什么会腐化/</id>
    <published>2016-12-14T16:33:22.000Z</published>
    <updated>2017-06-03T03:41:06.325Z</updated>
    
    <content type="html"><![CDATA[<p>架构腐化一词我已经忘了从哪本书上看到的了，但是这个词给我留下了非常深刻的印象。关键在于“腐”一词，充分而又形象的描述了架构是怎样一步一步从简单清爽走向复杂污秽的。请允许我用“污秽”一词来描述一个糟糕的架构，因为糟糕的架构就像是一潭散发着臭味的淤泥，让你不想靠近，一旦涉入其中就会难以自拔，苦不堪言。</p>
<p>我相信所有的开发者都不希望自己的参与项目是一潭淤泥，但是为什么会出现这么多糟糕的架构呢？难道是项目最初的设计者经验不够，又或者项目开发周期太赶？我认识事实并非如此。现在，软件开发者的水平都普遍提高了，因为我们有前人那么多经验可以借鉴，连刚毕业的大学生也知道用MVC模式来搭建框架。难道是MVC模式太挫了，不够用，实际上80%的项目用MVC模式足以应对。那到底是什么原因导致了项目腐化呢？我认为有以下三个原因：</p>
<h3 id="1-不理解项目的业务价值"><a href="#1-不理解项目的业务价值" class="headerlink" title="1. 不理解项目的业务价值"></a>1. 不理解项目的业务价值</h3><p>实际上，几乎所有的软件（尤其是商业软件）都有其所属的业务价值，理解你所开发的软件的业务价值对项目的成功来说至关重要。我发现很多程序员对业务需求不屑一顾，而对那些所谓的非功能性需求盲目的崇拜和追捧，其实这是一种本末倒置的行为。</p>
<p>现实世界是一个商业的世界，而商业世界则会充斥着各种各样的业务逻辑。理解这些业务逻辑会极大地增加你的见识、拓宽你的视野。如果你是一个在金融行业工作的程序员，那么长时间在金融领域工作的精力将极大地提高你的市场竞争力。但是如果你不愿意花时间去学习金融领域的知识，而是去盲目的追求最新的技术，那么其实你是丢芝麻捡西瓜，浪费了这个行业带个你的附加价值。我不是不鼓励程序员瞎折腾，实际上我自己有时候也喜欢瞎折腾，倒腾一些新玩意，这视乎是程序员的一种天性。我的意思是说不要放弃了解自己所在行业/领域的知识视为不见，而盲目的追求其他的“高大上”的技术。</p>
<p>为什么说理解项目的业务价值至关重要呢，那是因为只有理解了其业务价值你才能识别出来这个项目的核心领域所在，这样这个项目才不会走偏。传统的软件开放流程中有一个非常重要的角色存在，叫做“业务分析员”，他的工作在项目的概要设计和详细设计解决十分重要。虽然我也没见过有专职的人员干这个，但是这却是非常重要的一个角色。他会帮你分析你的业务，和产品经理沟通，理解产品的真正意图。在这个沟通过程中，你的领域模型也就逐渐的清晰起来了，哪些是核心哪些是支撑部分也就清楚了。</p>
<p>有些程序员在接到产品需求后立马就开始工作了，吭哧吭哧地撸袖子上阵，我认为这是十分要不得的。接到产品需求的第一反应不是要想着我要建哪些表哪些字段，而是要多问问自己这个需求是干啥的，产品经理真正的意图是啥，为什么要我来做，跟我的系统有啥关系。千万不要盲从产品经理的话，实际上有些时候他们自己也不知道自己要干啥，为啥要这么干。这个时候必要的交流是不可少的，随着对话的深入，你和产品对真是的需求都会有着更深地认识。新人和实习生在这方面经验往往不足，此时最好找一个比较资深的程序员帮你梳理一下业务流程。</p>
<p>相反，如果你不知道你的系统的业务价值或者核心所在，什么需求你都来着不拒，那么恭喜你，你的系统正在腐化。当你在抱怨说“为什么这个业务要放在我这里”，“这个我有什么关系”之类的话的时候就可以闻到一丝“腐化”的闻到。你可能会说项目工期紧、人手太少、需求太多之内的外部原因，所以临时地先加到系统中搞一下。Ok，这没有任何问题。但是我还是要说，你知道你的系统的核心价值所在吗？如果你的回答是Yes，那么恭喜你，你是一名合格的程序员了。否则，你可能需要学习一下技术之外的东西的了－那就是沟通。</p>
<h3 id="2-过度设计"><a href="#2-过度设计" class="headerlink" title="2. 过度设计"></a>2. 过度设计</h3><p>软件开发的头号敌人就是复杂度。现在软件开发是如此的困难，动不动就有十几万行代码出现，但是现实世界就是如此的复杂，不会因为你采用某种架构或者奇淫巧技就能把代码行数降下来。好的架构设计会将系统的复杂度控制在一个合理的范围之内，因为人所能驾驭的代码行数最多也就几十万行，如果一个系统的代码行数达到百万行，那么这个系统就很危险了。现在微服务架构如此火爆，不得不说有这方面的原因。</p>
<p>如果你在设计一个新系统，那么我需要提醒你一定要控制好复杂度。一个好的系统的核心域往往是简单的、直观的，其他人很快就能理解其核心的工作原理。如果一开始系统设计的十分复杂，那么这个系统的扩展性就会很差，后续的维护将不可想象。但是是不是在设计之初就完全不考虑后续的变化了呢？我的建议是你只需要把你的核心领域模型建好，多问问自己系统最核心的价值是提供什么服务的，照着这个方向去设计，那么你的系统就不会走偏。灵活性和可扩展型往往只是领域模型的延伸，这是一个水到渠成的过程。</p>
<p>非要给个度的话，我认为5%刚刚好。不要出现超过5%的跟你本次需求无关的概念和行为，而且这5%还是你能确定在不久的将来就会使用的扩展。</p>
<p>还是那句话，好的设计往往是简单的，复杂是万恶之源。</p>
<h3 id="3-懒于重构"><a href="#3-懒于重构" class="headerlink" title="3. 懒于重构"></a>3. 懒于重构</h3><p>过度设计不好，完全不设计也不行，尤其是随着敏捷开发的流行，持续交付优于提前设计的思想逐步流行。现在软件交付速度是如此之快，很有可能刚刚设计好的系统，下个月就全变样了。应对这种变化的唯一方法就是持续重构。</p>
<p>没有任何设计能预料到未来的变化，代码可能会发生变化。新的功能会持续的添加进来，老的功能也在持续的改变。而且每次迭代或者交付，都可能会对核心领域产生影响。千万不要对这种影响视而不见，因为它在改变着你的领域模型。正确地方式是经常调整领域模型以适应新功能所带来的变化，虽然每次调整的幅度可能很小，但是这却能让你的领域模型处于健康的工作状态。没有领域模型或者系统在一开始就是完美的，之所以它们能在后续的迭代过程中良好的工作离不开不断地重构。</p>
<p>重构不是等到你的系统无药可救的时候才想到的事，而是应该在其不断开发过程中一直进行的工作。如果说持续交付提高了你系统的竞争力，那么持续重构则是这种竞争力的有力保障！</p>
<p>以上三点是我认为架构腐化最致命的原因，很多思想来源于<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="external">DDD</a>、<a href="https://book.douban.com/subject/1229923/" target="_blank" rel="external">重构</a>和<a href="https://en.wikipedia.org/wiki/Agile_software_development" target="_blank" rel="external">敏捷开发</a>。linus torvalds曾经说过：</p>
<blockquote>
<p>Talk is cheap. Show me the code.</p>
</blockquote>
<p>我认为<em>Talk is not cheap</em>, 好的思想和开发方式价值连城，想好了再做会提高你的工作效率，从而提升你的生活品质。</p>
<p>这篇文章从下笔到完成，拖了半个多月了，期间琐事太多。对这个话题有兴趣的朋友我们可以留言讨论。</p>
]]></content>
    
    <summary type="html">
    
      今天我想聊一下架构腐化的话题，分享一下我对于架构腐化的看法和应对之道。
    
    </summary>
    
      <category term="架构设计" scheme="http://michael-j.net/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="DDD" scheme="http://michael-j.net/tags/DDD/"/>
    
      <category term="架构设计" scheme="http://michael-j.net/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>值对象的威力</title>
    <link href="http://michael-j.net/2016/10/18/%E5%80%BC%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A8%81%E5%8A%9B/"/>
    <id>http://michael-j.net/2016/10/18/值对象的威力/</id>
    <published>2016-10-18T15:27:45.000Z</published>
    <updated>2017-06-03T03:41:56.762Z</updated>
    
    <content type="html"><![CDATA[<p>值对象是DDD中非常重要的一种技术，掌握这种技术让你写代码事半功倍，体会到OO的精妙。如果你是一名Java程序员，我相信你或多或少地见过值对象了，只是你没有意识到而已。</p>
<p>引用维基百科的<a href="https://en.wikipedia.org/wiki/Value_object" target="_blank" rel="external">解释</a>：</p>
<blockquote>
<p>In computer science, a value object is a small object that represents a simple entity whose equality is not based on identity.</p>
</blockquote>
<p>字面意思就是，值对象是一个小对象，它代表着一个简单的实体，而实体的相等性不取决于它的ID。</p>
<p>刚刚接触OO编程的新手看完上面的解释相信直接是懵逼的，跟我接触这一概念时一样。如何理解值对象了，我还是举一个栗子。比如我们在做一个短信推送的服务，需要根据目标用户的手机号推送到相应的短信网关。我们定义了一个根据手机号推送短信的interface，很有可能我们是这么设计：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">void sendMessage(<span class="keyword">String</span> phone, <span class="keyword">String</span> message) &#123;</div><div class="line">    <span class="keyword">if</span>(StringUtils.isBlank(phone) &amp;&amp; phone.length()!=<span class="number">13</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"phone format error:"</span>+phone);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(phone.starts(<span class="string">"134"</span>)) &#123;</div><div class="line">        sendMessageToChinaMobileGateway(phone,message);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(phone.starts(<span class="string">"130"</span>)&#123;</div><div class="line">        sendMessageToChinaUnionGateway(phone,message);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(phone.starts(<span class="string">"189"</span>) &#123;</div><div class="line">        sendMessageToChinaTelecomGateway(phone,message);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(<span class="string">"unknown phone range"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的过程我们只考虑3个号码段，134(移动)\130(联通)\189(电信)，其他的号码短我们暂不处理。上面的处理方式有什么问题？ </p>
<p>如果我们的工程里面只有一个地方用的<code>phone</code>的概念，也只有一个地方对<code>phone</code>所属的号码短进行判断，那么没问题。上面的写法没有任何问题，因为它是一个简单问题。但是如果你在做一个短信推送的应用，在你的工程里面会只有一个地方会使用<code>phone</code>这个概念吗，也之有一个地方需要判断号码短吗？ 显然不可能。</p>
<p>有人可能会争论说，不就是判断号码归属吗？我可以搞一个类似<code>PhoneQueryService</code>之类的查询类，再提供一个<br><code>Operator queryBelong(String phone)</code>的interface不就搞定了吗？ 当然，这么做也没有问题。但是当你的问题域逐渐变得复杂的时候，你就会开始有些不舒服了。因为每一个出现<code>phone</code>的地方，你发现基本上都会需要<code>PhoneQueryService</code>，但是他们在代码上又是两个东西。这种做饭的滥用最终会导致<code>Fat Service</code>的出现，代码的复用性会急剧降低。</p>
<p>究其原因，是因为我们把<code>phone</code>这个概念和<code>phone</code>的行为给拆开了。你可以用<code>String</code>代表任何字符类型，可以是<code>phone</code>，也可以是<code>name</code>，基本上这种类型可以代表任何东西。使用你API的人无法从中得到任何信息，除了你把变量名称叫做<code>phone</code>以外。同时，判断手机号网段这个动作是和<code>phone</code>本身强相关的，为什么不把这个动作加到<code>phone</code>里面了？！ 现在，我们重构一下代码，得到类似下面的代码结构：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> String phoneNumber;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(String phoneNumber)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span>(!validate(phoneNumber)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"phone format error:"</span>+phone);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.phoneNumber = phoneNumber;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(String phoneNmber)</span> </span>&#123;</div><div class="line">      <span class="comment">//验证逻辑</span></div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isMobile</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> phoneNumber.<span class="title">starts</span><span class="params">(<span class="string">"134"</span>)</span></span>;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isUnion</span><span class="params">()</span> </span>&#123;</div><div class="line">         <span class="function"><span class="keyword">return</span> phoneNumber.<span class="title">starts</span><span class="params">(<span class="string">"130"</span>)</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isTelecom</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">return</span> phone.<span class="title">starts</span><span class="params">(<span class="string">"189"</span>)</span></span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">getRawPhone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.phoneNumber;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isSameWith</span><span class="params">(Phone other)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> other!=<span class="keyword">null</span>&amp;&amp;<span class="keyword">this</span>.phoneNumber.equals(other.getRawPhone());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们新增了一个叫<code>Phone</code>的类，并加入了判断网段归属的逻辑。引入这个类以后<code>sendMessage()</code>发生了什么变化呢？</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">void sendMessage(Phone phone, <span class="keyword">String</span> <span class="keyword">message</span>) &#123;</div><div class="line">    checkNotNull(phone);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(phone.isMobile()) &#123;</div><div class="line">        sendMessageToChinaMobileGateway(phone,<span class="keyword">message</span>);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(phone.isUnion())&#123;</div><div class="line">        sendMessageToChinaUnionGateway(phone,<span class="keyword">message</span>);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(phone.isChinaTelecom()) &#123;</div><div class="line">        sendMessageToChinaTelecomGateway(phone,<span class="keyword">message</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>咋一看，代码好像没有怎么减少啊。对于这个interface来说代码确实没有减少，反而我们还新加一个类。但是现在看看我们获得了什么：</p>
<ul>
<li>首先，方法签名变了。不在用String了，取而代之的是<code>Phone</code>类型。这对使用者的约束更强了，我们也再也不用判断phone是否合法了。</li>
<li>其次，判断网段归属和<code>phone</code>合在一起了，这样我需要判断归属运营商的时候直接调用<code>phone</code>的方法就行了。</li>
</ul>
<p>现在，我们已经得到了一个值对象了，那就是<code>Phone</code>。它是一个小对象，代表了手机号这个概念，它的相等性是基于其业务属性的，而不是ID，而且值对象根本就没有ID这个概念。</p>
<p>值对象最大的好处在于增加了代码复用，同时它也是类型安全的（这一点和我之前提到了enum类似）。如果你只在一个地方使用值对象，那么你是不会体会到值对象带来的好处的。但是，每当你的代码应用一次值对象，你就会收获值对象带来的好处。<strong><em>用的越多，收益越大</em></strong>，这一点和单元测试比较类似。使用值对象的另外一个好处就是前置的安全校验，尤其是你在编写SDK或者开放接口的时候。因为你无法知道使用者会如何使用你的API，那么通过值对象来获得一个前置的安全校验有着非常大的好处。</p>
<p>值对象用在什么地方呢？ 我个人的经验就是，如果在你的工程中反复出现一个具体的概念（往往跟现实生活有关），而且这个概念中涉及的行为是某种确定性的（比如你知道了手机号，就知道对应的运营商一样），那么你可以考虑一下值对象。引用《实现领域驱动设计》中关于值对象特征的定义:</p>
<ul>
<li>描述了领域中的一件东西</li>
<li>不可变的</li>
<li>将不同的相关属性组合成了一个概念整体</li>
<li>当度量和描述改变时，可以用另外一个值对象予以替换</li>
<li>可以和其他值对象进行相等性比较</li>
<li>不会对协作对象造成副作用</li>
</ul>
<p>最为重要的就是它描述了领域中的某件东西，并且它是不可变的。值对象一旦创建就不会发生变化，如果你需要表示另外一个东西，用另外一个值对象来代替它。</p>
<p>值对象是DDD中非常重要的部分，我们应该尽可能对使用值对象来建模，因为它是易于使用和替换的。但是值对象的实例化确实一个令人头疼的问题，尤其是聚合中存在1对多的关系时。由于这些内容涉及到DDD的多方面的知识，我不在这里展开讨论了。后续会专门讲值对象的持久化问题。之所以在讲DDD之前首先讲值对象，因为它还是少数几个可以完全脱离DDD并不失其威力的利器。就算你完全不了解DDD，也可以非常顺手的使用值对象。</p>
<p>说了这么多，我相信你也对值对象有个具象的认识了。纸上得来终觉浅，不如看看你现有的代码中哪些可以用值对象来代替吧！</p>
<p>参考文献：</p>
<p><a href="https://en.wikipedia.org/wiki/Value_object" target="_blank" rel="external">Wikipedia值对象的定义</a><br><a href="http://martinfowler.com/bliki/ValueObject.html" target="_blank" rel="external">Martin Fowler值对象的解释</a><br><a href="https://book.douban.com/subject/25844633/" target="_blank" rel="external">实现领域驱动设计</a><br><a href="https://www.infoq.com/presentations/Value-Objects-Dan-Bergh-Johnsson" target="_blank" rel="external">Power Use of Value Objects in DDD</a>: 强烈推荐</p>
]]></content>
    
    <summary type="html">
    
      值对象是DDD中非常重要的一种技术，掌握这种技术让你写代码事半功倍，体会到OO的精妙。
    
    </summary>
    
      <category term="DDD" scheme="http://michael-j.net/categories/DDD/"/>
    
    
      <category term="DDD" scheme="http://michael-j.net/tags/DDD/"/>
    
      <category term="Value Object" scheme="http://michael-j.net/tags/Value-Object/"/>
    
  </entry>
  
  <entry>
    <title>论Enum的重要性</title>
    <link href="http://michael-j.net/2016/09/20/%E8%AE%BAEnum%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/"/>
    <id>http://michael-j.net/2016/09/20/论Enum的重要性/</id>
    <published>2016-09-20T14:18:11.000Z</published>
    <updated>2017-06-03T03:50:51.075Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道Java中有一种数据类型是枚举类，实际上很多强类型的语言都有枚举。但是很多人对枚举类不那么重视，或者不能正确地应用枚举，也就不能发挥其威力了。这里分享一下我对枚举的理解，及其常见的用法。</p>
<p>既然Java专门为枚举建立了类型，那么我们应该在什么时候去使用enum呢，我认为在以下两个场景中可以尝试使用。</p>
<h4 id="1-封装有限的的变化"><a href="#1-封装有限的的变化" class="headerlink" title="1. 封装有限的的变化"></a>1. 封装有限的的变化</h4><p>相信很多人都遇到这样一个场景，我们有一个父类，父类下面有几个子类，而这几个子类是可以确定的。我们并不想父类被不相干的类所继承，那么我们可以通过enum来限制子类。实际上你想把代码控制在预期的范围之类时，都可以通过enum来达到效果。</p>
<h4 id="2-状态代码"><a href="#2-状态代码" class="headerlink" title="2. 状态代码"></a>2. 状态代码</h4><p>我们经常会遇到使用状态码的情况，例如在任务处理过程中。我发现很多人喜欢使用int或者long来表示状态码，然后通过定义对应的变量来表示其意义。不是说这种方式不好，但我从中嗅出了一丝坏味道。如果通过int或者long来表示状态码，如果出现了不在业务范围内的值该怎么办？为什么状态码不能直接表示其意义，还需要通过文档来说明呢？我一直比较推崇Self-Explained的编程习惯，代码和文档合二为一。</p>
<p>那么使用Enum有什么好处了，我们为什么要用Enum呢？相比于int或者string，enum最大的优势就是有它是类型安全的。如何理解类型安全呢，我举一个例子：很多APP都有第三方登陆的功能，服务器要根据客户端传过来的登陆类型(type)来调用对应平台的接口来获取用户信息。我的代码是这样写的：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TPAccountRouterImpl</span> <span class="keyword">implements</span> <span class="title">TPAccountRouter</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"wbAccountResolver"</span>)</div><div class="line">    <span class="keyword">private</span> TPAccountResolver wbTPAccountResolver;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"wxAccountResolver"</span>)</div><div class="line">    <span class="keyword">private</span> TPAccountResolver wxTPAccountResolver;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"qqAccountResolver"</span>)</div><div class="line">    <span class="keyword">private</span> TPAccountResolver qqTPAccountResolver;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">TPAccount <span class="title">getAccountInfo</span><span class="params">(<span class="keyword">final</span> String tuid, String accessToken, AccountType accountType)</span> <span class="keyword">throws</span> TPException </span>&#123;</div><div class="line">        TPAccountResolver tpAccountResolver;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (accountType) &#123;</div><div class="line">            <span class="keyword">case</span> WB:</div><div class="line">                tpAccountResolver = wbTPAccountResolver;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> WX:</div><div class="line">                tpAccountResolver = wxTPAccountResolver;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> QQ:</div><div class="line">                tpAccountResolver = qqTPAccountResolver;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TPException(<span class="string">"unknown account type"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">return</span> tpAccountResolver.<span class="title">getAccountInfo</span><span class="params">(tuid, accessToken)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>TPAccountRouter</code>是一个账号解析的路由器，根据<code>AccountType</code>来调用对应平台的解析器来解析。配合switch-case语法，利用策略模式我们就可以写出一个还算优美的代码。如果把<code>accountType</code>换成<code>int</code>会怎样？那么我们不得不加上一句及其烦人的<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(accountType&lt;<span class="number">0</span> || accountType&gt;<span class="number">3</span>) &#123;</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">"type illegal"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>保护性代码，同时将case子句换成一个一个静态常量，最后还在API文档上配上说明，1,2,3各代表什么意义。我相信大家一定能感受出来两种代码写法带来的区别。</p>
<p>另外一个有点，我认为就是enum的self-explain特性，上面的例子中也直观的反应了这一点。Enum结合了int和String的优点，并将其发扬光大。</p>
<p>关于Enum怎么用，网上有很多的介绍，可以参考这篇文章：<a href="http://www.cnblogs.com/happyPawpaw/archive/2013/04/09/3009553.html" target="_blank" rel="external">http://www.cnblogs.com/happyPawpaw/archive/2013/04/09/3009553.html</a>，还是比较全面的。最常用的就是直接申明各个枚举值，基本上能满足大部分业务场景了。也有很多场景下，我们会在enum中加入成员变量，这是因为业务中存在和Enum相对应的文档和动作。再举一个我写过的代码例子：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCheckedException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">-3143228702981231790</span>L;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractCheckedException</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function">ErrorCode <span class="title">errorCode</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> errorCode().code();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">msg</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> errorCode().msg();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">int</span> <span class="title">successCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ErrorCode.SUCCESS.code();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> ErrorCode &#123;</div><div class="line">        SUCCESS(<span class="number">1000</span>, <span class="string">"success"</span>),</div><div class="line">        PARAM_ERROR(<span class="number">1001</span>, <span class="string">"parameter error"</span>),</div><div class="line">        ILLEGAL_REQUEST(<span class="number">1002</span>, <span class="string">"illegal request"</span>),</div><div class="line">        SYS_ERROR(<span class="number">1003</span>, <span class="string">"system error"</span>),</div><div class="line">        NAMESPACE_NOT_FOUND(<span class="number">2001</span>, <span class="string">"namespace not found"</span>),</div><div class="line">        NAMESPACE_ALREADY_EXIST(<span class="number">2002</span>, <span class="string">"namespace already exist"</span>),</div><div class="line">        APP_NOT_FOUND(<span class="number">2003</span>, <span class="string">"app not found"</span>),</div><div class="line">        APP_ALREADY_EXIST(<span class="number">2004</span>, <span class="string">"app already exist"</span>),</div><div class="line">        TASK_NOT_FOUND(<span class="number">2005</span>, <span class="string">"task not found"</span>),</div><div class="line">        TASK_ALREADY_EXIST(<span class="number">2006</span>, <span class="string">"task already exist"</span>),</div><div class="line">        CRON_EXPRESSION_ERROR(<span class="number">2007</span>, <span class="string">"cron expression error"</span>),</div><div class="line">        ZOOKEEPER_ERROR(<span class="number">3001</span>, <span class="string">"zookeeper error"</span>),</div><div class="line">        NODE_NOT_EXIST(<span class="number">3002</span>, <span class="string">"node not exist"</span>),</div><div class="line">        NODE_ALREADY_EXIST(<span class="number">3003</span>, <span class="string">"node already exist"</span>),</div><div class="line">        UNKNOWN_ERROR(<span class="number">9999</span>, <span class="string">"unknown error"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> code;</div><div class="line">        <span class="keyword">private</span> String msg;</div><div class="line"></div><div class="line">        ErrorCode(<span class="keyword">int</span> code, String msg) &#123;</div><div class="line">            <span class="keyword">this</span>.code = code;</div><div class="line">            <span class="keyword">this</span>.msg = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">code</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> code;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="function">String <span class="title">msg</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">ErrorCode <span class="title">getErrorCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (ErrorCode it : ErrorCode.values()) &#123;</div><div class="line">                <span class="keyword">if</span> (it.code() == code) &#123;</div><div class="line">                    <span class="keyword">return</span> it;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> UNKNOWN_ERROR;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我在<a href="https://github.com/mymonkey110/jscheduler" target="_blank" rel="external">jscheduler</a>中封装了高层了受检异常，这点收到了Zookeeper中<code>KeeperException</code>的启发。我在ErrorCode中加入了code和message，因为code和message是和这个枚举绑定的，放到枚举中再合适不过呢，我将之称为文档的绑定。还有情况是因为业务动作和枚举相关，比如第三方登陆的例子，我们完全可以第三方登陆接口的URL放到<code>AccountType</code>中，然后后续的解析方法直接从中取的URL进行调用就行，因为这个解析方法是和Enum一一对应的。这样的例子实在太多了，不胜枚举。</p>
<p>总之，如果你有一类相识的业务场景，并且这些业务场景只有有限的变化，是可以预期的，那么建议你考虑一下使用Enum。相信我，它值得尝试！</p>
]]></content>
    
    <summary type="html">
    
      Enum是Java中非常重要的一种数据类型，用好Enum是写好代码必须掌握的技术。
    
    </summary>
    
      <category term="Better code" scheme="http://michael-j.net/categories/Better-code/"/>
    
    
      <category term="enum" scheme="http://michael-j.net/tags/enum/"/>
    
      <category term="OO" scheme="http://michael-j.net/tags/OO/"/>
    
      <category term="代码技巧" scheme="http://michael-j.net/tags/%E4%BB%A3%E7%A0%81%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>DDD-复杂问题解决之道</title>
    <link href="http://michael-j.net/2016/09/18/DDD-%E5%A4%8D%E6%9D%82%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/"/>
    <id>http://michael-j.net/2016/09/18/DDD-复杂问题解决之道/</id>
    <published>2016-09-18T14:09:45.000Z</published>
    <updated>2017-06-03T03:42:14.862Z</updated>
    
    <content type="html"><![CDATA[<p>上个星期在团队内部进行了关于DDD的分享，分享链接：<a href="http://slides.com/fengchen/ddd-tackling-complex-problem#/" target="_blank" rel="external">http://slides.com/fengchen/ddd-tackling-complex-problem#/</a>。</p>
<p>分享的过程中发现还是有很多小伙伴对DDD不太了解，或者一知半解。DDD其实不是一个新的技术，实际上距离Eric Evans出版《Domain Driven Design》已经12年了。与其说DDD是一门编程技术，我更愿意将它称之为软件开发方法。我发现国内的技术分享两级分化比较严重，要么太过高大上——关于架构、新技术之类，要么太底层——关于数据库优化、底层性能优化之类，但很少有人来讲中间的那一层——软件编程方法。</p>
<p>在我看来，一个新人要成长为技术大牛，都要经历下面三个阶段：</p>
<h3 id="1-Make-It-Work-（1-2-年）"><a href="#1-Make-It-Work-（1-2-年）" class="headerlink" title="1. Make It Work （1~2 年）"></a>1. Make It Work （1~2 年）</h3><p>刚刚踏入职场的新手程序员往往处于这个阶段，他们首要的工作是要让系统能正常工作。出于工作的需要，他们开始了解语言、框架、数据库、缓存。如果在大公司的话，可能会更早的接触服务框架、中间件等。但是他们的主要工作还是实现业务需求，对代码的质量没有过多的要求。有时候可能感觉到现在的写法可能不太好，但是又不知道怎么去组织代码才能让它们看上去更舒服，经常会刚到迷茫，好像刚工作一年就看到了未来十年的影子，这是十分令人沮丧的。这个阶段一般会持续1~2年。</p>
<h3 id="2-Write-better-code-3-5-年"><a href="#2-Write-better-code-3-5-年" class="headerlink" title="2. Write better code (3~5 年)"></a>2. Write better code (3~5 年)</h3><p>这个阶段是新手程序员向老司机转变的一个时机。他们已经能独立完成常见的业务需求，并给出自己的意见。写出的代码不仅是为了完成功能，更多地是在寻找一种平衡的美。这种美很难言明，它是介于现实逻辑和代码组织的一种完美结合。正好我也处于这个阶段，我会有时因为一次完美的解耦而欣喜，也会因为业务的妥协而忧伤。在这个时期，我在寻找一种“术”，一种能随心所欲驾驭代码的术。我开始了解到OO技术的精妙，开始理解设计模式的妙用，学着掌控整个项目的发展，只为达到软件的最高境界——“可复用”。这个阶段肯能持续时间很长，因为我们要细细去品味优秀代码的味道并为己所用，这需要时间的沉淀。</p>
<h3 id="3-Create-suitable-architect-5年"><a href="#3-Create-suitable-architect-5年" class="headerlink" title="3. Create suitable architect (5年 ~ )"></a>3. Create suitable architect (5年 ~ )</h3><p>当你能随心所欲的操纵代码时，你就会去寻找你还未涉及的阶段。这个阶段可能会产生多种分化，你可能会对项目的整体架构产生兴趣而走上架构师的道路，也可能对某些专有技术情有独钟而成为某一方面的技术专家。不论后面的发展方向如何，此时代码对你已经不是问题了，而成为了你的“工具”。国内的技术分享往往也集中在这个层面。好的架构往往有着相似的部分，但是每个架构又有它独有的业务背景，你需要剥离其中的业务部分，找出能为自己的项目有用的设计。没有完美的架构，只有最合适的架构，任何现实的架构都充满着妥协和折中。这个阶段持续时间可能更长，你也需要机缘能参与几个重大项目的架构设计。</p>
<p>说白了，软件开发还是一门需要经验的行业。我并不太相信天才的存在，因为没有长时间浸泡在代码之中项目之中，你是很难理解代码和业务的关系的，这需要大量的时间。现在“新技术”层出不穷，我的建议是，在没有成为真正的架构师之前，不要盲目的追逐这些“新技术”，这只会耗费你大量的精力。</p>
<p>言归正传，我认为DDD是一门教你Write better code的软件开发方法。就算你是底层的研发人员，我相信你也会从中收益。如果你是一名业务程序员（80%的都是），为什么不多花一些时间去真正理解你的业务呢？不要再去追逐那些“新技术”，多去思考一下我的代码该如何解耦、业务如何切分、代码怎么写才能更好的复用。如果你坚持这么做，我相信不出两年你对技术和业务的理解会发生质变。</p>
<p>学习DDD其实还是有一定的曲线的，如果你的团队中已经有人尝试过DDD了不妨向他取经，因为DDD的精髓更多的在于编程的思想，而不在于具体的代码。后期我会分享一些关于DDD、OO、Microservice方面的心得，如果你有这方面的心得和困惑也可以与我交流，分享是技术人成长的很重要的途径。</p>
<p>近期，我换了工作，加入了网易蜂巢团队。以前上研究生的时候就搞云计算，想不到时隔两年之后，又加入了云计算的浪潮之中，也算是殊途同归。</p>
]]></content>
    
    <summary type="html">
    
      本文分享了我对于DDD的观点和对程序员成长的认识。
    
    </summary>
    
      <category term="DDD" scheme="http://michael-j.net/categories/DDD/"/>
    
    
      <category term="DDD" scheme="http://michael-j.net/tags/DDD/"/>
    
      <category term="感悟" scheme="http://michael-j.net/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper:distributed process coordination中文版</title>
    <link href="http://michael-j.net/2016/08/02/Zookeeper-distributed-process-coordination/"/>
    <id>http://michael-j.net/2016/08/02/Zookeeper-distributed-process-coordination/</id>
    <published>2016-08-02T08:53:05.000Z</published>
    <updated>2016-08-15T15:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用zookeeper比较多，但是国内关于zookeeper方面的数据太少。能介绍其使用同时也讲解原理的书太少了。Zookeeper:distributed process coordination是一本关于zookeeper不可多得的好书。读完以后我对zookeeper有能一个非常直观的了解。</p>
<p>现在分布式应用开发越来越常见，基本上大部分的分布式应用都需要与其它应用进行协同。Zookeeper非常擅长于处理分布式协同。所以我决定利用工作之余的时间翻译这本书籍，完全出于个人兴趣。</p>
<p><img src="/images/zookeeper/zookeeper.jpg" alt="zookeeper:distributed process coordination"></p>
<p><a href="https://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination" target="_blank" rel="external">GitBook阅读地址</a></p>
<p><a href="https://github.com/mymonkey110/zookeeper-book/blob/master/SUMMARY.md" target="_blank" rel="external">GitHub阅读地址</a></p>
<p>由于本人第一次翻译技术书籍，肯定会有很多翻译不当的地方，欢迎大家能及时指正。如果有对本书翻译有兴趣的小伙伴，可以通过以下方式参与贡献：</p>
<p>参与讨论：邮件列表：<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#x7a;&#107;&#95;&#116;&#114;&#x61;&#x6e;&#115;&#108;&#x61;&#x74;&#111;&#x72;&#x40;&#103;&#x72;&#111;&#117;&#x70;&#x73;&#46;&#x31;&#54;&#51;&#46;&#99;&#x6f;&#109;">&#x7a;&#107;&#95;&#116;&#114;&#x61;&#x6e;&#115;&#108;&#x61;&#x74;&#111;&#x72;&#x40;&#103;&#x72;&#111;&#117;&#x70;&#x73;&#46;&#x31;&#54;&#51;&#46;&#99;&#x6f;&#109;</a>，申请加入地址：<a href="http://163.fm/UJNWGHS" target="_blank" rel="external">http://163.fm/UJNWGHS</a></p>
<p>部分贡献：通过issue进行讨论，如果通过，我会进行修改。这种方式我无法统计贡献者的名字，建议使用下面的方式参与翻译。</p>
<p>在 GitHub 上 fork 到自己的仓库，如 user/zookeeper-book，然后 clone 到本地，并设置用户信息。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github<span class="selector-class">.com</span>:user/zookeeper-book<span class="selector-class">.git</span></div><div class="line">$ cd zookeeper-book</div><div class="line">$ git config user<span class="selector-class">.name</span> <span class="string">"yourname"</span></div><div class="line">$ git config user<span class="selector-class">.email</span> <span class="string">"your email"</span></div></pre></td></tr></table></figure>
<p>修改代码后提交，并推送到自己的仓库。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span><span class="comment">#do some change on the content</span></div><div class="line"><span class="variable">$ </span>git commit -am <span class="string">"Fix issue #1: change helo to hello"</span></div><div class="line"><span class="variable">$ </span>git push</div></pre></td></tr></table></figure>
<p>在 GitHub 网站上提交 pull request。<br>定期使用项目仓库内容更新自己仓库内容。</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git remote add upstream https://github.com/mymonkey110/zookeeper-book.git</div><div class="line">$ git fetch upstream</div><div class="line">$ git checkout <span class="keyword">master</span></div><div class="line"><span class="title">$</span> git rebase upstream/<span class="keyword">master</span></div><div class="line"><span class="title">$</span> git push -f origin <span class="literal">master</span></div></pre></td></tr></table></figure>
<p>PS: 2016/8/15 Update:</p>
<p>很遗憾，因为授权的问题，不得不停止翻译的工作。本书已经有中文版的译本了，我后来才得知，所以我也不会取得中文版的翻译授权了。因为本人第一次翻译，事先没有搞清这些事情，才导致了现在的情况。不得不说，十分遗憾，感谢关注本书翻译的伙伴。我相信已有的中文译本应该还不错，如果需要的伙伴可以去购买。So, that’s it, it’s over, thanks for your attention.</p>
]]></content>
    
    <summary type="html">
    
      Zookeeper:distributed process coordination中文译本。
    
    </summary>
    
      <category term="翻译" scheme="http://michael-j.net/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="zookeeper" scheme="http://michael-j.net/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>让百度索引你的github的博客</title>
    <link href="http://michael-j.net/2016/06/23/%E8%AE%A9%E7%99%BE%E5%BA%A6%E7%B4%A2%E5%BC%95%E4%BD%A0%E7%9A%84github%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://michael-j.net/2016/06/23/让百度索引你的github的博客/</id>
    <published>2016-06-23T08:53:05.000Z</published>
    <updated>2016-08-14T12:53:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉中，写博客是一件很潮的事情，尤其是程序员。自然，我也是其中的一员。博客无非两种类型，一种是动态类型的，以Wordpress为代表；另外一种则是存静态的，以Hexo, Jekyll为代表。现在，程序员都喜欢把博客托管在github上。一来省去了买虚拟主机的费用，二来可以通过git工具来管理博客，用起来十分方便。我的博客就是用hexo搭建的。</p>
<p>首先，github是不支持动态博客的，它只能托管存静态的网页，也就是说你只能放置一些html,js,css,jpg,png…之类的静态文件。其次，github屏蔽了百度的爬虫，也就是说百度不能索引你的博客内容。虽说程序员基本上都用google，但是你肯定还是想能被百度搜索到的。想知道自己的博客是否被索引可以这样查询，在搜索引擎中输入：site: 你的博客域名。</p>
<p>解决github屏蔽百度爬虫的思路就是“迁出”我们的博客，让百度爬虫不直接访问github就行了。</p>
<h2 id="方案一：利用CDN制作镜像网站"><a href="#方案一：利用CDN制作镜像网站" class="headerlink" title="方案一：利用CDN制作镜像网站"></a>方案一：利用CDN制作镜像网站</h2><p>我们知道cdn能缓存静态资源，如果我们利用cdn制作我们的镜像网站，再将百度索引的解析cdn上，那么爬虫就不会访问github服务器了，而是访问cdn缓存服务器。国内最火的cdn服务商就是七牛和又拍云了。我发现七牛不支持自动回源功能，而又拍云在这方面做得比较好，我们可以使用又拍云来做为我们博客的镜像网站。</p>
<p>我以本站为例，讲一下配置的流程：</p>
<h4 id="1-创建服务"><a href="#1-创建服务" class="headerlink" title="1. 创建服务"></a>1. 创建服务</h4><p>   <img src="/images/baidu_index/3.pic_hd.jpg" alt="创建服务"></p>
<h4 id="2-配置回源"><a href="#2-配置回源" class="headerlink" title="2. 配置回源"></a>2. 配置回源</h4><p>   <img src="/images/baidu_index/5.pic_hd.jpg" alt="配置回源"></p>
<h4 id="3-绑定域名"><a href="#3-绑定域名" class="headerlink" title="3. 绑定域名"></a>3. 绑定域名</h4><p>完成上面的操作后，又拍云会自动分配一个域名给我。此时，我们就需要绑定自己的域名。添加需要绑定的域名：</p>
<p>   <img src="/images/baidu_index/5.pic.jpg" alt="绑定域名"></p>
<p>如果你希望博客能以www的方式来访问，那你还需要添加www的二级域名</p>
<h4 id="4-配置解析"><a href="#4-配置解析" class="headerlink" title="4. 配置解析"></a>4. 配置解析</h4><p>添加完域名绑定后，此时我们就只需要配置dns解析到又拍云了。我使用的是阿里云的域名系统，下图就是我设置的域名解析配置。</p>
<p>   <img src="/images/baidu_index/6.pic_hd.jpg" alt="配置解析"></p>
<p>因为github在国外访问速度还是很快的，所以对于海外的用户直接访问github就可以了，不用再访问又拍云了。<br>添加解析后一般需要几分钟才生效，看自己添加的域名dns解析生效了没有可以使用nslookup命令：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">~/blog  ᐅ nslookup michael-j<span class="selector-class">.net</span></div><div class="line">Server:		<span class="number">192.168</span>.<span class="number">199.2</span></div><div class="line">Address:	<span class="number">192.168</span>.<span class="number">199.2</span>#<span class="number">53</span></div><div class="line"></div><div class="line">Non-authoritative answer:</div><div class="line">michael-j<span class="selector-class">.net</span>	canonical name = mj-blog<span class="selector-class">.b0</span><span class="selector-class">.aicdn</span><span class="selector-class">.com</span>.</div><div class="line">mj-blog<span class="selector-class">.b0</span><span class="selector-class">.aicdn</span><span class="selector-class">.com</span>	canonical name = ctn<span class="selector-class">.b9</span><span class="selector-class">.aicdn</span><span class="selector-class">.com</span>.</div><div class="line">Name:	ctn<span class="selector-class">.b9</span><span class="selector-class">.aicdn</span><span class="selector-class">.com</span></div><div class="line">Address: <span class="number">183.134</span>.<span class="number">101.194</span></div></pre></td></tr></table></figure>
<p>  此时，我发现michael-j.net的域名已经成功解析到了又拍云。</p>
<ol>
<li>完成</li>
</ol>
<p>完成以上步骤后，你会收到又拍云发给你关于域名绑定通过的邮件。此时你就可以在浏览器中访问你的博客啦！</p>
<p>最关键的问题是，我们要验证百度是否能正常的抓取我们的博客？ 我们使用百度站长的测试工具来测试一下：</p>
<p>  <img src="/images/baidu_index/7.pic_hd.jpg" alt="抓取诊断"></p>
<p>哈哈，现在百度终于可以正常爬去我们的网站啦，接下来就是耐心的等待了，一般最多七天百度就会收录了。</p>
<h2 id="方案二：自己托管博客"><a href="#方案二：自己托管博客" class="headerlink" title="方案二：自己托管博客"></a>方案二：自己托管博客</h2><p>与利用cdn来制作镜像网站的思路一样，我们完全可以把博客托管在自己的服务器上，当然你得掏银子啦！💰 我个人觉得自己买一台属于自己的虚拟主机还是值得投入了，除了博客外你可以利用这台机器做很多事情，最低配的ecs也花不了多少钱，可以几个人合用一台。</p>
<p>Nginx是世界有名的反向代理服务器，同时它对静态文件的支持非常好，性能很高。我们完全可以利用Nginx来作我们博客的服务器。</p>
<h4 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1. 安装Nginx"></a>1. 安装Nginx</h4><p>Ubuntu\Debian：<code>apt-get install nginx</code></p>
<p>Centos\Redhat: <code>yum install nginx</code></p>
<p>其他系统自行google</p>
<h4 id="2-配置Nginx"><a href="#2-配置Nginx" class="headerlink" title="2. 配置Nginx"></a>2. 配置Nginx</h4><p>在/etc/nginx/conf.d新作配置，一定要以<code>.conf</code>结尾。我新建名为<code>michael-j.net.conf</code>的配置文件：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="section">server</span> &#123;</div><div class="line">   	<span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">   	<span class="attribute">server_name</span> michael-j.net;</div><div class="line"></div><div class="line">   	<span class="attribute">location</span> / &#123;</div><div class="line">   	  <span class="attribute">root</span> /home/michael/mymonkey110.github.io;</div><div class="line">   	  <span class="attribute">index</span> index.html;</div><div class="line">   	&#125;</div><div class="line"></div><div class="line">   	<span class="attribute">access_log</span> /var/log/nginx/michael-j.access.log;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意root是我们博客的目录，后面会提到。</p>
<h4 id="3-重启nginx"><a href="#3-重启nginx" class="headerlink" title="3. 重启nginx"></a>3. 重启nginx</h4><p>执行<code>nginx -s reload</code>生效</p>
<h4 id="4-自动下载博客内容"><a href="#4-自动下载博客内容" class="headerlink" title="4. 自动下载博客内容"></a>4. 自动下载博客内容</h4><p>我希望每次博客仓库有更新的时候能自动重建本地仓库，为此我专门写了一个工具git-watcher: <a href="https://github.com/mymonkey110/git-watcher" target="_blank" rel="external">https://github.com/mymonkey110/git-watcher</a>。当有新的内容push到你的仓库是，它会自动拉去并重建本地仓库。基本原理就是利用github的webhook功能，当有新的push事件发生时，github会发布相应的事件到指定的接口。git-watcher监听push事件，当接受到push事件去pull仓库。如果你觉得这个工具有点儿意思，Please star it.</p>
<h5 id="4-1-安装git-watcher-amp-git"><a href="#4-1-安装git-watcher-amp-git" class="headerlink" title="4.1 安装git-watcher &amp; git"></a>4.1 安装git-watcher &amp; git</h5><p><code>pip install git-watcher</code></p>
<p><code>apt-get install git</code></p>
<h5 id="4-2-启动git-watcher"><a href="#4-2-启动git-watcher" class="headerlink" title="4.2 启动git-watcher"></a>4.2 启动git-watcher</h5><p><code>git-watcher -u https://github.com/mymonkey110/mymonkey110.github.io.git -s 654321</code></p>
<p><code>-u</code>参数配置我们的博客仓库地址</p>
<p><code>-s</code>参数是我们webhook的secret key</p>
<p>git-watcher还支持其他一些参数配置，-h见说明</p>
<h5 id="4-3-配置dns解析"><a href="#4-3-配置dns解析" class="headerlink" title="4.3 配置dns解析"></a>4.3 配置dns解析</h5><p>将默认的dns解析到我们自己的主机上</p>
<p><img src="/images/baidu_index/10.pic_hd.jpg" alt="配置解析"></p>
<h5 id="4-4-配置webhook"><a href="#4-4-配置webhook" class="headerlink" title="4.4 配置webhook"></a>4.4 配置webhook</h5><p>进入仓库的<code>settings</code> －&gt; <code>Webhooks &amp; services</code></p>
<p>设置：<code>Payload URL</code>，这里输入我们主机的地址，这里只能用ip地址。同时，还要设置Secret，这个是用来签名body内容用的，一定要与git-watcher中配置一致</p>
<p><img src="/images/baidu_index/13.pic.jpg" alt="配置Webhook"></p>
<p>注意，我们只选择发送<code>push</code>事件就可以了。</p>
<h5 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5 测试"></a>4.5 测试</h5><p>我们进行一些修改，然后push到博客的仓库，检测一下网站内容是否更新。如果正常更新，那说明已经大功告成了。这是可以再用百度的抓取工具进行诊断。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解决百度抓取github内容的问题基本思路都是让百度不直接访问Github，而是通过一个中间服务器来缓存内容。两种方式都需要付费，相对来说使用又拍云搭建镜像服务器在流量较小的情况下比较有优势，速度快，费用少；而自己租用主机在博客流量较大的时候比较经济，你可以选择按带宽计费的方式，同时你还获得了一台完全由你控制的主机，何乐而不为呢？！</p>
]]></content>
    
    <summary type="html">
    
      Github屏蔽了百度的爬虫，导致众多托管在github上的博客无法进入百度的索引，损失了很多阅读量。本文分享一下解决这个问题的个人心得。
    
    </summary>
    
      <category term="生活" scheme="http://michael-j.net/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life blog" scheme="http://michael-j.net/tags/life-blog/"/>
    
  </entry>
  
  <entry>
    <title>博客域名更新：michael-j.net</title>
    <link href="http://michael-j.net/2016/06/17/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%96%B0/"/>
    <id>http://michael-j.net/2016/06/17/博客域名更新/</id>
    <published>2016-06-17T07:20:31.000Z</published>
    <updated>2016-08-20T10:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于备案原因😢，弃用老的域名michael-j.xyz,正式修改为：</p>
<p><strong><em><a href="http://michael-j.net">http://michael-j.net</a></em></strong></p>
<p>本博客主要纪录本人对技术、管理、生活的一些感悟。技术人一定要有沉淀，写博客是一个非常好的方式，我也经常鼓励团队中其他人写博客，记录自己的成长。</p>
<p>喜欢本站内容的同学可以加入收藏哦，也支持rss订阅！😊</p>
]]></content>
    
    <summary type="html">
    
      博客域名正式更新为：michael-j.net
    
    </summary>
    
      <category term="生活" scheme="http://michael-j.net/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="http://michael-j.net/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Java异常的选择：Checked Exception还是Unchecked Exception ?</title>
    <link href="http://michael-j.net/2016/06/07/Java%E5%BC%82%E5%B8%B8%E7%9A%84%E9%80%89%E6%8B%A9/"/>
    <id>http://michael-j.net/2016/06/07/Java异常的选择/</id>
    <published>2016-06-07T07:20:31.000Z</published>
    <updated>2016-08-20T10:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>曾经听到过关于老司机和新手程序员的区别，其中最大的一个区别就在于异常的处理。新手程序员总是天真得把世界想得太美好，基本上没想过会出现异常的情况，而一个经验丰富的老司机会把最坏的打算考虑进去，给出相应的解决办法，使得发生异常时对系统的影响降低到最小。对此，我深表认同。现实的情况总是复杂的，而且还有很多不怀好意的人时刻准备攻击你的系统。使用你系统的用户越多，这种潜在的风险也就越大。</p>
<p>异常处理是应对这些风险的最强有力的武器。在Java的世界里，异常有两种：受检异常(checked exception)和非受检异常（unchecked exception）。想必所有的Javaer都使用过这两种异常，但是何时使用哪个异常缺失经常困扰程序员的头疼问题。在此，我分享一下自己的看法，如果你有不同的意见，请留意探讨。</p>
<h4 id="1-如果正常情况下会出现，那么使用Checked-Exception；反之，则使用Unchecked-Exception"><a href="#1-如果正常情况下会出现，那么使用Checked-Exception；反之，则使用Unchecked-Exception" class="headerlink" title="1.如果正常情况下会出现，那么使用Checked Exception；反之，则使用Unchecked Exception"></a>1.如果正常情况下会出现，那么使用Checked Exception；反之，则使用Unchecked Exception</h4><p>这条准则是我在决定使用Checked Exception还是Unchecked Exception的第一原则。如果API的使用者在正常使用的过程中都会出现异常，那么这种异常就属于Checked Exception。因为这种异常时属于程序执行流程众多分支之一，API的使用者必须意识到这种情况，并做出相应的处理。</p>
<p>举个栗子：</p>
<p>我希望向zookeeper中创建一个节点，那么这种情况就隐含了两个前提条件：</p>
<ul>
<li>父节点已经被创建（如果有的话）</li>
<li>本节点还未被创建</li>
</ul>
<p>那么，这个API的签名大致应该是这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createNode</span><span class="params">(String path,<span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> FatherNodeNotExist, NodeExist</span>;</div></pre></td></tr></table></figure>
<p>API的使用者看到这个签名的定义时就会得到一个强烈的心理暗示，我需要考虑父节点不存在和本节点已存在的情况，那么他就不得不显示的去处理这两种异常。</p>
<p>有的朋友可能会争论说，我正常的情况下不会出现这种情况，因为使用这个API的前提就是先创建好父节点，而后创建本节点，那我就不用抛出两种异常了，使用者也轻松了许多。但事实真的如此吗？我们想当然的认为了使用者是<code>自己人</code>，他们会乖乖的按照我们的想法去先创建父节点，再创建本节点，如果是在一个很局限的使用场景下，每个人都说经过严格培训的，那么你可以去做这样的假设，但是我还是不推荐你这么做，因为这样设计使得系统是脆弱的，不稳定的。如果能通过系统能自己避免这些错误，为什么不呢？况且，如果你把这个API开放给第三方的使用者，那么情况会更糟糕，你根本不知道他们会怎样去使用API，这非常恐怖！</p>
<p>有时候情况会变得很复杂，<code>正常情况</code>的鉴定变得很困难，你肯定会遇到这种时候，此时就需要结合你的业务场景去权衡其中的利弊。这依赖与你的经验和对业务场景的理解，我无法给你一个绝对的建议，那样是不负责任的。</p>
<p>我再举个常见的栗子：用户修改他拥有的资源信息。在菜谱APP中给出一个接口，让用户修改他菜谱的信息。那么这里一个隐含的条件就是用户修改他自己的菜谱信息，他是无权限修改别人的菜谱信息的。那么这个API的签名可能是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMenu</span><span class="params">(<span class="keyword">long</span> menuId,<span class="keyword">long</span> uid,String title,String description...)</span></span>;</div></pre></td></tr></table></figure>
<p>如果用户尝试去修改不属于他的菜谱呢？我们是否需要throws UserPermissionException之类受检异常？我认为是不需要的。判断是这属于正常情况吗？我认为这不算是正常情况。<br>正常情况下，客户端调用修改信息的接口，那么menuId一定是属于这个用户的。如果出现这种情况，要么是你系统设计的就有问题，要么就是不怀好意的人在破坏你的系统。前者需要重新设计我们的系统，而后者我们更不用关系，直接抛出一个RuntimeException就可以，因为他不算正常用户。</p>
<h4 id="2-调用者中能从异常中恢复的，推荐使用受检异常；反之，则使用非受检异常"><a href="#2-调用者中能从异常中恢复的，推荐使用受检异常；反之，则使用非受检异常" class="headerlink" title="2. 调用者中能从异常中恢复的，推荐使用受检异常；反之，则使用非受检异常"></a>2. 调用者中能从异常中恢复的，推荐使用受检异常；反之，则使用非受检异常</h4><p>注意这里的一个关键词是<code>推荐</code>，决定使用哪种异常最为根本的还是第一条原则。如果第一条原则难以判断时，才考虑调用者。这条原则和<code>Effective Java</code>中的第58条很像，如果有这本书的朋友可以再拿出来读读。</p>
<p>我和<code>Effective Java</code>#58不同的观点在于，这条原则只能是<code>推荐</code>，另外，对于所有不能恢复的情况我都建议使用非受检异常。我对可恢复的理解是，如果API的调用者能够处理你抛出的异常，并给出积极的响应和反馈，并指导它的使用者做出调整，那么这就是可恢复的。不可恢复就是API的调用者无法处理你抛出的异常，或者仅仅只是打个LOG记录一下，不能对它的使用者做出提示，那么都可认为是不可恢复的。</p>
<p>还是最开始的栗子，如果调用<code>createNode</code>的调用者能响应<code>FatherNodeNotExist</code>，并把这种情况反应到终端上，那么使用受检异常是有积极意义的。对于不可恢复的情况，包括编程错误，我建议都是用非受检异常，这样系统能<code>fail fast</code>，把异常对系统的影响降到最低，同时你还能获得一个完整的异常堆栈信息，何乐而不为呢？！</p>
<p>基本上，这两条原则就能帮你决定到底是使用受检异常还是非受检异常了。当然，现实的情况很复杂，需要根据你所处的具体业务场景来判断，经验也是不可或缺的。在设计API的时候多问下自己这是正常情况下出现的吗，调用者可以处理这个异常吗，这会很有帮助的！</p>
<p>异常处理是一个非常大的话题，除了选择<code>checked exception</code>还是<code>unchecked exception</code>以外，还有一些一般的通用原装，例如：</p>
<ul>
<li>只抛出与自己有关的异常</li>
<li>封装底层异常</li>
<li>尽量在抛出异常的同时多携带上下文信息</li>
</ul>
<p>这些在<code>Effective Java</code>中都有详细的介绍，朋友可以认真读一下这本书，写的非常好！</p>
<p>对异常处理有不同理解的朋友可以给我留言，一起讨论，共同进步！</p>
<p>参考文献：</p>
<p><a href="https://github.com/HackathonHackers/programming-ebooks/blob/master/Java/Effective%20Java%20\(2nd%20Edition\" target="_blank" rel="external">Effective Java, 2nd Edition</a>.pdf)</p>
]]></content>
    
    <summary type="html">
    
      java程序中经常会遇到异常的处理，何时选用Checked Exception和Unchecked Exception经常会让程序员苦恼，本文分享一下我在这方面的心得。
    
    </summary>
    
      <category term="Java" scheme="http://michael-j.net/categories/Java/"/>
    
    
      <category term="Java" scheme="http://michael-j.net/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>防范xss的正确姿势</title>
    <link href="http://michael-j.net/2016/04/12/%E9%98%B2%E8%8C%83xss%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
    <id>http://michael-j.net/2016/04/12/防范xss的正确姿势/</id>
    <published>2016-04-12T07:20:31.000Z</published>
    <updated>2017-06-03T03:40:48.694Z</updated>
    
    <content type="html"><![CDATA[<p>xss攻击是web攻击中非常常见的一种攻击手段。如果你还没有听说过xss攻击，可以先了解xss的相关知识和原理，例如:<a href="https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)" target="_blank" rel="external">https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)</a>。</p>
<p>防范xss攻击的方式也十分简单：转义！</p>
<p>但是转义的时机？是在持久化之前转义呢，还是读数据之后escape呢？</p>
<p>我开始想也没想就选择了第一种方式，因为这种方法看上去一劳永逸，但是我现在越来越倾向于第二种方式。</p>
<p>实际上选择第一种还是第二种需要根据你的实际情况来定。我们知道xss攻击是一种web攻击手段，它的运行环境是在用户的浏览器中，也就是说用户的运行环境是不可控的。那么在持久化之前进行转义看上去似乎不错，因为我们可以利用filter或者interceptor拦截所有的写入请求，统一进行转义。这样一来，我们的业务逻辑就完全不需要care转义的问题了，因为我们取到的数据已经都是转义的过的了。</p>
<p>如果用户的终端是可控的，比如：Native App，那么入库之前进行转义就显得多此一举，因为所有的输出方式都是在我们的App中展现的，自然也就不会出现了xss攻击的问题了。例如用户在评论中输入了<code>&lt;哈哈&gt;</code>，你觉得用户希望输出<code>&amp;lt;哈哈&amp;gt</code>;，还是<code>&lt;哈哈&gt;</code>呢？ 结果是显而易见的。</p>
<p>现实的情况往往是复杂的，不会只有黑和白、0与1、native和web，更多的是它们交织在一起，互相入侵对方的领域。基本上现在大部分的App都有分享功能，那么恶意的用户完全可以在评论中插入注入代码，再将该评论分享出去，那么其它被分享的用户就有被攻击的风险。解决的方法就是针对分享的数据进行全局转义，事实上已经很多模版系统已经帮我们考虑了这部分问题，例如Django和Jinja2的模版就是默认开启自动转义的。如果是前后端分离的场景，也可以有前端来进行escape。</p>
<p>我推荐使用“入库不转义读转义”还有一个原因，那就是前期转义格式的不确定性和后期输出的多样性。如果你正在正在开发一个rest服务器，你与App使用json格式通信。为了简单，在开始业务代码前，你对所有输入数据按照html格式进行转义。那么你可以十分放心分享出去的数据是安全的，因为所有的数据在持久化之前就已经转义了，同时你会痛苦unescape给App的数据。如果那天老板要求你以xml的格式输出这些数据（可能是其它系统的输入要求，也可能是打印报表），那么你会更加痛苦。因为xml和html的转义字符还是有些不同的，你不得不先unescape回原始数据然后再按照xml的格式escape一次。如果这样你觉得都还ok，那么我开始有点佩服你了。如果老板还要求你有更多的输出格式，那么你会更加痛苦，这还是在没有考虑输入格式变化的情况下。因为一个转义的问题导致逻辑变得复杂，影响系统的稳定性是得不偿失的。</p>
<p>最后，我总结一下这两种方式的优缺点：</p>
<table>
<thead>
<tr>
<th>转义方式</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td>入库前转义</td>
<td>一劳永逸</td>
<td>需要针对多端进行不同的输出，灵活性不足，无法应对后期数据格式的变化</td>
</tr>
<tr>
<td>读取前转义</td>
<td>简单，灵活，能应对各种数据格式的场景</td>
<td>需要对每个输出数据转义，人工处理容易遗漏</td>
</tr>
</tbody>
</table>
<p>本人推荐第二种方式来防范xss攻击。虽然需要对每个输出数据都进行转义，但是如果你使用带自动转义的模版或者框架来处理的话，那么就可以极大的提高效率，又可以规避安全的问题。最后还是要提醒大家，安全无小事，即使你觉得没有人会攻击的系统，还是要规避这些风险，安全是系统的基石。</p>
<p>参考文献：</p>
<p><a href="https://n0tw0rthy.wordpress.com/2011/10/07/when-do-you-escape-your-data/" target="_blank" rel="external">Why escape-on-input is a bad idea</a></p>
<p><a href="https://n0tw0rthy.wordpress.com/2011/10/07/when-do-you-escape-your-data/" target="_blank" rel="external">When do you escape your data?</a></p>
]]></content>
    
    <summary type="html">
    
      最近对xss攻击的的防范又有了新的理解，特此分享一下心得。
    
    </summary>
    
      <category term="安全" scheme="http://michael-j.net/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="security" scheme="http://michael-j.net/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Mac下拳皇97黑屏问题的解决方法</title>
    <link href="http://michael-j.net/2016/03/18/Mac%E4%B8%8B%E6%8B%B3%E7%9A%8797%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://michael-j.net/2016/03/18/Mac下拳皇97黑屏问题的解决方法/</id>
    <published>2016-03-17T16:00:00.000Z</published>
    <updated>2016-08-12T02:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Mac系统很久了，渐渐的已经依赖上了这个系统。虽然Mac OS能让我们更加关注于工作，但是偶尔我们还是希望能小小的娱乐一把。我就比较喜欢玩一些小游戏，比如<code>拳皇97</code>。</p>
<p><code>拳皇街机</code>系列满载的我们80后慢慢的回忆啊！想玩97的朋友可以去：<a href="http://www.pc6.com/mac/112306.html" target="_blank" rel="external">http://www.pc6.com/mac/112306.html</a>下载。</p>
<p>按照提示方法，我发现运行一直是黑屏状态，十分蛋疼。Google了一番后最终找到了解决方法：</p>
<p>打开<code>MAM</code>E的<code>Preferenc</code>e -&gt; 切换到<code>Video</code> -&gt; <code>Rendering Option</code>中的<code>Render frames using</code>切换到 <code>OpenGL</code>模式</p>
<p>重新载入游戏就大功告成啦！！！ 祝大家游戏愉快～</p>
<p>还搞不定可以参考下面这篇帖子👇：</p>
<p><a href="https://www.reddit.com/r/mac/comments/3nr2gr/mame_135_on_el_capitan_loads_black_screen_when/" target="_blank" rel="external">https://www.reddit.com/r/mac/comments/3nr2gr/mame_135_on_el_capitan_loads_black_screen_when/</a></p>
]]></content>
    
    <summary type="html">
    
      教你如何解决mac下玩拳皇97时的黑屏问题
    
    </summary>
    
      <category term="生活" scheme="http://michael-j.net/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="http://michael-j.net/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>实现领域事件</title>
    <link href="http://michael-j.net/2016/01/19/%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/"/>
    <id>http://michael-j.net/2016/01/19/实现领域事件/</id>
    <published>2016-01-19T08:53:05.000Z</published>
    <updated>2017-06-03T03:36:02.863Z</updated>
    
    <content type="html"><![CDATA[<p>当你的系统或者业务变得日益复杂时，<code>DDD</code>的模式是一种非常值得尝试的架构模式。<code>DDD</code>让你更加关注于你的业务领域，思考你的业务模型，帮组你理清繁杂的业务关系。我推荐所有还没有了解过或者接触过<code>DDD</code>的后端工程师都去学习一下该架构模式。本文主要关注<code>DDD</code>中的<code>领域事件</code>，以及一种可能的实践方式。</p>
<a id="more"></a>
<p>我们知道领域模型的变化会产生领域事件。例如，用户在完成注册后，系统会发出一封带有确认信息的邮件到用户的邮箱；用户关注的好友发送动态后他会收到相应的通知等等。在业务比较简单或者不用考虑性能的情况下，我们可以直接把对领域事件的处理嵌入到领域服务中。考虑这样一个场景：用户回复了某条评论，那么被回复的那个用户（也就是那条评论的所有者）需要收到一个PUSH消息。这个场景比较简单，我们可能直接写出类似下面的代码：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">  void  reply(long <span class="keyword">from</span>UserId,long <span class="keyword">to</span>UserId,String content) &#123;</div><div class="line">   	saveReply(<span class="keyword">from</span>UserId,<span class="keyword">to</span>UserId,content);</div><div class="line">	sendPush(<span class="keyword">to</span>UserId,content); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样一来，我们就直接把发送PUSH的动作嵌入到了回复的逻辑中。这样做有以下两个问题：</p>
<ul>
<li>回复动作处理了它不关心的逻辑。发送PUSH不是回复的强关联逻辑，也就是说即使push发送不成功也应该让回复动作成功。上面的代码将回复和发送PUSH耦合在了一起。</li>
<li>如果出现了多个对回复动作感兴趣的业务方，那么上面的代码将不可维护。比如，我们有一个回复的计数器，它要统计回复的总量。如果把增加计数器的动作写在回复中，那么将不可维护，因为每次出现新的业务方都要修改回复逻辑。这显然返回了<code>开闭原则</code>。</li>
</ul>
<p>解决上诉问题的方法很简单，就是使用<code>领域事件</code>。<code>领域事件</code>很好理解，说白了就是与领域相关的事件。事件的产生往往伴随着相应的动作，例如上面所提到的回复动作。有了领域事件，每个领域本身就只需要关系其自己的业务逻辑，并在处理完自身逻辑的同时抛出相应的领域事件。对这些领域事件感兴趣的业务方可以<code>订阅</code>该事件，然后进行后续的处理。这与<code>观察者</code>模式和<code>发布订阅</code>模式是十分相像的。我更倾向于<code>发布订阅</code>这个词，它更好的表达了发布者和订阅者的一种解耦。</p>
<p><code>发布订阅</code>模式有很多种的实现，有很多开源框架和类库也实现了这种模式。例如<code>Spring</code>中的事件，<code>Guava</code>中的<code>EventBus</code>都是很好的实践。直接采用这些工具会有两个问题：</p>
<ul>
<li>无法灵活的处理同步事件和异步事件。<code>Spring</code>框架自带的事件机制是同步的，那么领域事件的发布者的执行流程就和订阅者的处理流程在一个调用堆栈中了，在某些情况下这事不可接收的。<code>EventBus</code>是支持同步和异步两种模式的，但是它要求在初始化时就指定好事件是<code>同步</code>的还是<code>异步</code>的，这对于使用方不够灵活。</li>
<li>订阅方无法控制事件的订阅与取消。出于解耦和灵活性的考虑，我们往往把事件注册的动作放倒订阅方。<code>Spring</code>框架让这种订阅关系变得模糊，因为事件的注册是通过事件<code>ApplicationListener</code>接口完成的，那么订阅方就无法获得事件发布者的引用，进而无法取消事件的订阅。当然，取消事件订阅的情景并不常见，所以这种情况在大部分场景下也是可以接受的。</li>
</ul>
<p>无论是出于对事件发送同步异步的控制，还是处于订阅方更高的灵活性要求，自己在这些框架和工具上再进行封装都还是要必要的。下面我给出我的一种实践方案。</p>
<p>我推荐在<code>guava</code>的<code>EventBus</code>上面进行封装，因为它已经实现了同步和异步的模式，并且使用注解的订阅方式对程序员也十分友好。</p>
<p>首先，我们需要定义一个<code>领域事件</code>的抽象基类。</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/domain_event.jpg?imageView/2/w/480/h/640|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="DomainEvent"></p>
<p>这个抽血基类中定义了发生时间和identify的一个抽象方法，该方法用来标示事件。下面我们就可以定义领域事件的发布器了，如下图所示。</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/event_publisher.jpg?imageView/2/w/480/h/640|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="EventPublisher"></p>
<p>我先定义了领域发布器的一个通用接口，主要包括四个方法：</p>
<ul>
<li>identify() 发布器标示，用来区分不同的发布器。</li>
<li>register(Object) 注册接口，订阅方调用该接口来订阅事件。</li>
<li>publish(T event) 同步发布事件接口</li>
<li>asyncPublish(T event) 异步发布事件接口</li>
</ul>
<p>同时，我给出了一个基于<code>Guava</code>的实现，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Guava事件发布器实现</div><div class="line"> * Created by Michael Jiang on 16/1/12.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaDomainEventPublisher</span> <span class="keyword">implements</span> <span class="title">DomainEventPublisher</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> EventBus syncBus = <span class="keyword">new</span> EventBus(identify());</div><div class="line">    <span class="keyword">private</span> EventBus asyncBus = <span class="keyword">new</span> AsyncEventBus(identify(), Executors.newFixedThreadPool(<span class="number">1</span>));</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object listener)</span> </span>&#123;</div><div class="line">        syncBus.register(listener);</div><div class="line">        asyncBus.register(listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(DomainEvent event)</span> </span>&#123;</div><div class="line">        syncBus.post(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncPublish</span><span class="params">(DomainEvent event)</span> </span>&#123;</div><div class="line">        asyncBus.post(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我在实现中初始化了两个eventBus，一个是同步的<code>syncBus</code>，用于发布同步事件；另外一个是异步的<code>asyncBus</code>，用于发布异步事件。其中我将异步线程池硬编码为1个线程，基本满足大部分情况，也可酌情修改或者开放这个参数，有各个领域事件的发布器来实现。</p>
<p>具体的领域事件发布器直接继承<code>GuavaDomainEventPublisher</code>，并覆盖identify()方法后就可以使用了。</p>
<p>这里我并没有专门去设计订阅方，因为<code>Guava</code>提供的注解方式已经十分方便了。我设计了一个简单的demo放倒了github上面，有兴趣的朋友可以直接查看源代码。如果你有更好的设计方法或者思路，可以直接留言进行讨论。</p>
<p>Demo地址：<a href="https://github.com/mymonkey110/event-light" target="_blank" rel="external">https://github.com/mymonkey110/event-light</a></p>
]]></content>
    
    <summary type="html">
    
      最近在实践DDD的过程中对领域事件颇有感触，分享一下我的心得和实践方法。
    
    </summary>
    
      <category term="DDD" scheme="http://michael-j.net/categories/DDD/"/>
    
    
      <category term="领域事件" scheme="http://michael-j.net/tags/%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="event" scheme="http://michael-j.net/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>评论设计</title>
    <link href="http://michael-j.net/2016/01/05/%E8%AF%84%E8%AE%BA%E8%AE%BE%E8%AE%A1/"/>
    <id>http://michael-j.net/2016/01/05/评论设计/</id>
    <published>2016-01-05T09:52:07.000Z</published>
    <updated>2017-06-03T03:41:44.236Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要分享了我在设计评论模块中的一些心得，希望对读者有些许帮助。</p>
</blockquote>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>现阶段评论做的最好的我想应该是<code>网易新闻</code>（app）里面的评论模块了，其“盖楼”的方式让人印象深刻，评论已经成为该app的核心功能之一了。市面上大部分app的评论模块设计的还是相对简单的，这是可以理解的，因为评论模块不是这些app的核心功能之一。</p>
<p>在设计评论模块前可以和pd或者boss沟通，我们的评论功能是核心功能之一吗？实际上，90%的app采用简单的评论设计就可以了，也就是采用<code>一问一答</code>，类似于如下的设计。</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/2.pic.jpg?imageView/2/w/480/h/640|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="一问一答"></p>
<p>这种设计十分简单、直接，也满足了用户评论、回复的基本要求，对于没有大量用户评论或者评论不是核心功能的app来说就够用了。暂且把这种场景称之为<code>场景A</code>。</p>
<p>如果你是新闻类或者咨询类的app，有着大量的用户评论，那么设计“盖楼”的效果还是可取的，这样能帮助用户找到该条评论或者回复的上下文情景。但是根据“盖楼”的显示效果不同，设计上也是有很大的差别的。如果是以<code>评论为主</code>的显示方式，类似于下面的显示方式。</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/3.pic.jpg?imageView/2/w/500/h/800|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="评论为主"></p>
<p>这里可以把评论分为<code>评论</code>和<code>回复</code>，所有的<code>回复</code>均挂在<code>评论</code>下面，类似于树状结构。把这种场景称之为<code>场景B</code></p>
<p>最后就是类似于网易新闻的评论设计了，贴一张截图</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/5.pic.jpg?imageView/2/w/400/h/600|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="同级显示"></p>
<p>这种场景下设计最为复杂，因为回复和评论是同等级的，回复还可以引用完整的回复路径，就是可以溯源到最开始的评论上。这种场景我将至称为<code>场景C</code>。</p>
<h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>由于我 一直使用<code>mysql</code>，我就以<code>mysql</code>为例谈一下针对上面三种场景的设计。</p>
<h4 id="场景A"><a href="#场景A" class="headerlink" title="场景A"></a>场景A</h4><p>这种场景下一般评论数量较少，评论不为活跃，可以把不区分评论和回复，而统一看成评论。区别在于有的评论是直接评论<code>主题</code>(每个评论都挂在某个主题下，如文章、帖子等)，而有些评论是<code>@</code>其他用户的，为了能cover这两张场景，使用一张表就可以达到效果，评论表如下设计：</p>
<table>
<thead>
<tr>
<th>表字段</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键</td>
</tr>
<tr>
<td>topic_id</td>
<td>主题ID</td>
</tr>
<tr>
<td>topic_type</td>
<td>主题type</td>
</tr>
<tr>
<td>content</td>
<td>评论内容</td>
</tr>
<tr>
<td>from_uid</td>
<td>评论用户id</td>
</tr>
<tr>
<td>to_uid</td>
<td>评论目标用户id</td>
</tr>
</tbody>
</table>
<p>为了能复用评论模块，我们引入一个<code>topic_type</code>字段来区分主题的类别。</p>
<p><code>from_uid</code>表示评论人的id，通过该id我们可以检索到评论人的相关信息。</p>
<p><code>to_uid</code> 是评论目标人的id，如果没有目标人，则该字段为空。</p>
<p>出于性能的考虑，往往我们会冗余评人的相关信息到评论表中，比如评论人的nick、头像等，目标用户也是如此。这样一来我们就只用查询单表就可以达到显示的效果。</p>
<p>有时，目标用户有多个，那么可以将<code>to_uid</code>字段修改为<code>to_uids</code>，保存时用分隔符来分割用户id，而目标用户的信息再去查询缓存或者数据库。也可以简单的将多个目标用户的信息一起存成json格式，可以应付简单的展现需求。</p>
<h4 id="场景B"><a href="#场景B" class="headerlink" title="场景B"></a>场景B</h4><p>在以评论为主的树形显示的情况下，数据库的设计十分灵活，可以使用单表，添加一个<code>parent_id</code>字段来指向父评论。如果数据库本身支持嵌套查询，那么还是比较方便的，SqlServer、Oracle都支持，但是mysql不支持，那就只能通过存储过程来实现。在互联网应用中，能不使用<code>触发器</code> ｀存储过程`的话，尽量不要去使用，因为其对性能有影响。</p>
<p>我们还可以将评论拆分为<code>评论表</code> 和 <code>回复表</code>，<code>评论</code>挂在各种<code>主题</code>下面，而<code>回复</code>都挂在<code>评论</code>下面。</p>
<p><code>评论表</code>的设计如下：</p>
<table>
<thead>
<tr>
<th>表字段</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键</td>
</tr>
<tr>
<td>topic_id</td>
<td>主题ID</td>
</tr>
<tr>
<td>topic_type</td>
<td>主题type</td>
</tr>
<tr>
<td>content</td>
<td>评论内容</td>
</tr>
<tr>
<td>from_uid</td>
<td>评论用户id</td>
</tr>
</tbody>
</table>
<p><code>回复表</code>的设计如下：</p>
<table>
<thead>
<tr>
<th>表字段</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键</td>
</tr>
<tr>
<td>comment_id</td>
<td>评论ID</td>
</tr>
<tr>
<td>reply_id</td>
<td>回复目标id</td>
</tr>
<tr>
<td>reply_type</td>
<td>回复类型</td>
</tr>
<tr>
<td>content</td>
<td>回复内容</td>
</tr>
<tr>
<td>from_uid</td>
<td>回复用户id</td>
</tr>
<tr>
<td>to_uid</td>
<td>目标用户id</td>
</tr>
</tbody>
</table>
<p>由于我们拆分了评论和回复，那么评论表就不再需要目标用户字段了，因为评论均是用户对主题的评论，评论表的设计更佳简洁了。</p>
<p>回复表我添加了一个<code>comment_id</code>字段来表示该回复挂在的根评论id，这样设计也是出于性能方面的考虑，我们可以直接通过评论id一次性的捞出该评论下的所有回复，然后通过程序来编排回复的显示结构。通过适当的冗余来提高性能也是常用的优化手段之一。这里给出一段我通过来评论id来查找并组织所有回复的代码：</p>
<figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">List</span>&lt;ReplyDTO&gt; getReplyListByRid(<span class="keyword">Long</span> rid) &#123;</div><div class="line"><span class="keyword">List</span>&lt;ReplyDO&gt; replyDOList = replyDAO.queryReplyByCid(rid);</div><div class="line">        <span class="keyword">if</span> (replyDOList == <span class="keyword">null</span> || replyDOList.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">List</span>&lt;ReplyDTO&gt; replyDTOList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">List</span>&lt;ReplyDTO&gt; parentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (ReplyDO replyDO : replyDOList) &#123;</div><div class="line">            ReplyDTO replyDTO = convertReplyToDTO(replyDO);</div><div class="line">            <span class="keyword">if</span> (replyDTO.getReplyType() == ReplyType.COMMENT) &#123;</div><div class="line">                replyDTOList.add(replyDTO);</div><div class="line">                parentList.add(replyDTO);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">boolean</span> foundParent = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">if</span> (replyDTOList.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">for</span> (ReplyDTO <span class="keyword">parent</span> : parentList) &#123;</div><div class="line">                        <span class="keyword">if</span> (<span class="keyword">parent</span>.getId().equals(replyDTO.getReplyId())) &#123;</div><div class="line">                            <span class="keyword">if</span> (<span class="keyword">parent</span>.getNext() == <span class="keyword">null</span>) &#123;</div><div class="line">                                <span class="keyword">parent</span>.setNext(<span class="keyword">new</span> ArrayList&lt;ReplyDTO&gt;());</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">parent</span>.getNext().add(replyDTO);</div><div class="line">                            parentList.add(replyDTO);</div><div class="line">                            foundParent = <span class="keyword">true</span>;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!foundParent) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"sort reply error,should not go here."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> replyDTOList;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>reply_type</code>表示回复的类型，因为回复可以是针对评论的回复(comment)，也可以是针对回复的回复(reply)， 通过这个字段来区分两种情景。</p>
<p><code>reply_id</code>表示回复目标的id，如果reply_type是comment的话，那么reply_id＝commit_id，如果reply_type是reply的话，这表示这条回复的父回复。</p>
<p>在数据结构的设计上，我在replyDTO中设计了一个<code>List&lt;ReplyDTO&gt; next</code>属性，这样在形成了一个树形的结构，类似如下结构。</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/6.pic.jpg?imageView/2/w/300/h/600|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="树形结构"></p>
<p>客户端可以直接根据该结构来进行树形结构的显示。</p>
<h4 id="场景c"><a href="#场景c" class="headerlink" title="场景c"></a>场景c</h4><p>要达到网易新闻中评论的效果我还没有特别好的建议。这种场景中评论和回复是同级显示的，回复不在显示结构上不用挂在一个评论下面。双表的设计在这里就不太合适了，因为涉及到评论和回复的混排，使用双表则会导致查询的逻辑过于复杂。所以建议还是采用单表的设计，不区分评论和回复会简化应用层的逻辑。我们统一都看成评论，而有些评论是可以引用其他评论的。本人推荐采用闭包表的设计，例如：</p>
<p>comment表设计</p>
<table>
<thead>
<tr>
<th>表字段</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键</td>
</tr>
<tr>
<td>topic_id</td>
<td>主题ID</td>
</tr>
<tr>
<td>topic_type</td>
<td>主题type</td>
</tr>
<tr>
<td>content</td>
<td>评论内容</td>
</tr>
<tr>
<td>from_uid</td>
<td>评论用户id</td>
</tr>
</tbody>
</table>
<p>parent_children表</p>
<table>
<thead>
<tr>
<th>表字段</th>
<th>字段说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>主键</td>
</tr>
<tr>
<td>parent_id</td>
<td>父id</td>
</tr>
<tr>
<td>child_id</td>
<td>子id</td>
</tr>
</tbody>
</table>
<p>comment表保存所有评论内容，而parent_children表则记录评论表中各个评论的父子关系。</p>
<p>查询时往往会按照时间排序，我们可以直接按id或者创建时间降序排列查询comment表即可。如果用户想查询一条评论的完整引用，则可以通过parent_children来找到对应的路径。向上查找到评论只需要可执行：</p>
<blockquote>
<p>select parent_id from parent_children where child_id=${id} and parent_id != ${id}</p>
</blockquote>
<p>向下查找所有的子孙评论可执行：</p>
<blockquote>
<p>select child_id from parent_children where parent_id = ${id} and parent_id != ${id}</p>
</blockquote>
<p>闭包表在查询时非常方便，但是插入的性能稍差，因为除了插入评论表以外，还需要把该条评论所有的父子关系插入到父子关系表中。插入性能会随着评论层级的加深而线性下降。</p>
<h3 id="海量数据优化"><a href="#海量数据优化" class="headerlink" title="海量数据优化"></a>海量数据优化</h3><p>如果你的系统每天都会有成千上万条评论，那么单表的设计肯定是不行，优化的方式也有很多。</p>
<ul>
<li><p>分库分表。分库分表是最为常用也最有效的优化方式，建议按照主题来分库分表。这样同一个主题下面的评论就会落到同一张表里，避免了跨表查询。</p>
</li>
<li><p>适当的数据冗余。如果你需要显示评论人的相关信息，那么在插入评论时就把这些信息写入评论表中，避免多次查询。实际上，如果是纪录数据，都可以冗余对应的数据信息，因为它们的数据的实时行和一致性要求并不高，用户不会因为评论中的头像没更新而撕了你，哈哈。</p>
</li>
<li><p>附加幂等数据只允许单项操作。如果pd要求你能给评论点赞，那么你可以告诉他只能点赞，不能取消。因为从幂等性的要求来说，每个赞都是一条记录。评论的赞数如果都从点赞表中统计得出，那么性能开销会十分巨大，而且点赞如此轻量级的一个操作一定会加剧点赞表的竞争操作。所以建议直接在评论表中添加一个<code>like_count</code>的计数器，该字段只增不减。</p>
</li>
<li><p>热门评论加缓存。类似于网易新闻的热门评论，读取频度非常高，可以专门开接口给客户端，同时该接口做缓存。</p>
</li>
</ul>
<p>参考文献：</p>
<p><a href="http://blog.csdn.net/tiantiandjava/article/details/45390859" target="_blank" rel="external">逻辑数据库设计 - 单纯的树(递归关系数据)</a></p>
<p><a href="http://qinxuye.me/article/storing-hierachical-data-in-database/" target="_blank" rel="external">在数据库中存储层级结构</a></p>
<p><a href="http://stackoverflow.com/questions/4048151/what-are-the-options-for-storing-hierarchical-data-in-a-relational-database" target="_blank" rel="external">What are the Options for Storing Hierarchical Data in a Relational Database</a></p>
]]></content>
    
    <summary type="html">
    
      本文主要分享了我在设计评论模块中的一些心得，希望对读者有些许帮助。
    
    </summary>
    
      <category term="架构设计" scheme="http://michael-j.net/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="评论系统" scheme="http://michael-j.net/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="架构" scheme="http://michael-j.net/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Debug:Tomcat deploy twice</title>
    <link href="http://michael-j.net/2015/10/30/Tomcat%20deploy%20twice/"/>
    <id>http://michael-j.net/2015/10/30/Tomcat deploy twice/</id>
    <published>2015-10-30T02:46:31.000Z</published>
    <updated>2017-06-03T03:43:57.341Z</updated>
    
    <content type="html"><![CDATA[<p>最近写了一个分布式时间调度系统，用于调度集群类的定时任务程序。架构如下：</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/jscheduler.png" alt=""></p>
<p>有一个集中化的Scheduler来调度集群中所有的job,集群中的job只负责实现具体job内容，而Trigger的定义和管理均在Scheduler中实现。Trigger通过MQ将触发消息发送到集群中的某台机器上。</p>
<p>在部署Scheduler的过程中观察日志如下出现以下奇怪的现象：</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/E77611B1-937A-49AD-B51D-797143F9B6B1.png" alt="debug-1"></p>
<p>我们发现在同一时刻Scheduler对一个Job触发了两次，而在集群的某台机器上发现一个Job被触发了4次：</p>
<p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/9CDEE719-9454-4E4B-99C3-684518E9F49F.png" alt="debug-2"></p>
<p>当我在自己的机器上始终无法复现该问题。由于是同一个war包，故排出了代码的问题。不同之处在于，我本机启动的方式是用jetty的插件直接启动的，而服务器上则是用的是tomcat容器。经过一番排查发现，是tomcat重复部署的问题，tomcat的<a href="https://tomcat.apache.org/tomcat-7.0-doc/deployer-howto.html" target="_blank" rel="external">官方文档</a>有如下说明:</p>
<blockquote>
<p>Any Context Descriptors will be deployed first.</p>
</blockquote>
<p>因为我想讲应用直接部署在/下，所以在server.xml中的localhost节点下加入了context的配置。根据tomcat的官方文档，如果host下面有context的配置则会先部署，而后容器再部署一次。也就是说，应用被部署了两次。这也就解释了为什么scheduler会触发两次，而job会触发4次了。</p>
<p>解决的方法是将<code>deployOnStart</code>设置为<code>false</code>，<code>autoDeploy</code>设置为<code>false</code>。</p>
<p>参考：</p>
<p><a href="http://stackoverflow.com/questions/7223108/quartz-job-runs-twice-when-deployed-on-tomcat-6-ubuntu-10-04lts" target="_blank" rel="external">http://stackoverflow.com/questions/7223108/quartz-job-runs-twice-when-deployed-on-tomcat-6-ubuntu-10-04lts</a></p>
]]></content>
    
    <summary type="html">
    
      tomcat重复部署的问题
    
    </summary>
    
      <category term="踩过的那些坑" scheme="http://michael-j.net/categories/%E8%B8%A9%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    
    
      <category term="tomcat" scheme="http://michael-j.net/tags/tomcat/"/>
    
      <category term="部署" scheme="http://michael-j.net/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="debug" scheme="http://michael-j.net/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>Btrace Sample Scripts</title>
    <link href="http://michael-j.net/2015/10/19/Debug-Tomcat-deploy-twice/"/>
    <id>http://michael-j.net/2015/10/19/Debug-Tomcat-deploy-twice/</id>
    <published>2015-10-19T09:16:28.000Z</published>
    <updated>2016-08-20T10:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kenai.com/projects/btrace/pages/Home" target="_blank" rel="external">Btrace</a> is very powerful tool for online debugging, here is the sample scripts in tar btrace.</p>
<p>The scripts are very useful, so I decide to upload them. Here is the scripts below:</p>
<ul>
<li>AWTEventTracer.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AWTEventTracer.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AWTEventTracer.java</a></li>
<li>AllCalls1.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls1.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls1.java</a></li>
<li>AllCalls1Sampled.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls1Sampled.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls1Sampled.java</a></li>
<li>AllCalls2.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls2.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls2.java</a></li>
<li>AllCalls2Sampled.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls2Sampled.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls2Sampled.java</a></li>
<li>AllCalls3.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls3.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls3.java</a></li>
<li>AllCalls3Sampled.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls3Sampled.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls3Sampled.java</a></li>
<li>AllLines.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllLines.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllLines.java</a></li>
<li>AllMethods.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllMethods.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllMethods.java</a></li>
<li>AllMethodsSampled.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllMethodsSampled.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllMethodsSampled.java</a></li>
<li>AllSync.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllSync.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllSync.java</a></li>
<li>ArgArray.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ArgArray.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ArgArray.java</a></li>
<li>Classload.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Classload.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Classload.java</a></li>
<li>CommandArg.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-CommandArg.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-CommandArg.java</a></li>
<li>DTraceInline.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-DTraceInline.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-DTraceInline.java</a></li>
<li>DTraceRefDemo.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-DTraceRefDemo.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-DTraceRefDemo.java</a></li>
<li>Deadlock.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Deadlock.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Deadlock.java</a></li>
<li>FileTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-FileTracker.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-FileTracker.java</a></li>
<li>FinalizeTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-FinalizeTracker.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-FinalizeTracker.java</a></li>
<li>HistoOnEvent.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-HistoOnEvent.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-HistoOnEvent.java</a></li>
<li>Histogram.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Histogram.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Histogram.java</a></li>
<li>HistogramBean.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-HistogramBean.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-HistogramBean.java</a></li>
<li>JInfo.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-JInfo.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-JInfo.java</a></li>
<li>JMap.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-JMap.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-JMap.java</a></li>
<li>JStack.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-JStack.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-JStack.java</a></li>
<li>JdbcQueries.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-JdbcQueries.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-JdbcQueries.java</a></li>
<li>LogTracer.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-LogTracer.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-LogTracer.java</a></li>
<li>MemAlerter.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-MemAlerter.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-MemAlerter.java</a></li>
<li>Memory.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Memory.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Memory.java</a></li>
<li>MultiClass.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-MultiClass.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-MultiClass.java</a></li>
<li>NewArray.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-NewArray.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-NewArray.java</a></li>
<li>NewComponent.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-NewComponent.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-NewComponent.java</a></li>
<li>OnThrow.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-OnThrow.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-OnThrow.java</a></li>
<li>ProbeExit.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ProbeExit.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ProbeExit.java</a></li>
<li>Profiling.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Profiling.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Profiling.java</a></li>
<li>Sizeof.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Sizeof.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Sizeof.java</a></li>
<li>SocketTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-SocketTracker.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-SocketTracker.java</a></li>
<li>SocketTracker1.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-SocketTracker1.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-SocketTracker1.java</a></li>
<li>SubtypeTracer.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-SubtypeTracer.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-SubtypeTracer.java</a></li>
<li>SysProp.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-SysProp.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-SysProp.java</a></li>
<li>Test.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Test.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Test.java</a></li>
<li>ThreadBean.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadBean.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadBean.java</a></li>
<li>ThreadCounter.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadCounter.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadCounter.java</a></li>
<li>ThreadCounterBean.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadCounterBean.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadCounterBean.java</a></li>
<li>ThreadStart.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadStart.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadStart.java</a></li>
<li>Timers.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Timers.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Timers.java</a></li>
<li>URLTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-URLTracker.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-URLTracker.java</a></li>
<li>WebServiceTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-WebServiceTracker.java" target="_blank" rel="external">http://7xnmye.com1.z0.glb.clouddn.com/btrace-WebServiceTracker.java</a></li>
</ul>
<p>You can access them with curl or wget, wish you happy debugging!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://kenai.com/projects/btrace/pages/Home&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Btrace&lt;/a&gt; is very powerful tool for online debuggi
    
    </summary>
    
      <category term="debug" scheme="http://michael-j.net/categories/debug/"/>
    
    
      <category term="btrace" scheme="http://michael-j.net/tags/btrace/"/>
    
  </entry>
  
  <entry>
    <title>利用Autoconfig打包Java WEB应用</title>
    <link href="http://michael-j.net/2015/10/17/%E5%88%A9%E7%94%A8Autoconfig%E6%89%93%E5%8C%85Java-WEB%E5%BA%94%E7%94%A8/"/>
    <id>http://michael-j.net/2015/10/17/利用Autoconfig打包Java-WEB应用/</id>
    <published>2015-10-17T06:39:08.000Z</published>
    <updated>2017-06-03T03:41:19.832Z</updated>
    
    <content type="html"><![CDATA[<p>简介： 本文主要介绍常用的后台应用打包的几种方式</p>
<p>后端应用上线前都需要经过重新打包，可千万别小看了这个阶段，这个是非常非常重要的！如果打错了包或者使用错了配置文件，结果可能是毁灭性的！</p>
<p>我们都知道每个软件项目或者公司都会维护几套隔离环境，例如以前在阿里就会有<code>日常测试</code>、<code>日常</code>、<code>预发</code>和<code>线上</code>几个环境，还有根据特殊需要配置的独立环境，如<code>性能环境</code>等等。 当然，对于小公司或者创业公司来说不需要准备这么多套环境，但至少是需要<code>测试</code>和<code>线上</code>两套环境的。多套环境的可以有效的隔离线上和线下，提高开发人员的工作效率，又不至于将不稳定的代码带到线上。其中最重要的一个环节就是打包，我主要介绍两种简单的打包方式。</p>
<h2 id="利用Spring配置"><a href="#利用Spring配置" class="headerlink" title="利用Spring配置"></a>利用Spring配置</h2><p>现在Java WEB应用可以说90%都使用了Spring框架，而Spring框架早就帮我们考虑了这个问题。我一开始也是使用这个配置方式，在Spring配置文件中引入一下配置：</p>
<blockquote>
<context:property-placeholder location="file:${APP_HOME}/config.properties">

</context:property-placeholder></blockquote>
<p>Spring是支持classpath和file的，个人推荐使用<code>file</code>模式来查找外部配置文件，因为这样我们就不必将配置文件引入到工程目录中了，因为工程目录对所有的开发人员都可见，这样会降低配置文件的安全性。引入外部配置文件一个常见的做法就是使用环境变量，我们新建一个<code>APP_HOME</code>的环境变量来区分不同的环境。</p>
<p>在使用配置文件的地方利用placeholder进行配置即可，例如以下方式：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"dataSource"</span> <span class="built_in">class</span>=<span class="string">"org.apache.commons.dbcp2.BasicDataSource"</span>&gt;</div><div class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"driverClassName"</span> value=<span class="string">"$&#123;db.driverClass&#125;"</span>/&gt;</div><div class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"url"</span> value=<span class="string">"$&#123;db.url&#125;"</span>/&gt;</div><div class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"username"</span> value=<span class="string">"$&#123;db.username&#125;"</span>/&gt;</div><div class="line">        &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"password"</span> value=<span class="string">"$&#123;db.password&#125;"</span>/&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>在Spring启动以后，它会去查找你配置的外部配置文件，并逐个替换使用的配置中的placeholder。</p>
<p>这种方式的优点就是简单，灵活，但是缺点也是很明显的：</p>
<ul>
<li><p>只支持Spring配置文件的替换，不支持其他框架配置文件的替换。<br> 如果你想替换logback.xml中的某个配置，例如日志输出目录或者日志输出级别，它是做不到的。</p>
</li>
<li><p>大规模部署不方便。<br>如果只有一两机器这样部署还是比较方便的，但是如果有几十台甚至上百台这样打包就十分麻烦了。如果改动一个配置项，就需要保持所有机器的同步的，所以一般大一点的公司都会有专门负责配置的服务，例如阿里的ConfigServer。</p>
</li>
</ul>
<h2 id="利用AutoConfig打包"><a href="#利用AutoConfig打包" class="headerlink" title="利用AutoConfig打包"></a>利用AutoConfig打包</h2><p>AutoConfig 是阿里内部使用的一个打包工具，十分方便，也十分强大，这里有它的介绍：<a href="http://openwebx.org/docs/autoconfig.html" target="_blank" rel="external">http://openwebx.org/docs/autoconfig.html</a></p>
<p>下面是我利用AutoConfig打包的步骤：</p>
<ul>
<li><p>添加不同环境的配置</p>
<p>为了直接利用Maven打出不同环境的包，我们在需要打包的module的pom中添加下面的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">autoconfig.properties</span>&gt;</span>antx.properties.dev<span class="tag">&lt;/<span class="name">autoconfig.properties</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后加入profile配置：</p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!-- 本地开发环境 --&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">autoconfig.properties</span>&gt;</span>antx.properties.dev<span class="tag">&lt;/<span class="name">autoconfig.properties</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!-- 测试环境 --&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">autoconfig.properties</span>&gt;</span>antx.properties.test<span class="tag">&lt;/<span class="name">autoconfig.properties</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">env</span>&gt;</span>test<span class="tag">&lt;/<span class="name">env</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!-- 生产环境 --&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>online<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">autoconfig.properties</span>&gt;</span>antx.properties.online<span class="tag">&lt;/<span class="name">autoconfig.properties</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">env</span>&gt;</span>online<span class="tag">&lt;/<span class="name">env</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>添加autoconfig maven插件支持</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="xml"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.citrus.tool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>autoconfig-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"> 	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">               	<span class="tag">&lt;<span class="name">userProperties</span>&gt;</span>$<span class="template-variable">&#123;user.home&#125;</span><span class="xml">/conf/$</span><span class="template-variable">&#123;autoconfig.properties&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">userProperties</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>autoconfig<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p> 其中,userProperties属性就是我们使用的配置文件。</p>
<ul>
<li><p>利用Maven进行打包</p>
<p>进入到需要打包的module中，然后执行<code>mvn package -P&lt;env&gt;</code>，其中env代表不同的环境，在上面的配置中env只能为dev、test和online.<br>我们可以将最终的包名也带上环境名称，以区分打出来的不同环境的包，如下配置：</p>
</li>
</ul>
<p><code>&lt;finalName&gt;包名-${env}&lt;/finalName&gt;</code></p>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><p>如果开发人员使用的是jetty插件来进行本地开发的，那么需要将jetty:run改为jetty:run-war，因为autoconfig是需要执行package才会进行触发的，而jetty:run不会执行package阶段。可以参考一下配置：</p>
<pre><code><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- jetty插件 --&gt;</span></span></div><div class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.16.v20140903<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">webAppSourceDirectory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">webAppSourceDirectory</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">scanIntervalSeconds</span>&gt;</span>3<span class="tag">&lt;/<span class="name">scanIntervalSeconds</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">connectors</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">connector</span> <span class="attr">implementation</span>=<span class="string">"org.eclipse.jetty.server.nio.SelectChannelConnector"</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">                 <span class="tag">&lt;<span class="name">maxIdleTime</span>&gt;</span>60000<span class="tag">&lt;/<span class="name">maxIdleTime</span>&gt;</span></div><div class="line">             <span class="tag">&lt;/<span class="name">connector</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">connectors</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">war</span>&gt;</span>target/包名-$<span class="template-variable">&#123;env&#125;</span><span class="xml">.war<span class="tag">&lt;/<span class="name">war</span>&gt;</span></span></div><div class="line">     <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
</code></pre>]]></content>
    
    <summary type="html">
    
      本文主要介绍常用的后台应用打包的几种方式
    
    </summary>
    
      <category term="部署" scheme="http://michael-j.net/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="java" scheme="http://michael-j.net/tags/java/"/>
    
      <category term="package" scheme="http://michael-j.net/tags/package/"/>
    
      <category term="autoconfig" scheme="http://michael-j.net/tags/autoconfig/"/>
    
  </entry>
  
</feed>
