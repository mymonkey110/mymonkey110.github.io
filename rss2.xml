<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Michael-J</title>
    <link>http://michael-j.net/</link>
    <atom:link href="//rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 19 Jul 2019 03:35:26 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>CQRS模式</title>
      <link>http://michael-j.net/2019/04/16/CQRS%E6%A8%A1%E5%BC%8F/</link>
      <guid>http://michael-j.net/2019/04/16/CQRS%E6%A8%A1%E5%BC%8F/</guid>
      <pubDate>Tue, 16 Apr 2019 02:40:56 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn568103(v%3dpandp.10)&quot; target=&quot;_blank&quot; rel=&quot;noopen
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>原文链接：<a href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn568103(v%3dpandp.10)" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn568103(v%3dpandp.10)</a></p></blockquote><p>通过使用不同的接口来分离读写操作，这种模式能最大化性能、可扩展性和安全性；能通过更高的灵活性来支持系统的演进；同时能在领域层面防止因更新命令引起的合并冲突。</p><h2 id="背景与问题"><a href="#背景与问题" class="headerlink" title="背景与问题"></a>背景与问题</h2><p>在传统的数据管理系统中，命令（更新数据）与查询（请求数据）是在相同的一组实体集在单个数据仓库下执行的。这些实体可能是传统关系型数据库（比如：SQLServer）中一张或者多张表的多行数据的一个子集。</p><p>典型的，在这些系统中，所有的创建、读取、更新和删除（CRUD)操作在同一个实体上执行。比如，一个“客户”的DTO对象通过数据访问层（DAL)从数据仓库中检索出来并展示到界面上。用户更新了DTO对象中的几个熟悉，然后DTO对象通过DAL层被存回了数据仓库中。像图一所示，同一个DTO对象既被用于了读操作又被用于了写操作。</p><p><img src="https://i0.wp.com/docs.microsoft.com/en-us/previous-versions/msp-n-p/images/dn568103.da4ddd8b45993eb958a15b067e22ecfd%28en-us%2cpandp.10%29.png?w=863&amp;ssl=1" alt="图一 传统的CRUD架构"><br>传统的CRUD模式在针对数据的业务逻辑十分有限的情况下能比较好的工作。一些开发工具提供的脚手架机制能迅速的创建数据层的访问代码，然后能按需调整。</p><p>然后，传统的CRUD方法有几个弊端：</p><ul><li>这通常说明对数据的读和写操作存在不匹配，比如附加的列或者属性必须正确的更新即使它们不是操作的必须部分。</li><li>在一个协作的领域模型（例如多个Actor并行操作相同的数据集）中，当记录被锁定在数据仓库中，或者因为并发更新引起的更新冲突，此时会存在数据争取的风险。随着系统的复杂度和吞吐量增加，这些风险也逐渐加大。另外，因为数据存储和数据访问层的负载较重，加之检索必要信息的复杂性查询，传统方法同样对性能有着负作用。</li><li>因为一个实体同时暴露了读写操作，有可能一不小心在一个错误的上下文中暴露了数据，从而使得管理数据的安全性和权限更加繁琐。</li></ul><h2 id="解决之道"><a href="#解决之道" class="headerlink" title="解决之道"></a>解决之道</h2><p>命令与查询责任分离是一种通过接口来区分开读数据（查询）与更新数据（命令）的模式。这表明用于查询的数据模型与用于更新的数据模型是不一样的。如图二所示，这些模型可以是独立的，虽然这不是必须的。</p><p><img src="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/images/dn568103.152121e2dbe656d3fa1902158422c025%28en-us%2cpandp.10%29.png" alt="图二 一个基础的CQRS架构"></p><p>与基于CRUD系统中固有的单一数据模型相比，基于CQRS系统中分离的查询与更新数据模型能极大的简化设计与实现。然后，一个缺点是，不能像CRUD，CQRS代码不能通过脚手架的工具自动生成。</p><p>读数据的模型和写数据的模型可以访问相同的物理存储，可能通过使用SQL试图或者动态生成映射。然后，通常的做法是将数据分离到不同的物理存储，这样能最大化性能，可扩展性和安全性，如图三所示。</p><p><img src="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/images/dn568103.3769b26881da48bc03c082c1965d0832%28en-us%2cpandp.10%29.png" alt="图三 一个使用不同的读存储和写存储的CQRS架构"></p><p>读存储可以是写存储的一个只读副本，也可以有完成不同的数据结构。使用多个只读副本可以提高查询性能和应用的UI响应性，尤其是在分布式的场景中，应用系统的实例可以与只读副本距离很近。某些数据库系统中，例如SQLServer，提供额外的副本故障转移功能来提高可用性。</p><p>分离读存储与写存储允许对方能独立的扩展来应对负载。例如，读存储一般都比写存储遇到的复杂要高得多。</p><p>当读模型包含非结构化的数据时，在读取应用系统中每个视图的数据或者从系统中进行查询时，性能将最大化。</p><h2 id="问题与考虑"><a href="#问题与考虑" class="headerlink" title="问题与考虑"></a>问题与考虑</h2><p>当实现这个模式时应当考虑一下几点：</p><ul><li>将数据存储根据读写操作划分为独立的读存储和写存储，这能提高系统的性能和安全性，但在弹性和最终一致性方面，它增加了相当大的复杂度。读存储必须更新以反映写存储的变化，同时，很难检查用户何时基于一个老旧的读数据发出请求，这意味着操作不可能完成。</li><li>考虑将CQRS应用到你系统中最有价值部分，同时从经验中学习。</li><li>采用最终一致性的一个典型做法是使用事件溯源（EventSouring）与CQRS相结合，这样读模型就是一些列追加的命令执行的事件流。这些事件用于更新充当读模型的物理视图。</li></ul><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>该模式适用于以下场景：</p><ul><li>协同的领域中针对同样的数据有多个操作并发执行。CQRS模型能在领域这个层次上提供最小化冲突的保证（任何出现的冲突都可以通过命令的方式来合并），即使是在更新同种类型的数据。</li><li>当时候基于任务视图的用户界面时（用户操作被引导为一些列复杂的步骤），同时你有一个复杂的领域模型，而且团队成员已经对DDD技术比较熟悉了。写模型拥有完整的完整的命令处理堆栈，包含业务逻辑、输入校验、业务校验，以确保写模型中每个聚合的所有内容是一致的。读模型没有验证逻辑或者验证堆栈，只需要视图模型需要的DTO对象。读模型与写模型是保持最终一致的。</li><li>在那些需要根据数据写入性能来微调数据读取性能的场景中，尤其是读写比非常高，需要水平扩容的时候。比如，在很多系统中，数据读取操作要比写入操作大几个数量级。为了适应该场景，考虑将读模型进行扩展，但是写模型只需要一个或者少数几个实例就可以了。少量的写模型能最小化冲突发生的概率。</li><li>一个团队可以专注于复杂的领域模型，而该模型是写模型的一部分；而另外一个相对缺乏经验的团队可以专注于读模型和用户界面。</li><li>系统期望能随着时间演进，同时能维持多个版本，或者业务逻辑会时常变化。</li><li>与其他系统进行集成，尤其是结合EventSouring，一个子系统临时的失败不应影响其他系统的可用性。</li></ul><h2 id="该模式不适用于以下场景："><a href="#该模式不适用于以下场景：" class="headerlink" title="该模式不适用于以下场景："></a>该模式不适用于以下场景：</h2><ul><li>领域模型或者业务逻辑很简单。</li><li>一个简单的CRUD风格的用户界面，以及其相关的数据访问操作就已足够。</li><li>实现跨越了整个系统。整个数据管理场景中特定组件使用CQRS可能很有用，但是需要考虑的是它经常会带来不必要的复杂性。</li></ul><h2 id="EventSouring与CQRS"><a href="#EventSouring与CQRS" class="headerlink" title="EventSouring与CQRS"></a>EventSouring与CQRS</h2><p>CQRS经常与EventSouring相结合。基于CQRS的系统使用独立的读写模型，它们是为其相关的任务量身定制的，而且经常会分不到不同的物理存储上。当使用EventSouring时，存储的事件就是写模型，并且这是信息的权威来源。基于CQRS的读模型提供了数据的物化视图，典型的是作为高度非规范化的视图。这些视图是为用户界面和应用展示需要高度定制化的，这样能最大化展示和查询性能。</p><p>相比于使用某个时刻点的实际数据而言，使用事件流作为写存储，能避免在单一聚合上的更新冲突以及最大化性能和扩展性。事件可用于异步生成物化视图，而这些视图是由读存储填充形成的。</p><p>因为事件存储是信息的权威来源，所以当系统演进的过程中或者读模型必须改变的时候，是有可能删除物化视图并重放过去的所有事件来重建一个当前状态的新描述。物化视图实际上是数据的一个持久化只读缓存。</p><p>当结合CQRS和EventSouring时，需要考虑以下问题：</p><ul><li>与任何读写存储分离的系统一样，基于该模式的系统也是最终一致的。生产事件和保存由这些事件发起的操作结果之间会存在一些延迟。</li><li>该模式引入了额外的复杂性，因为必须写代码来初始化、处理事件，并组装或者更新因为查询或者读模型所需要的合适的视图和对象。当与EventSouring相结合的时候，CQRS内在的复杂性使得一个成功的实现更加困难。这需要重新学习模型概念，以及一个不同的系统设计方法。然后，EventSouring使得建模更加简单，也更加容易重建视图或者创建一个新试图，因为数据变化的本质得以保留。</li><li>通过重放和处理特定实体或者实体集合的事件来生成用于读模型或者数据映射的物化视图可能需要充足的处理时间和资源消耗，尤其当需要对长时间段内值做求和或者分析操作时，因为可能需要检查每个所相关联的事件。这可以通过在预定的时间间隔内打数据快照来部分解决，例如记录下某些操作发生的总次数，或者实体的当前状态。</li></ul><hr><h2 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h2><p>CQRS是一种相当常见并且适用性相当广泛的架构模式，我曾经在多个真实的系统中见到该模式发挥巨大作用。该模式的核心观点在于将用于读和写的领域模型进行分割，根据实际的业务场景进行独立的开发和优化，这样带来的好处就是极高的扩展性和灵活性。我们再也不用纠结因为因为领域模型是一个而小心翼翼地处理并发、安全、性能等问题。但是任何架构都有两面性，就像文中所说的一样，该模式会引入额外的复杂性，如果你的业务场景比较简单，建议还是不要轻易尝试。至于EventSouring，个人持有保留意见，因为只保留事件记录的做法过于极端，即使通过快照优化，还是有点过于激进。我相信EventSouring会在少数几个关注于历史数据的业务场景中得到应用，例如审计、金融等，但这种业务相对比较特殊，适用性有限。</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2019/04/16/CQRS%E6%A8%A1%E5%BC%8F/#disqus_thread</comments>
    </item>
    
    <item>
      <title>编程技巧分享</title>
      <link>http://michael-j.net/2018/12/01/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/</link>
      <guid>http://michael-j.net/2018/12/01/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/</guid>
      <pubDate>Sat, 01 Dec 2018 12:14:13 GMT</pubDate>
      <description>
      
        &lt;p&gt;为什么要写好代码？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;做一个有追求的Coder&lt;/li&gt;
&lt;li&gt;好的代码能降低整个系统的复杂度&lt;/li&gt;
&lt;li&gt;好的代码能提高系统的可维护性和可修改性&lt;/li&gt;
&lt;li&gt;好的代码能提高整体的质量&lt;/li&gt;
&lt;li&gt;好的代码能提高你得生活品质&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>为什么要写好代码？</p><ul><li>做一个有追求的Coder</li><li>好的代码能降低整个系统的复杂度</li><li>好的代码能提高系统的可维护性和可修改性</li><li>好的代码能提高整体的质量</li><li>好的代码能提高你得生活品质</li></ul><a id="more"></a><p>最近和团队内的小伙伴分享了我个人的一些编程小技巧，特此对外分享一下。</p><p>分享链接：<a href="https://pan.baidu.com/s/1IWUlHadCYXE5M1ASTHPTkg" target="_blank" rel="noopener">https://pan.baidu.com/s/1IWUlHadCYXE5M1ASTHPTkg</a></p><p>个人对写好代码的几点感悟：</p><ul><li>写代码很难，写好代码更难</li><li>写好代码需要长时间、反复、刻意的练习</li><li>写好代码是一个高度自律的过程</li><li>每次写代码之前或者之后多问几个为什么？<ul><li>为什么要这么写？</li><li>有没有更加简单直观的写法？</li><li>这段代码其他人看的懂吗？</li><li>这段代码好复用吗？</li></ul></li><li>世上无难事，只怕有心人，多总结，多沉淀、多分享！！！</li></ul><blockquote><p>好的代码更像是一件艺术品，而不是机械化的产物，只有有心的人才能体会其中的精妙！</p></blockquote>]]></content:encoded>
      
      <comments>http://michael-j.net/2018/12/01/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/#disqus_thread</comments>
    </item>
    
    <item>
      <title>漫谈公有云计费</title>
      <link>http://michael-j.net/2018/05/29/%E6%BC%AB%E8%B0%88%E5%85%AC%E6%9C%89%E4%BA%91%E8%AE%A1%E8%B4%B9/</link>
      <guid>http://michael-j.net/2018/05/29/%E6%BC%AB%E8%B0%88%E5%85%AC%E6%9C%89%E4%BA%91%E8%AE%A1%E8%B4%B9/</guid>
      <pubDate>Tue, 29 May 2018 08:24:18 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;公有云已经进入下半场&quot;&gt;&lt;a href=&quot;#公有云已经进入下半场&quot; class=&quot;headerlink&quot; title=&quot;公有云已经进入下半场&quot;&gt;&lt;/a&gt;公有云已经进入下半场&lt;/h2&gt;&lt;p&gt;公有云的发展已经进入下半场，无论是国外还是国内，市场格局已经基本确定，后来者很难再有机会打破现有的格局。纵观国内市场，阿里云一家独大，其他厂商都还在奋起直追，艰难的维持着自己的市场份额。虽然最近两年，不断有大的厂商宣布进军公有云领域，但我认为留给后来者的时间并不多了。公有云是一个强者恒强的行业，随着头部厂商的成熟，厂商锁定(vendor-lock)的现象会越来越凸显，进而越来越多的用户会投入头部厂商的怀抱。虽然，后来者可以在一些细分领域找到某些差异化的优势，但整体格局不会太多的影响。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="公有云已经进入下半场"><a href="#公有云已经进入下半场" class="headerlink" title="公有云已经进入下半场"></a>公有云已经进入下半场</h2><p>公有云的发展已经进入下半场，无论是国外还是国内，市场格局已经基本确定，后来者很难再有机会打破现有的格局。纵观国内市场，阿里云一家独大，其他厂商都还在奋起直追，艰难的维持着自己的市场份额。虽然最近两年，不断有大的厂商宣布进军公有云领域，但我认为留给后来者的时间并不多了。公有云是一个强者恒强的行业，随着头部厂商的成熟，厂商锁定(vendor-lock)的现象会越来越凸显，进而越来越多的用户会投入头部厂商的怀抱。虽然，后来者可以在一些细分领域找到某些差异化的优势，但整体格局不会太多的影响。</p><a id="more"></a><p>相信排名靠后的公有云厂商都在思考一件事，我如何进行差异化的竞争？其实这是很难的一个问题，差异化竞争归根结底还是要建立在技术门槛之上，靠其他优势带来的差异化只能是短期的。技术门槛的建立不是一日之功，需要持续的投入和战略级别的支持，所以中小厂商是很难有机会“超车”的，只能争取头部厂商无暇顾及的领域，得以短暂的喘息。</p><p>差异化竞争除了在产品、技术方面的竞争，还有一个很容易让大家忽略但又十分重要的点，那就是公有云的计费模式。本人作为一个公有云产生的参与者与亲历者，想谈谈个人对公有云计费的看法。</p><h2 id="计费的重要性"><a href="#计费的重要性" class="headerlink" title="计费的重要性"></a>计费的重要性</h2><p>不知道大家再刚接触云计算的时候是否听说过这样一句话：</p><blockquote><p>云计算会像现在的水和电一样。</p></blockquote><p>这是非常形象的一句话，也是对云计算最终形态的一种展望。但是大家有没有想过水和电是怎样收费的？每个月结束的时候（或者下个月开始的时候）有人上门来抄水表电表，然后根据你实际的使用量把账单给你，最后你根据账单付钱就可以了。</p><p>云计算里面有一个很重要的特性，就是<em>Pay As You Go</em>，意思是按你的实际使用量来付费。那现在有哪家云计算厂商做到这一点了呢？现实的答案是：None，没有一家云厂商做到了。你可能会疑惑，难道云厂商的”按量付费“不是按用户的使用量付费吗？还真的不是。用户去公有云厂商买一台云主机，云厂商会提供各种类型规格的主机供你选择，然后你根据自己”预期“的需要选择一台。大的云厂商可能会提供非常多种类的云主机，按用户的使用场景进行细分，是的云主机能更加贴合用户的真实场景，但这样做也仅仅是减少了你花的”冤枉钱“而已。你购买的绝大部分云服务以低负载的模式运行，而你用不到的那部分资源被无情的浪费了。当然，这种浪费是针对用户而言的，云厂商可不会因为你没有完全使用云主机而把多余的部分退还给你。这种现象在计算资源和带宽资源方面表现的尤为突出，存储相对而言要好一点。</p><p>现在情况相对来说要好点了，大型的云厂商开始提供”竞价型实例“来缓解这一现象。用户可以把自己多余的计算能力进行公开的售卖，而计算能力不足的用户也可从”市场“上买到价格合理的计算资源。这有点像股票市场，让用户来决定资源的价格，当然，这个市场也是受云厂商控制的。另外，越来越多的厂商提供”按秒计费“，也就是计费的时间粒度可以精确到”秒“，但这仅仅是时间维度的贴合，资源的实际使用量还是不会影响你的账单。也许，Serverless才是最终的计算形态，相对其他的计算形式，它可以更加接近<em>Pay As You Go</em>的宣言！本人也十分看好Serverless的发展。</p><p>但短期内，云主机并不会消亡，容器技术也在逐步成熟，如何调和用户对资源的诉求和成本控制之间的矛盾将成为公有云厂商一个有利的竞争点。我们知道，Dropbox因为成本问题，从AWS上迁移出来，自建数据中心，从其官方的说法中，它减少了巨大的成本。这是公有云厂商都会面临的一个问题，当用户使用的资源量达到一定的级别，它会发现自建的成本会比使用公有云的成本更低，而公有云厂商无法给出一个双方都能接受而又不扰乱市场的定价，最终只能一拍两散。实际上，这对双方来说损失都是很大的，因为”上云“需要成本，而”下云“更需要成本。造成这种结果的原因无疑是多方面的，其中的一个原因就是云厂商无法准确的评估用户的资源使用情况，而呆板的计费策略造成用户为大量的浪费资源而付费。</p><p>云计算发展到今天，很多技术已经相当成熟，各家云厂商的产品也越来越趋同。在产品同质化如此严重的情况下，提高云平台整体的”软实力“就相当重要。而公有云的计费无疑是”软实力“中最重要的一个因素。不得不承认，无论用户是创业公司还是像Dropbox和Netflix这样的明星公司，成本控制都是相当重要的一环。而产品的计费策略直接与成本挂钩。降价、打折、促销只能是短期吸引用户的手段，最为核心的竞争力在于产品的计费模式能多大限度的贴合用户的使用场景。一个好的计费策略可以极大的提高产品的竞争力，毕竟这将直接关系用户的钱。</p><h2 id="售卖形式与产品定价"><a href="#售卖形式与产品定价" class="headerlink" title="售卖形式与产品定价"></a>售卖形式与产品定价</h2><p>IaaS、PaaS和SaaS的云服务的售卖形式有着巨大的差别，而且越接近SaaS形态，产品的售卖形式越特化。云服务的产品和负责人需要根据自身产品的特性，谨慎的思考产品的售卖形式。因为公有云的产品与其他的互联网产品有着一个显著的区别，那就是用户的使用方式将直接影到产品本身的开发。云服务的用户基本上都是高端用户，主要面向程序员、SA、PE等软件开发运维人员，他们将直接使用产品提供的OpenAPI、SDK，这就导致了使用方式与产品特性的深度耦合，从而使得云产品在后期的迭代过程中必须考虑向前兼容。售卖形式是云服务产品形态的重要一环，前期的小心设计大大降低后期产品在迭代过程中的兼容负担。我相信谁也不愿意在产品正式售卖之后，发现售卖形式完全错了，而已经在使用云产品的用户会让你大为头疼。</p><p>IaaS产品的售卖形式现阶段已经比较成熟，计算、存储、网络都有着比较标准的售卖模式，这些售卖形式已经被用户所接受，并形成了业界共识。IaaS产品基本上都是按资源的“占用量”来进行售卖的，但“占用量”这里面大有学问，各个云厂商都有着自己的超售比，而超售比是厂商的一个机密数据，用户永远不会知道自己的云主机运行在一个超售比多少的物理机上。前面也介绍过，按资源的“占用量”来售卖会造成用户为没有使用到的资源付费，最终得原因在于厂商无法精确得评估用户所需的计算资源以及能在获取短时间内调度大量计算资源的能力。所以云厂商最终把这个问题抛给了用户，让用户决定自己需要的计算资源。但这并没有解决问题，这仅仅是对厂商友好的一种计费方式而已。然而用户似乎比较满意现在的售卖模式，可能因为人都有“占有欲”吧，当然你需要为这种“占用”付出代价。</p><p>相比于IaaS，PaaS产品的售卖形式开始变得复杂了。不同于计算、存储、网络独立计费，PaaS产品“有机地”将三类资源进行组合，并根据产品本身的特性来提供“增值业务”。比如，RDS会提供高可用版或者集群版，除了底层独立占用几台云主机外，还会提供高可用、定时备份、数据操作、水平垂直扩容等服务。PaaS的核心价值也体现在这种高附加值的服务上。如果PaaS使用起来不方便，经常出问题，用户购买的PaaS服务的意义又在哪里呢？所以PaaS的定价一定不是在于底层资源的占用了，当然这是一个考量因素，但更为重要是PaaS产品提供的高附加值服务，这也是用户购买PaaS产品的初衷。一种简单的售卖形式就是将这些服务和底层资源全部打包在一起进行售卖，因为这些服务往往是建立在具体实例之上的。这种做法的一个明显缺点在于，这些高附加值的服务与底层资源绑定了，导致了这些服务无法独立的售卖，从而降低了整体的灵活度。可能用户仅仅需要RDS的高可用特性，而无须定时备份等功能，是否可以考虑降低用户的购买成本呢？</p><p>SaaS与PaaS的一个共同点在于他们都对用户屏蔽了底层资源。也许用户在使用PaaS服务的过程中还能零星的感知到底层资源的存在，但在SaaS服务中他们就已经完全感知不到底层的基础设施了。一个有趣的问题，大家是否认知的思考过，AWS的S3到底是IaaS、PaaS还是SaaS呢？相信不同的人会有不同的看法。随着云计算的成熟，必将会出现越来越多的难以简单划分的服务出现。因为SaaS产品已经完全对用户屏蔽了资源占用的概念，那么它的售卖形式肯定不再是以资源的维度来定价，而应该从SaaS产品本身提供的功能出发来定价。例如，某个搜索服务产品，它的主体功能提供了数据索引与搜索，那么它的售卖形式必然会以索引和搜索的数量来进行售卖。相比于IaaS和PaaS，SaaS服务更容易达到“Pay As You Go”的理念。令人遗憾的是，某些SaaS产品出于简单的需要，而仅仅将整个SaaS产品打包售卖，又回归到了以资源占用为维度的老路子上，这实际上是本末倒置的。</p><p>我一直觉得给产品定价是一项极具挑战的任务，因为涉及到的因素实在太多了。超售比、成本、调度策略、市场环境、产品特性等诸多因素都会影响产品最终的价格，而这些因素很难有一个简单的公司来调和。本人在这方面也没有多少经验，不敢妄言。但我还是建议厂商根据自己的实际情况来考虑自身的定价策略。大的厂商一定要有自己的定价逻辑，针对不同的产品线有不同的定价基准，而具体的产品可以在这个基准之上进行调节。而小的厂商尽量参考大厂商的定价逻辑，这有利于形成差异化的竞争力。但总体来说，产品定价还是一项十分复杂的工作，有能力的厂商需要建立自己的定价团队。好的定价策略会让你赢在起跑线上。</p><h2 id="结算方式与计费策略"><a href="#结算方式与计费策略" class="headerlink" title="结算方式与计费策略"></a>结算方式与计费策略</h2><p>国内与国外的云计算厂商在结算方式有一个明显的区别，国外的厂商更偏向于后付费，而国内的厂商更喜欢预付费。这可能与国内外的使用习惯，信用环境有关系，但这已经是一个既定的事实。国内的预付费方式无疑加重了计费系统的负担，因为预付费的收费逻辑与后付费的逻辑是完全不同的，况且真实的环境是两种方式的组合。</p><p>预付费的逻辑是期望能尽早地锁定用户，把钱先收进来，但先收的钱并不能纳入到厂商当前地实收中，因为大部分是未来预期地收入。这种做法的一个巨大的好处在于将用户锁定，一旦用户已经支付了未来的使用费用，那么他潜在的心智更期望能物尽其用，反过来进一步增加了用户粘性。国内的厂商基本上都极力推崇这种方式，甚至不惜以高折扣的方式来补贴用户，也希望能锁定用户。这实际上是技术上不成熟的无奈之举。</p><p>实际上，后付费是最符合”Pay As You Go”的理念的。用户只需要为他们使用的资源付费，如果还没开始使用，那有何来付费之说呢？排除国内外的差异因素，我觉得AWS一开始就走在了正确的道路上。虽然AWS也支持预留实例，但这仅仅是一种获取折扣的方式，大部分产品都是在使用后根据账单来结算的。后付费的另外一个优势在于它更有利于云产品与计费系统的解耦，因为用户无需在使用之前完成下单、支付与产品无关的交易行为。</p><p>采用预付费还是后付费，又或者是两者的组合，还是要根据产品本身的特性出发。我看到一些很复杂的产品，它实际上更加适合后付费模型，而偏偏采用预付费方式，造成用户在购买上面遇到了很多问题。一个简单有效的经验是，如果产品本身的构成比较简单，采用任何一种付费方式或者组合都是可以的；反之，如果产品的构成比较复杂，建议使用后付费。产品构成是指用户可感知的产品元素，举个Redis的例子，一个高可用版的Redis Sentinel可能由3台Sentinel和一对Master-Slave节点构成，但对用户暴露的仅仅是3个Sentinel的链接地址，那么用户感知到的产品构成是比较简单的。另外一个例子，比如托管型的ELK服务，该服务对用户暴露了ElasticSearch、LogStash和Kibana，产品构成就比较复杂了，如果采用预付费的收费模型，那么该服务在扩展时就会与订单与计费系统产生大量的交互行为，降低了用户体验。</p><p>谈到计费策略，可能让人首先想到的是“按量计费”、“包年包月”等词汇，这些词汇是厂商为了更好的进行销售而形成的一套特定用语。我们先抛开这些让人眼花缭乱的名词，思考一下为什么需要计费？如果用户选择后付费，那么我们需要记录用户资源的使用情况，然后根据产品的计费模型计算出用户的账单，这是计费最核心的功能。那么如果用户选择预付费呢？当然我们不需要计费了。</p><p>现实的情况是复杂的。某些产品的计费模型十分灵活，可以部分预付费部分后付费，那么就要求计费策略可以下沉到计费项这个级别。一个比较典型的例子就是，经典云主机可能在创建时获得一个公网IP，整个云主机可以包年包月购买，而公网IP部分又可以按流量计费。先不看技术上如何实现，需求层面是否合理。现在的一个趋势是，云产品越做越大，越做越细，越做越复杂，如果再将整个云服务打包卖个用户已经跟不上市场的节奏了。一个云服务的构成可能需要多种资源的配合才能完成，但是资源之间的配比和售卖形式是可以不一样的，按照资源粒度去售卖可以更加贴合现实的使用场景，降低用户的成本。总体来说，需求是合理的，也是一个必然的趋势。计费策略可以很灵活，但一定要形成统一的标准。只有在统一的计费模型上演化，系统的复杂度才可控，产品也能把握整体的一个节奏。</p><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><p>不得不承认，要做好公有云的计费非常难，这种难度在于对公有云行业的深入理解、对云服务产品计费模型的准确把握以及计费系统本身的非功能性要求。我分享一些此方面的一些经验。</p><h4 id="抽象化与建模"><a href="#抽象化与建模" class="headerlink" title="抽象化与建模"></a>抽象化与建模</h4><p>最开始的时候，计费系统并没有将云服务产品抽象化。在前期产品不多的情况下，我们还能针对一个个具体的产品编程，理解各个云产品的计费逻辑。但随着业务的加速发展，这种方式已经跟不上业务的要求了。我们意识到必须把产品的计费模型抽象化出来，我们根据这个抽象化的模型去编程，这样将大大提高系统的扩展性。后期的重构过程中，我们也确实是这么做的，并且达到了我们的预期效果。但是随着一些SaaS型或者复杂PaaS型产品的出现，我们第一版的抽象化模型已经很难适应了。那是不是我们需要进一步抽象化呢？其实不然。抽象化是有代价，当你提高了抽象化等级，结果只有一两个产品受益，大部分产品没有从中得到任何好处，其实这已经是过度抽象化了。解决这个问题的一个方式就是建立一个不同的模型。前期我们总想着只用一个模型就能解决所有产品的计费，实际上这总想法太天真了。每个产品的计费策略和模型都不一样，SaaS型产品和IaaS产品的计费方式差异巨大，如果想用一个模型搞定所有问题，只能得到一个难以理解和维护、需要处处小心、高度复杂的模型。所以，如果发现某些产品的计费方式与其他产品的差异巨大，去建立另外一个模型吧！</p><h4 id="定好规则"><a href="#定好规则" class="headerlink" title="定好规则"></a>定好规则</h4><p>计费系统很难做的原因之一就在于很难建立一个统一的计费模型。有人可能会说，使用规则引擎吧，还有流程引擎，但是这些技术都是建立在你有着一个相对统一的模型基础之上的，如果没有计费模型支持，那么整个系统只能是空中楼阁，就算能正常运行，也不能灵活扩展。</p><p>当你的系统为几十种其他系统服务时，定好规则就十分必要了，这也符合”中台“的思想。如果你建立了一种模型可以适应于多种计费场景，那么剩下的就是为这个模型定好规则，推动业务方按规则接入就行。在这个过程中，可能会遇到很大的阻力（可能有些业务方比较强势），但你也要坚持自己的原则，不要轻易动摇，更不要专门为单独的一两个业务去适配。因为一旦你这么做了，那就是噩梦的开始。</p><h4 id="尽量解耦"><a href="#尽量解耦" class="headerlink" title="尽量解耦"></a>尽量解耦</h4><p>我一直在谈计费，但这里的计费其实包含了云服务完整的售卖过程，涵盖订单、优化、支付、计费、结算完整的售卖链路。每一步都可以独立拉出一个系统来做，也建议独立系统来做。如果人员不够，可以考虑先将系统拆分，由不同的人来维护几个模块。现在微服务架构十分流行，可以考虑使用微服务架构来解耦系统。除了系统内部的耦合，我们也需要交互流程上尽量解耦。AWS在这方面是有天然优势的，因为它主推后付费的模式，云服务和计费系统前台界面上基本没有交互过程。减少与云服务的交互过程，将极大地降低系统地复杂度，提高整体地稳定性，毕竟计费系统要服务于整个云平台。</p><hr><p>总而言之，公有云计费很重要，也很复杂。做好公有云的计费需要投入大量的资源，更需要丰富的经验。现阶段的计费模式还存在诸多不合理的地方，还有很多可改进的空间。预计随着公有云的进一步发展，可能会逐渐淘汰目前计费方法，出现更多更灵活的计费模型。最终的发展方向肯定是实现”Pay As You Go“的终极理想！</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://dzone.com/articles/deceptive-cloud-efficiency-do-you-really-pay-as-yo" target="_blank" rel="noopener">Deceptive Cloud Efficiency: Do You Really Pay as You Use?</a></li></ul>]]></content:encoded>
      
      <comments>http://michael-j.net/2018/05/29/%E6%BC%AB%E8%B0%88%E5%85%AC%E6%9C%89%E4%BA%91%E8%AE%A1%E8%B4%B9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>架构设计入门</title>
      <link>http://michael-j.net/2018/04/23/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8/</link>
      <guid>http://michael-j.net/2018/04/23/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8/</guid>
      <pubDate>Mon, 23 Apr 2018 11:14:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近在团队内部分享了一些关于架构设计方面的基础知识，特此分享一下。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近在团队内部分享了一些关于架构设计方面的基础知识，特此分享一下。</p><a id="more"></a><p>分享链接：<a href="https://pan.baidu.com/s/1GXkudSSD-az03wRf6IXj2g" target="_blank" rel="noopener">https://pan.baidu.com/s/1GXkudSSD-az03wRf6IXj2g</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2018/04/23/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%85%A5%E9%97%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>蜂巢计费系统架构升级之路</title>
      <link>http://michael-j.net/2017/12/15/%E8%9C%82%E5%B7%A2%E8%AE%A1%E8%B4%B9%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%8D%87%E7%BA%A7%E4%B9%8B%E8%B7%AF/</link>
      <guid>http://michael-j.net/2017/12/15/%E8%9C%82%E5%B7%A2%E8%AE%A1%E8%B4%B9%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%8D%87%E7%BA%A7%E4%B9%8B%E8%B7%AF/</guid>
      <pubDate>Fri, 15 Dec 2017 06:26:26 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;蜂巢计费系统为网易云基础服务（网易蜂巢）提供整体的计费服务，业务范围涵盖完整的产品售卖流程，包含定价、订单、支付、计费、结算、优惠、账单等主体功能，支持十几种不同产品的售卖，产品形态上贯穿了IaaS、PaaS和SaaS类别。同时，计费方式还提供了了按量、包年包月、资源包等多种方式。该项目的业务范围之广，玩法种类之多，数据要求之严注定了它将成为一个烫手的山芋，而且还是一个吃力不讨好的工作。&lt;/p&gt;
&lt;p&gt;该项目在人员上已经几经易手，就我所知，已经换过两拨完整的开发和测试团队了，而且已经全部离职。不得不说，该项目已经变得令人谈之色变，让人敬而远之。在这样的背景下，后期接手的开发和QA不得不硬着头皮上，踩着雷过河，小心翼翼的应对着不断涌来的业务需求。随之而来的是高居不下的bug率，越来越难以维护的代码，无法扩展的架构问题，我们开始意识到这样下去是不行的。于是我们从8月份开始了漫漫的架构升级之路。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>蜂巢计费系统为网易云基础服务（网易蜂巢）提供整体的计费服务，业务范围涵盖完整的产品售卖流程，包含定价、订单、支付、计费、结算、优惠、账单等主体功能，支持十几种不同产品的售卖，产品形态上贯穿了IaaS、PaaS和SaaS类别。同时，计费方式还提供了了按量、包年包月、资源包等多种方式。该项目的业务范围之广，玩法种类之多，数据要求之严注定了它将成为一个烫手的山芋，而且还是一个吃力不讨好的工作。</p><p>该项目在人员上已经几经易手，就我所知，已经换过两拨完整的开发和测试团队了，而且已经全部离职。不得不说，该项目已经变得令人谈之色变，让人敬而远之。在这样的背景下，后期接手的开发和QA不得不硬着头皮上，踩着雷过河，小心翼翼的应对着不断涌来的业务需求。随之而来的是高居不下的bug率，越来越难以维护的代码，无法扩展的架构问题，我们开始意识到这样下去是不行的。于是我们从8月份开始了漫漫的架构升级之路。</p><a id="more"></a><h2 id="重新出发"><a href="#重新出发" class="headerlink" title="重新出发"></a>重新出发</h2><p>在我们开始优化架构之前，我们重新梳理了计费系统完整的业务，得到了如下图所示的业务领域：</p><img src="/2017/12/15/蜂巢计费系统架构升级之路/biz-arch.png" title="业务领域"><p>梳理以后发现，计费系统承载了太多非计费的业务，包含订单、账单、结算和代金券等，这些业务代码散落在各处，没有严格地业务边界划分，而是“奇迹般”的融合在了一个工程里面。造成这个局面的原因在于计费系统初版设计时，根本没有考虑到这些问题，当然也不可能考虑到，而在后面逐步地迭代过程中，也未能去及时地调整架构，架构腐化不是一天内完成的。当然，这方面有部分技术的原因，也有部分人为的原因所在，因为当时负责计费系统的开发就只有一人，还是刚毕业的同学。目前看来，也是难为这位同学了。</p><p>技术债务的问题不是小事，千里之堤毁于蚁穴。既然我们找到了问题的症结所在，那么解决的方式也就显而易见了，一个字：拆！我们分析了所有的业务，订单是最大也是最复杂的一个业务，而结算和账单考虑到后期有可能迁移到云支付团队，我们决定优先把订单系统拆分出去！</p><h2 id="拆分的阵痛"><a href="#拆分的阵痛" class="headerlink" title="拆分的阵痛"></a>拆分的阵痛</h2><p>订单拆分说起来容易，做起来难。套用一句业界常说的话，就是开着飞机换轮胎。因为在我们拆分的同时，不断地有新的业务需求进来，还有一些bug需要处理，所以不太可能让我们专门进行拆分的工作。因此，为了不影响正常的业务迭代，我们决定拉出独立分支进行开发。我们分出两人专门处理拆分的工作。</p><p>为了最小化风险，订单拆分我们分了两步进行：一，模块独立；二：系统独立。</p><h3 id="模块独立"><a href="#模块独立" class="headerlink" title="模块独立"></a>模块独立</h3><p>模块独立是将订单的代码首先在工程内部独立出来，我们采用独立Module的形式，将订单独立成了一个Order的模块。它拥有完全独立的服务层、业务层以及持久化层。其他模块可以依赖Order，而Order不能依赖除公共模块外的其他业务模块。整体的模块划分如下图所示。模块的拆分过程中我们也发现了原先很多不合理的地方，例如：其他服务直接操作订单的持久化层(DAO)、模块直接依赖关系混乱、Service所在的Pacakge不合理、存在大量无用的代码和逻辑、随意的命名等。我们边拆分边重构，虽然进度比预期要缓慢一些，但整体上在向着合理的方向进行。</p><img src="/2017/12/15/蜂巢计费系统架构升级之路/module-indepent.png" title="模块拆分"><p>模块独立的过程中我们遇到了业务层级关系的问题。由于订单模块不再依赖于其他业务模块，而又有一些业务逻辑是由订单触发的，需要在计费模块完成，我们又不能直接调用计费模块的Service。针对这个问题，我们采用了<code>领域事件</code>的方式来解耦，简单来说就是订单通过发布事件的方式来与其他模块进行通信，当时实现的代码其实也相当简单，可以参考:<a href="https://gist.github.com/mymonkey110/aba58de452928bec2243848bb2c9b84a。" target="_blank" rel="noopener">https://gist.github.com/mymonkey110/aba58de452928bec2243848bb2c9b84a。</a></p><p>我们并没有独立拆分web层，因为系统还没有独立，web层作为统一的打包入口也承载着订单的流量。而且，Controller层的逻辑相对比较简单，完全可以在系统独立时再做。通过大家的努力，8月底订单已独立模块的方式上线了，一切正常。</p><h3 id="系统独立"><a href="#系统独立" class="headerlink" title="系统独立"></a>系统独立</h3><p>模块拆分完成后，仅接着就是系统独立，此时我们需要将订单系统独立部署。这里一个关键的问题是，独立部署意味着单独提供服务，而依赖订单系统的业务方非常之多，包含前端、主站、大部分的PaaS业务和计费，都有需要直接依赖订单接口的地方，冒然独立风险很大。针对这个问题，我们采用使用haproxy七层转发代理来将流量分发到不同的vip来解决。虽然，在上线过程中遇到了一些坎坷，但最终还是成功了。现在看来这个选择是非常对的，因为这样可以在业务方无感知的情况下平滑升级。但长远来看，最终我们还是以独立的vip对外保留服务。</p><img src="/2017/12/15/蜂巢计费系统架构升级之路/deploy-indepent.png" title="独立部署"><p>订单和计费直接我们采用RabbitMQ来完成主体通信，关于采用MQ还是HTTP调用我们内部还进行了一番争论。之所以最终还是采用MQ来进行通信，是因为我们发现很多业务流程并不需要计费系统立即响应（大部分流程都是订单触发的），也就是我们常说的弱依赖。另外，职责上计费系统的响应的质量也不应影响到订单的主体流程，举个例子：用户支付了一个云主机的订单，如果计费系统此时无法响应，业务上相对来说可以接受过一小会儿计费再处理，而不是把订单直接退款给用户。MQ的引入在技术和职责层面都将订单和计费分的更开了。当然，强依赖的服务是我们无法避免的，其中之一就是结算模块还留在计费中，订单需要通过接口调用结算服务来完成支付。</p><p>前期，我们在模块独立时采用事件解耦的方式，在此时也获得了收获。我们通过一个统一的转化层，将那些事件直接转化层RabbitMQ可以识别的消息，这样代码的改造工作就大大减少了。</p><p>系统独立后一个直接的表象就是每个系统的代码行数大大降低了。独立前，整体的代码行数已经达到了12W行以上（包含配置文件），独立后，计费系统降低到了10W以下，订单维持在4W以下。代码行数的降低将直接提高系统的可维护性。个人认为如果一个工程里的代码超过10W行，那么维护性将大大降低，除非是那些有着严格自律意识的团队，否则，我建议还是尽量降低代码行数。</p><p>经过大家一个月的努力，订单系统终于已独立的姿态提供服务了。过程很艰辛，但是收获良多。</p><h3 id="拆分的收获"><a href="#拆分的收获" class="headerlink" title="拆分的收获"></a>拆分的收获</h3><p>订单独立后，一个直接的好处就是我们能独立的思考问题了，这在以前是很难做到的一件事情，因为大家不得不小心翼翼的处理那些依赖，做事会畏手畏脚的。另外一个好处就是，我们的工作可以有侧重点的进行了。订单业务可以说是产品最为关注的业务，也是计费对外暴露的主要入口。<br>下图就是我们在拆分后规划订单的业务架构，大家对后期的订单规划充满期待。</p><h2 id="多Region的挑战"><a href="#多Region的挑战" class="headerlink" title="多Region的挑战"></a>多Region的挑战</h2><p>公有云产商面临的一大挑战就是多Region环境的支持。普通的互联网行业出于高可用的考虑，往往会把核心系统部署到多个机房，然后根据自己的实际应用场景选择冷备、双活甚至三活。我们经常听到的“两地三中心”、“三地五中心”等等高大上的名词就是代多机房高可用的缩影。这些行业做多机房部署的主要目的是为了提高系统的可用性，不是其业务的必须属性。换句话说，他们不做多机房部署也可以，做了当然更好。而公有云产商不一样，多Region部署就是其行业属性之一。如果哪个云产商不提供多region产品的支持，那么它肯定是不完整的。不得不承认，我们在这方面的经验是比较欠缺的，在多Region的支持上走了一些弯路。</p><h3 id="摸着石头过河"><a href="#摸着石头过河" class="headerlink" title="摸着石头过河"></a>摸着石头过河</h3><p>今年上半年的时候，蜂巢开始计划启动北京Region，预计年中交付，当时对我们横向业务提出了很大地技术挑战。一是在于横向系统设计之初并没有考虑到对Region环境的支持，我们很被动；二是我们并没有跨Region系统设计的经验，我们很着急。计费系统面临的问题更加严重，因为它对数据的一致性要求更高，而且出错地影响范围也更大。而且当时计费的技术债务已经很高了，产品的需求列表也拍了很长，套用一句很形象的话说，“留给我们的时间不多了”。</p><p>在这种情况下，我们“胆战心惊”的给出了第一版的多Region设计方案，主体架构如下所示：</p><img src="/2017/12/15/蜂巢计费系统架构升级之路/double-region.png" title="双region架构"><p>因为当时计费系统还没有拆分，所有的业务都在一个系统中完成的，就是我们常说的“大泥球”系统。这种情况下我们很难做到多Region部署，订单和账单其实只有在一个Region部署就可以了，而计费的数据采集和请求分发是要下沉到各个Region的，而计算过程可以集中完成。采用”双主”同步复制的方案实则是无奈之举。数据库的同步只能基于实例级别，而无法细分到表，我们各Region中计费数据库中存在资源的计量表，这个数据需要同步到杭州Region来完成。为了避免“脑裂”的问题，我们特别将该表的主键采用UUID的形式。存量表因为无法做大规模修改，我们通过限制北京MySQL用户的权限来避免写入和修改全局表。</p><p>这个设计很糟糕，但是当时的条件限制，我们也拿不出更好的设计了。虽然上线的过程有些曲折，当这个架构还是成功运行了，这是令我们最为欣慰的事情。因为为了适配这个架构，团队的小伙伴做了很多工作。不可否认，这个架构存在诸多弊端，其中最大的隐患就在于数据库的“双主”同步，这就像一颗随时会爆的炸弹萦绕在我们心头。当时专线还没有搭建好，所有的流量均通过外网隧道代理，糟糕的网络质量无疑放大了这个风险。为此，DBA们向我们吐槽了好久，幸好我们抗打击能力很强。</p><h3 id="涅槃重生"><a href="#涅槃重生" class="headerlink" title="涅槃重生"></a>涅槃重生</h3><p>在做完双Region的支持以后，计费团队就继续做产品需求了，因为架构调整导致需求列表已经很长了。而且当时也说的是，短期内（至少今年）不会再有第三个Region了，我们也想着快点做完，多花点精力投入到重构中。但是计划赶不上变化，9月底我们被通知到第三个Region来了，而且已经被提高到第一优先级支持了。</p><p>有了第一版双Region的经验，这一次我们淡定了很多。当然，我们不可能在沿用第一版的设计了，因为DBA就会跟我们拼命的。回过头来梳理多Region支持面临的问题时，我发现一开始我们就自己给自己挖了一个坑，然后往里面跳。横向支撑系统显然都需要对所有Region提供支持，但这并不代表其需要在各个Region内部署(我还与团队其他的小伙伴分享了这方面的想法，网上应该还能找到这一次分享的ppt——《跨Region实践初探》)。因为公有云产商经常会提供多个Region的服务，有得甚至达到几十个Region，如果横向支持系统每个Region都要全量部署的话，那么我们花在运维上的精力就可以拖垮我们，更不要说还有最为困难的数据的一致性问题。</p><p>其实多Region的支持的问题我们总结出主要表现在一下两个方面，一是应用层面的接口互通；二是底层数据库的同步。</p><img src="/2017/12/15/蜂巢计费系统架构升级之路/region-core-problem.png" title="2个核心问题"><p>我们先说底层数据库的同步，对计费系统而言，数据的一致性是至关重要的，但多机房部署是在挑战CAP定律。是不是就没有了这样的数据库方案了呢，有，那就是Google的Spanner，号称可以在全球做到强一致的数据库。但是我们没有这样的数据库。其实我们也考虑使用NoSQL数据库——Cassandra，但是这个数据库运维起来太复杂，我们也没有这方面的经验，也就放弃了。还是回归到MySQL，受限于传统关系型数据库在扩展性方面的问题，我们不可能把整个库在各个Region都同步一份。但是计费原始数据又必须在各个Region内收集，于是我们决定——拆，把计费拆层两个部分，分为bill-agent(数据采集)和bill-central(数据计算)两个部分。</p><img src="/2017/12/15/蜂巢计费系统架构升级之路/region-new-arch.png" title="新计费多region架构"><ul><li>Bill-Agent负责Region内日志的收集和简单聚合。</li><li>Bill-Central负责日志收集外的全局事务处理。</li></ul><p>通过这样的拆分，架构就清晰多了。再多加Region，我们只需要部署Bill-Agent就可以了。Bill-Agent将处理过的计费数据写入本地库的一张资源表，利用NDC（马进在网上分享过关于这个中间件的介绍）将资源表单向同步到Bill-Central的中央库，然后Bill-Central统一在对计费数据进行处理。有意思的是，这张资源表就是我们在第一版设计中新建的资源表，因为我们将主键修改为UUID，所有使用NDC同步表的方案是相当顺利的。当然，NDC在我们其他项目的跨Region支持上也发挥了重要作用，比如：跨机房缓存更新的问题。这一版的数据库方案在技术评审时大家都比较满意，DBA也肯定了我们的方案。</p><p>现在再来看跨Region调用的问题。在多Region的横向系统中，我们发现或多或少的存在着机房间的接口调用问题。这些问题有可能是某些Region的库不能写需要路由到主库来写导致的，也有可能是全局缓存的问题，还有就是Global业务向Region内服务发送指令。计费属于最后一种场景，我们有一些业务场景需要由杭州Region触发，然后调用各个Region内的服务的接口。在第一版的实现中，计费系统自己实现了跨Region代理部分，但是实现的不是很好，代码的可维护性比较差，加重了调试的难度。这一版的设计中，我们决定把跨Region接口代理单独拿出来重新做，结合多Region的应用场景，然后封装一些非功能性的特性，这就成了后面我们很重要的一个组件——RegionProxy。</p><p>RegionProxy最开始是为了解决跨Region调用的非功能性问题，简化应用系统处理的成本。但是设计上经历了比较大的调整。最开始的设计我们是希望Region内所有跨Region的HTTP调用都能通过RegionProxy来代理，RegionProxy之间能够发现对方并且相互通信，那么Region内的应用系统就只需要与本Region的RegionProxy通信就可以调到任意一个Region的应用系统了。但是在方案评审的过程中，我们发现如果都用RegionProxy代理，可能会导致跨Region调用多出一跳或者两跳，调试可能会比较困难。后来，我们放弃了这个方案。再后来，我们发现ServiceMesh的方案和我们最初RegionProxy的方案是十分相似的。</p><p>在RegionProxy的设计上我们进行了简化处理，我们将所有Region的业务系统录入到一个全局的配置中心(我们自己开发的ConfigCenter)中，然后通过一个自己开发的一个HttpProxy的Java库来与ConfigCenter通信来完成跨Region的调用。这样做的好处就是使用方用起来比较轻量，但是在网络连通性方面我们需要与所有Region的系统做到互通。在开发Proxy库的时候，我们不仅对跨Region的HTTP调用进行了封装，而且对普通的HTTP调用也加入了非功能性的封装，这样系统可以通过Proxy库完成所有的HTTP调用请求，极大的简化了代码的维护成本。后面，我们使用RegionProxy来代理请求后，确实删除了很多以前的无用代码，整体流程上也清晰了许多。</p><h3 id="多Region的感悟"><a href="#多Region的感悟" class="headerlink" title="多Region的感悟"></a>多Region的感悟</h3><p>经过两版多Region的改造，我们确实收货了很多宝贵的经验，非常难得。实际上，在多Region的支持上，大家需要清晰地认识到为什么要支持多Region，以何种方式去支持多Region，多Region支持与高可用的关系等基本问题。如果这些问题回到不好，或者不清楚，那么很容易就会掉到陷阱中去。另外一个感悟就是结合业务的实际场景，第二版的多Region架构我们之所以能够这么设计，就在于计费系统不需要实时出账，我们完全可以把数据保存下来，离线计算以后再出账，这是可以接受的。但这并不适用与所用情况，有些性能要求很高的横向业务就不适合这种场景。</p><h2 id="拿来主义"><a href="#拿来主义" class="headerlink" title="拿来主义"></a>拿来主义</h2><p>前面提过几次技术债务的问题，有些问题是可以通过工具来解决了，有些只能通过内部重构来解决。左耳朵耗子曾经说过一句话对我感触很大，大意是说有些公司在解决问题时偏流程，有些公司偏技术。我想我们既然是技术团队，在解决问题时能通过技术方式解决的就应该尽量用技术解决，流程和人都是不可靠的。</p><h3 id="难以管理的配置文件"><a href="#难以管理的配置文件" class="headerlink" title="难以管理的配置文件"></a>难以管理的配置文件</h3><p>计费项目面临的诸多问题之一就有配置文件的管理，因为业务流程的原因，计费系统有着大量的各种各样的配置。以前我们把配置文件放到工程里面，通过自动化部署平台来指定使用不同的配置文件。这样做的一个显著问题就是代码和配置耦合起来了，每次修改什么配置都得提交代码，而我们提交又有着一套严格地流程，导致整体效率不高。另外一个问题就是可视化的问题。往往QA在线下环境测试都是通过的，而上线以后出了问题，基本上都是配置导致的问题。针对这几个的问题，我们决定使用<a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">Apollo</a>来管理我们的配置，通过整合Apollo，我们的两个项目（订单和计费）都做到了工程零配置，所有的配置都放到Apollo上进行管理，好处良多。</p><img src="/2017/12/15/蜂巢计费系统架构升级之路/apollo.png" title="apollo配置管理"><h3 id="替换定时任务框架"><a href="#替换定时任务框架" class="headerlink" title="替换定时任务框架"></a>替换定时任务框架</h3><p>计费系统严重依赖于定时任务，有许多流程需要通过定时任务来推动。以前我们使用QUARTZ+MYSQL来作为我们分布式定时任务框架，但是这种做法的可维护性太差，而且对数据库侵入很高，对测试也不友好。在QA的不断吐槽中，我们决定替换掉现有的定时任务框架。在调研开源的定时任务框架后我们决定使用<a href="https://github.com/elasticjob/elastic-job" target="_blank" rel="noopener">Elastic-Job</a>来作为我们的分布式定时任务框架。目前，我们的两个项目的所有定时任务（除bill-agent外)都已迁移到Elastic-Job上来了。</p><img src="/2017/12/15/蜂巢计费系统架构升级之路/elastic-job.png" title="Elastic-Job定时任务"><h2 id="抽象化设计"><a href="#抽象化设计" class="headerlink" title="抽象化设计"></a>抽象化设计</h2><p>如果你要问我做蜂巢计费最困难的地方是什么？我的回答肯定是业务太复杂了。这种复杂性不是因为我们架构设计的不好导致的复杂，而是业务本身就是十分复杂的。现在计费系统需要支持十几种产品的售卖形式，涵盖IaaS、PaaS和SaaS的绝大部分产品，同时各个产品的售卖和计费模式都存在或多或少的差异，这让我们很难通过一个统一的模型就涵盖所有的场景。我们找到了一条缓解这个问题的方式——抽象化。</p><p>横向系统或者支持系统如果需要服务多个产品，那么抽象化设计是不可或缺的一个缓解。如果越早进行抽象化，那么后期对接和维护的成本也就会越低，还能把系统的边界划分得更清晰。计费系统早期的设计在抽象化方面没有过多的规划，在后期的对接方面又处于比较弱势的一方，导致计费系统出现了大量的特化代码。这些特化代码对一个服务十几个产品的支持系统无疑是伤害巨大的。现在我们已经意识到了问题的严重性，也着手在做这方面的重构工作了。但是挑战依然很大，因为业务的复杂性是无法通过技术手段就能降低的，这方面我们只有和产品、运营和销售各方面一起努力，打造一个合理、灵活、稳定的新计费。</p><p>抽象化设计因为我们还在进行中，后期有机会再分享。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从八月底加入计费团队以来，收获良多，无论是在技术上，还是在对业务的理解上，都有了许多新的认识。最为给力的还是团队的小伙伴们，因为计费本身的需求非常多，处理这些需求人都只刚刚够。后来我们又做了两版跨Region改造、订单拆分、框架替换、抽象化等优化工作，迭代周期从两周一次压缩到了一周一次，开发和QA的小伙伴也都是任劳任怨。当然，大家能在这个过程中有所收获才是最关键的。</p><p>计费系统可以说是我接触过的最为复杂的一个系统，越是复杂的系统越需要清晰的头脑和良好的设计。云计算产商的博弈已经到了白热化阶段了，大家拼的不光光是每个产品的质量和体验，还有整个云平台的内功。公有云平台本身就是一个庞大、复杂的系统，如何把这个系统建设好，用户体验做好、服务质量提高、稳定性得到保障，这本身就是极为有难度的一件事情。计费系统作为公有云平台一个重要的组成部分，可以说扮演着一个极为关键的角色。做得好可以对整个平台提供助力，而做的差则会拖慢整体的发展进程。我们已经找到了适合自己的一条道路，相信会走上正轨！</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/12/15/%E8%9C%82%E5%B7%A2%E8%AE%A1%E8%B4%B9%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%8D%87%E7%BA%A7%E4%B9%8B%E8%B7%AF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>编程心智(二)——二八定律对软件开发的影响</title>
      <link>http://michael-j.net/2017/11/03/%E7%BC%96%E7%A8%8B%E5%BF%83%E6%99%BA-%E4%BA%8C-%E2%80%94%E2%80%94%E4%BA%8C%E5%85%AB%E5%AE%9A%E5%BE%8B%E5%AF%B9%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E5%BD%B1%E5%93%8D/</link>
      <guid>http://michael-j.net/2017/11/03/%E7%BC%96%E7%A8%8B%E5%BF%83%E6%99%BA-%E4%BA%8C-%E2%80%94%E2%80%94%E4%BA%8C%E5%85%AB%E5%AE%9A%E5%BE%8B%E5%AF%B9%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E5%BD%B1%E5%93%8D/</guid>
      <pubDate>Fri, 03 Nov 2017 12:49:13 GMT</pubDate>
      <description>
      
        &lt;p&gt;相信很多人都听说过二八定律，这是一个适用性非常广泛的定律。我发现二八定律同样适用于软件开发，并对其产生了十分深远的影响。这次我想聊聊二八定律是如何影响我们日常的开发工作的，希望通过这个话题来改变一下大家习以为常的开发思维。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>相信很多人都听说过二八定律，这是一个适用性非常广泛的定律。我发现二八定律同样适用于软件开发，并对其产生了十分深远的影响。这次我想聊聊二八定律是如何影响我们日常的开发工作的，希望通过这个话题来改变一下大家习以为常的开发思维。</p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>二八定律是19世纪末20世纪初意大利经济学家巴莱多发现的。他认为：</p><blockquote><p>在任何一组东西中，最重要的只占其中一小部分，约20%，其余80%尽管是多数，却是次要的，因此又称二八定律。</p></blockquote><p>二八定律有相当广泛的普适性，不论是在生活中，还是在工作上，只要你细心观察，都会发现其身影。</p><h2 id="功能需求对软件开发的影响"><a href="#功能需求对软件开发的影响" class="headerlink" title="功能需求对软件开发的影响"></a>功能需求对软件开发的影响</h2><p>不知道大家有没有发现这样一个事实，随着我们系统要处理的业务功能越来越多，我们添加一个新功能的代价也越来越大。很有意思，我发现业务功能与添加一个新功能要做出的努力呈现出类似于下图所示的关系。</p><img src="/2017/11/03/编程心智-二-——二八定律对软件开发的影响/effort-feature.png" title="effort-feature"><p>起初，为了使得一个新系统能运行，我们不得不处理一些非业务性的工作，比如搭建框架、技术选型、架构设计、部署结构设计、资源申请等等。而一旦这些基础性的工作完成，那我们就可以快速的完成业务需求。大概花费我们20%的精力就可以满足80%的业务功能，这些业务功能也是系统的主要功能。但是再往后新增功能，所要做出的努力就会成指数增长。这张图与<a href="https://www.amazon.cn/%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E7%A6%8F%E5%8B%92/dp/B003LBSRDM/ref=sr_1_1?qid=1509850680" target="_blank" rel="noopener">P o EAA</a>中的领域逻辑复杂度与工作量之间的关系类似。当然，这个曲线并不是绝对的，影响这条曲线的关键在于系统的代码架构，好的代码架构能让你在处理复杂的业务需求时更加从容。（题外话，我认为一个优秀的程序员应该具备处理复杂需求的能力。）</p><p>既然我们发现了这个规律，是否能指导我们的日常开发工作呢？答案是肯定的。因为80%的功能基本已经满足了大部分人的需求，而为了满足少数人的需求而增加80%的努力是不值得。当然，公司完全有理由要求你这么做，与此同时你也可以把这个利害关系介绍给他们听。</p><p>甚至在细分到x轴和y轴，我们可以继续运用二八定律来分解。80%的业务功能其实大概只有20%是核心功能，其余的只是为了优化体验或者简化流程为存在的；而对于20%的努力而言，其中80%的工作主要集中在满足核心的业务需求而存在的，我们应该也必须投入这么多精力来设计并开发这些功能，因为它们是整个系统的核心。</p><h2 id="性能优化对软件开发的影响"><a href="#性能优化对软件开发的影响" class="headerlink" title="性能优化对软件开发的影响"></a>性能优化对软件开发的影响</h2><p>程序员总是对性能优化这个话题充满激情，好像这成了唯一彰显其技术能力的手段。确实，要把应用系统的性能优化到极致，确实要付出大量的努力。但实际上性能优化所付出的努力与取得的效果也符合二八定律。其工作量与索取的效果类似于下图所示。</p><img src="/2017/11/03/编程心智-二-——二八定律对软件开发的影响/effort-performance.png" title="effort-performance"><p>不消多说，凡是做个性能优化的同学应该都会有这样的感触：只用加个索引或者加上缓存就可以使得系统的性能大幅度提供。使用常规的优化手段（大概耗费20%的精力）就可以取得显著的效果（提升80%的性能）。但是要取得另外20%的性能提升要付出努力将大大增加。掌握这个规律相信大家应该知道如何“使力”了。</p><h2 id="项目人数对开发效率的影响"><a href="#项目人数对开发效率的影响" class="headerlink" title="项目人数对开发效率的影响"></a>项目人数对开发效率的影响</h2><p>还一个比较显著的符合二八定律的场景就是在项目管理上。</p><img src="/2017/11/03/编程心智-二-——二八定律对软件开发的影响/people-progress.png" title="people-progress"><p>同时参与一个项目的人并非越多越好，实际上影响应项目进度只取决于少数人（20%），后面增加更多的人其实收效甚微。我个人也是倾向于不要在一个项目上投入过多的人力，要精不要多。现在微服务这么流行，我觉得也有类似地影响。它在架构层面把一个大系统拆分成一个一个小服务，让每个服务有少数几个人负责，这样整体的开发效率会更高。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>类似上面的例子还有很多，比如迭代周期对软件质量的影响、服务数量对整体可用性的影响等等，只要你细心观察就会发现二八定律在我们的日常开发工作中无处不在。更为重要的是，我们不仅要发现其存在，更要在那20%的重点上下功夫，避免在80%的事情上瞎费劲。</p><p>（文中配图是我用Windows的画图程序生成的，不好看望大家见谅。）</p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="https://baike.baidu.com/item/%E4%BA%8C%E5%85%AB%E5%AE%9A%E5%BE%8B/747076?fr=aladdin" target="_blank" rel="noopener">二八定律</a><br><a href="https://www.amazon.cn/%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F-%E7%A6%8F%E5%8B%92/dp/B003LBSRDM/ref=sr_1_1?qid=1509850680" target="_blank" rel="noopener">企业架构模式</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/11/03/%E7%BC%96%E7%A8%8B%E5%BF%83%E6%99%BA-%E4%BA%8C-%E2%80%94%E2%80%94%E4%BA%8C%E5%85%AB%E5%AE%9A%E5%BE%8B%E5%AF%B9%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E5%BD%B1%E5%93%8D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>编程心智(一)——代码架构与系统架构</title>
      <link>http://michael-j.net/2017/09/24/%E7%BC%96%E7%A8%8B%E5%BF%83%E6%99%BA-%E4%B8%80-%E2%80%94%E2%80%94%E4%BB%A3%E7%A0%81%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</link>
      <guid>http://michael-j.net/2017/09/24/%E7%BC%96%E7%A8%8B%E5%BF%83%E6%99%BA-%E4%B8%80-%E2%80%94%E2%80%94%E4%BB%A3%E7%A0%81%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</guid>
      <pubDate>Sun, 24 Sep 2017 12:00:27 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;写在开头的话&quot;&gt;&lt;a href=&quot;#写在开头的话&quot; class=&quot;headerlink&quot; title=&quot;写在开头的话&quot;&gt;&lt;/a&gt;写在开头的话&lt;/h2&gt;&lt;p&gt;想写这个系列文章很久了，但是对于一个重度的拖延症患者来说，决定写一个系列文章还是颇有挑战。最开始，只想写一两片文章分享一下自己对于编程的感悟。但随着时间越拖越久，发现想写的东西越来越多。直到今天，居然发现我的博客的To-Do-List（目前我在使用&lt;code&gt;WunderList&lt;/code&gt;，很好用的一个To-Do-List工具)文章数达到了10篇，终于说服自己动笔了。&lt;br&gt;“编程心智”这个词这段时间一直萦绕在我的脑海中，我觉得这个词最能表达我想分享了内容了。我希望通过这个系列文章分享自己对于代码、编程、架构以及软件工程的理解与感悟，另外，还有隐藏在代码后面的程序员心智。所有文章仅代表个人观点，没有是非对错的标准。如果你对文章中的观点不认同，还请给我留言，不同的声音对于进步有着极大的促进。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="写在开头的话"><a href="#写在开头的话" class="headerlink" title="写在开头的话"></a>写在开头的话</h2><p>想写这个系列文章很久了，但是对于一个重度的拖延症患者来说，决定写一个系列文章还是颇有挑战。最开始，只想写一两片文章分享一下自己对于编程的感悟。但随着时间越拖越久，发现想写的东西越来越多。直到今天，居然发现我的博客的To-Do-List（目前我在使用<code>WunderList</code>，很好用的一个To-Do-List工具)文章数达到了10篇，终于说服自己动笔了。<br>“编程心智”这个词这段时间一直萦绕在我的脑海中，我觉得这个词最能表达我想分享了内容了。我希望通过这个系列文章分享自己对于代码、编程、架构以及软件工程的理解与感悟，另外，还有隐藏在代码后面的程序员心智。所有文章仅代表个人观点，没有是非对错的标准。如果你对文章中的观点不认同，还请给我留言，不同的声音对于进步有着极大的促进。</p><a id="more"></a><p>选择“代码架构与系统架构”作为第一篇文章是因为我发现很多人对“架构”的误解很深，而且国内关于“代码架构”的分享和书籍凤毛麟角，似乎只有流弊的“系统架构”才能成为谈资。我不太能理解这个现象，好像大部分人都完全不用操心“如何写好代码”这回事，似乎只要有一个看上去比较“完美”的系统架构就能解决所有的事情。但根据我的实际经验，现实情况往往不是这样，有时候甚至相反。有些项目的系统架构图画的非常“漂亮”，引入了很多新潮的技术，每个组件都划分的很清楚，系统之间如何通信，模块之间如何引用等等都一目了然。但是当你去看项目的真实代码时，完全是另外一番景象。至于为什么会这样，我想很大一部分原因是“系统架构图”已经沦为了一种满足KPI考核手段，而通常你的老板不会深入地去理解你的代码，更不要说指出其中的问题了。</p><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>相信很多人对系统架构都不陌生，只要是从事软件开发领域的人，或多或少都接触过系统架构。系统架构最直观的表现就是系统架构图，下图就是一张系统架构图，摘自李智慧老师<a href="https://www.amazon.cn/dp/B00F3Z26G8/ref=cngwdyfloorv2_recs_0?pf_rd_p=7149a3bb-2ee6-4f99-92eb-d87852365f8c&amp;pf_rd_s=desktop-2&amp;pf_rd_t=36701&amp;pf_rd_i=desktop&amp;pf_rd_m=A1AJ19PSB66TGU&amp;pf_rd_r=R2PPN3T6JNKNPP0HTHWS&amp;pf_rd_r=R2PPN3T6JNKNPP0HTHWS&amp;pf_rd_p=7149a3bb-2ee6-4f99-92eb-d87852365f8c" target="_blank" rel="noopener">大型网站技术架构:核心原理与案例分析</a>。</p><img src="/2017/09/24/编程心智-一-——代码架构与系统架构/部署架构图.png" title="部署架构图"><p>系统架构是一个比较大的概念，从技术角度来看，它往往以部署架构图的形式出现（上图就是）；而换到业务视图，它又以另外一种形式出现，如下图。</p><img src="/2017/09/24/编程心智-一-——代码架构与系统架构/业务架构图.png" title="业务架构图"><p>不论是部署架构图还是业务架构图，它们都反映了系统与系统之间的一种关联关系，从更加宏观的角度反映系统在全局中的作用和定位。如果你是某个系统的开发者或者负责人，那么你的系统会在系统架构图中以一个方框出现。通过系统架构图，你的老板和同事能很直观地了解到你的系统在全局中的位置以及你服务的层次。这样做有好处的，它降低了技术人员之间以及技术和业务人员之间地沟通成本。</p><p>实际上，关于系统采用什么样的中间件、何种数据库和缓存、选用哪种服务框架等等，甚至今年非常火的微服务架构，这些统统都属于系统架构的范畴。关于系统架构方面的书籍和文章已经非常多了，而且国内的分享也主要集中于此，我就不再这方面展开了。</p><h2 id="代码架构"><a href="#代码架构" class="headerlink" title="代码架构"></a>代码架构</h2><p>相比于系统架构，代码架构对很多人可能就陌生许多。我刚刚去Google一下，发现甚至没有关于“代码架构”的权威定义。那么什么是代码架构呢？打个比方，如果你的系统在系统架构图中只是一个方框，那么代码架构就是介绍这个方框是如何组成和实现的。代码架构的关注点在一个工程（Project）内部，它描述了你的整个工程代码是如何组织和实现的。简而言之，系统架构是宏观层面的体现，而代码架构是微观层面的体现。</p><p>在我的博客中有很多关于DDD的文章，而DDD本身就是一种代码架构。除此之外，还有MVC、CQRS、Event Souring等等。那么，设计模式是否也可以成为代码架构呢？在某种程度上是的，因为它可以指导你如何组织代码的实现，如何在代码层面解耦，但是，光光通过设计模式你无法组织起你的整个工程代码，所以从严格意义上讲，设计模式并不是一种代码架构。代码架构也可以通过图文的形式表现，不过这完全取决于你采用何种代码架构。下图是我目前负责的一个系统的代码架构，这个系统的核心在于策略语言（Policy）。</p><img src="/2017/09/24/编程心智-一-——代码架构与系统架构/六边形架构.png" title="六边形架构"><p>熟悉DDD的人一眼就可以看出来这是DDD种的经典六边形架构（题外话，至今我不太明白为什么是六边形）。如果你的工程采用MVC或者CQRS架构进行组织，可能会画出完全不一样的架构图。我很庆幸，在我正式的职业编程生涯的早期接触到了DDD这种编程思想，它对我的编程生涯影响很大，让我少走了很多弯路。如果你还没有接触过DDD，我希望你能立马买一本<code>Eric Evans</code>的<a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01GZ6T12K/ref=sr_1_1?ie=UTF8&amp;qid=1506266953&amp;sr=8-1&amp;keywords=%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">领域驱动设计:软件核心复杂性应对之道</a>，细细研读此书，字里行间都体现着作者对软件开发的深刻理解。</p><p>为什么我说代码架构是如此的重要？是因为其奠定了大型系统的基石。我认为衡量一个优秀的程序员的能力之一就包含其对复杂问题的解决能力。现实的问题往往比理论复杂很多，很多时候需要妥协、折中、权衡和取舍，如何在这些取舍之中不影响到软件的核心，这需要大量的经验。当然，这是有规律可循的，那就是代码架构。</p><p>好的代码架构会帮助你理解你的业务，哪些部分是你系统的核心，哪些部分只是技术层面的实现。换句话说，好的代码架构不光能知道你如何去组织你的代码，还能加深你对系统的理解。反过来，随着你对系统理解的不断深入，你又能更好的调整你的代码以适应新的变化。是不是所有的项目都需要代码架构呢？这取决于你的问题域。如果你的项目仅仅是一个<code>Hello World</code>程序，又或者是一个数据采集脚步，那么使用代码架构来组织代码可能没什么作用，反而使得你的代码变得更加复杂和臃肿。那么什么情况下你需要使用代码架构呢？我认为只要满足以下两个条件就行。</p><ul><li><p>你有一个相对固定的业务场景。固定意味着你要处理的问题域是有边界的，比如订单系统、库存系统、用户中心等等，它们所要处理的问题是比较集中和固定的。</p></li><li><p>你要解决的问题相对比较复杂。这看上去本身就比较矛盾，因为“复杂”本身就是相对的。这里的复杂的意义在于，你要处理的问题领域本身就具有复杂性。也许起初问题本身并不复杂，但随着时间的推移，系统要处理的问题也越来越复杂了，这要求你对问题有一定的前瞻性。</p></li></ul><p>事实上，上面两个条件是很容易满足，之所以还列出来因为在实际的开发过程中，我确实遇到过在以上两点犯错的情况。这主要出现在刚刚开始正式编程生涯的毕业生，他们对业务和要做的事理解程度不够，如果有经验丰富的程序员带的话，可以避免走一些弯路。正是因为上诉条件门槛较低，所以代码架构的应用场景非常广泛。有可能你现在的项目就在使用MVC架构，只是你没有意思到。我建议程序员能有意识地去了解你的代码架构，深入的思考一下目前的代码组织方式是最为合理的吗？</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>说了这么多，希望自己把代码架构和系统架构的核心点说明白了。两者都非常地重要，但是应用的场景各不相同，两者结合使用才能让你做出一个高质量的系统。相比于系统架构，代码架构往往被人们所遗留，但这并不代表其不重要。依我之见，代码架构的应用场景更为广泛，因为大部分的公司和项目其实并不需要一个复杂和“高大上”的系统架构，而与我们日常交互最多的就是一行一行的代码。深入的了解你的项目代码是如何组织对程序员来说是十分重要的，好的代码架构能起到事半功倍的效果。最后，个人建议将代码架构纳入到KPI的评判之中，最为直观的表现就是“技术债务”。好的代码架构会把项目的技术债务维持在一个比较低的水平；相反，糟糕的代码结构会让项目的“技术债务”越滚越大，最终到了不可收拾的程度。不过，技术债务如何量化，以及是否需要量化，目前这方面有着很多不同的身影，但是，能意识到这个问题的存在，至少，我们在向高水平的软件开发者迈出了一大步。</p><h2 id="写在最后的话"><a href="#写在最后的话" class="headerlink" title="写在最后的话"></a>写在最后的话</h2><p>编程心智这个系列我会持续地更新，但更新时间就不确定了。前面也说了，我是一个重度的拖延症患者，而且，最近项目的事情很多，一个接着一个。我会努力做到一个月一篇的。</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/09/24/%E7%BC%96%E7%A8%8B%E5%BF%83%E6%99%BA-%E4%B8%80-%E2%80%94%E2%80%94%E4%BB%A3%E7%A0%81%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>再谈领域事件</title>
      <link>http://michael-j.net/2017/08/13/%E5%86%8D%E8%B0%88%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/</link>
      <guid>http://michael-j.net/2017/08/13/%E5%86%8D%E8%B0%88%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/</guid>
      <pubDate>Sun, 13 Aug 2017 11:11:14 GMT</pubDate>
      <description>
      
        &lt;p&gt;我以前写过一篇关于领域事件的文章——&lt;a href=&quot;http://michael-j.net/2016/01/19/%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/&quot;&gt;实现领域事件&lt;/a&gt;，随着在项目中深入的使用DDD架构，我对领域事件有了新的认识。尤其是采用领域事件来解耦代码这种方式对项目的发展具有深远的影响。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>我以前写过一篇关于领域事件的文章——<a href="http://michael-j.net/2016/01/19/%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/">实现领域事件</a>，随着在项目中深入的使用DDD架构，我对领域事件有了新的认识。尤其是采用领域事件来解耦代码这种方式对项目的发展具有深远的影响。</p><a id="more"></a><p>我在<a href="http://michael-j.net/2016/01/19/%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/">实现领域事件</a>中主要谈到了如何在技术层面去实现发布事件与订阅事件，比较了几种不同的方式以及它们背后的原理。但随着我在自己负责的项目中严格地实施DDD架构时，我发现如何去发布订阅领域事件的意义远没有决定去做这件事情本身重要。换句话说，与其纠结与是使用基于<code>Spring</code>的事件架构还是<code>Guava</code>提供的<code>EventBus</code>，是使用同步发布还是异步发布，还不如想想去做这件事情对你的项目会产生怎样的影响。</p><p>为什么要使用事件？我认为这是所有人应该考虑的首要问题。对我来说，使用事件的意义有两个方面，一是在于流程上的解耦，二是在于代码层面的解耦。在代码层面的解耦是显而易见的，我就不再赘述了。那么流程上的解耦是什么意思了？我们先看一下一个普通的业务流程执行的链路。</p><img src="/2017/08/13/再谈领域事件/couple.png" title="正常的业务流程"><p>目前我们绝大部分人的思维习惯是顺序式的，体现在代码上也就是<code>A</code>做完它做的事情然后<code>B</code>继续处理，当然这么做没有任何问题，这也是最为简单直观的一种编程方式。我们再来看一下通过<code>Event</code>来解耦的链路。</p><img src="/2017/08/13/再谈领域事件/decouple-with-event.png" title="通过事件来解耦"><p>通过引入事件，我们将过程A和过程B解耦了。第一种方式和第二种方式都有着其重要的存在意义，决定何时采用第二种方式的关键在于<a href="https://martinfowler.com/bliki/BoundedContext.html" target="_blank" rel="noopener">BoundedContext</a>。正好最近我在负责处理一个遗留系统的拆分问题，恰好有一个好的例子来说明这个问题。</p><p>这个遗留系统是一个计费系统，因为各种各样的原因，整个项目在代码层面非常混乱，代码之间各种凌乱的引用和交叉，这种感觉就和下图一样。</p><img src="/2017/08/13/再谈领域事件/一团乱麻.jpg"><p>我认为造成这个问题的根源在于开发人员并没有及时地识别出这个项目中的几个关键领域以及及早的将其进行隔离。更为让人遗憾的是开发这个项目的人员都已离职，后来接手这个项目的开发人员被堆积地需求压得喘不过气来，也就更没有时间来处理以前的技术债务问题。</p><p>实际上，这个项目包含多个领域，最为核心的三个领域就是订单、账单和计费。在和老大以及开发沟通过后，我们意识到系统拆分已经刻不容缓。目前我们在做的事情就是在工程内部进行代码级别的拆分，其中最为棘手的问题就是订单系统和计费系统的耦合太深。</p><p>仔细分析各个业务流程之后我们发现，很多耦合都是可以避免的。大部分的业务流程都是由订单系统触发，然后计费系统做出相应的变更。最终，我们决定使用领域事件来讲订单系统和计费系统解耦开。（PS:原系统中并没有使用DDD的开发模式，但这并不影响我们使用领域事件。)</p><img src="/2017/08/13/再谈领域事件/order-bill.png" title="order-bill"><p>上图是我们现在的做法，通过<code>OrderEvent</code>和<code>BillEvent</code>来将两个系统解耦开，然后将<code>Event</code>放到一个公共的Module中来达到Module级别的解耦。令人惊喜的发现在于，这种解耦的方式与我们规划中订单系统与计费系统通过MQ来通信达成了一致。后面我们只需要标准化这些事件，就可以做到无缝迁移到MQ中。</p><p>通过上面这个例子，我再总结一下使用领域事件的来解耦业务流程的应用场景：</p><ol><li>如果一个业务流程需要贯穿几个不同的受限上下文中，那么可以通过以发布领域事件的方式来避免上游系统耦合下游系统。这种解耦方式收益最大，因为其有利于后期系统间的拆分。</li><li>如果在同一个受限上下文中，也可以通过发布领域事件的方式来达到领域间解耦。</li></ol><p>至于为什么说以何种方式来发布事件不在那么重要，因为当你在项目采用了领域事件技术来解耦代码，你已经获得这项技术的90%的好处，而具体怎么执行就显得不那么重要了。我在另外一个项目中（这个项目完全采用DDD的模式来开发）就采用了最为朴实的方式来实现，不再基于Spring或者Guava了。</p><p>附上我目前的使用方法：<a href="https://gist.github.com/mymonkey110/aba58de452928bec2243848bb2c9b84a" target="_blank" rel="noopener">https://gist.github.com/mymonkey110/aba58de452928bec2243848bb2c9b84a</a></p><p>如果你对使用领域事件的感触没有那么深，那么请记住这句话：代码间解耦用事件，系统间解耦用MQ！</p><p>参考资料：<br><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00IYTVWA6/ref=sr_1_1/462-1072474-8297663?qid=1502622410" target="_blank" rel="noopener">实现领域驱动设计</a><br><a href="https://www.amazon.cn/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1-%E8%BD%AF%E4%BB%B6%E6%A0%B8%E5%BF%83%E5%A4%8D%E6%9D%82%E6%80%A7%E5%BA%94%E5%AF%B9%E4%B9%8B%E9%81%93-%E5%9F%83%E9%87%8C%E5%85%8B-%E5%9F%83%E6%96%87%E6%96%AF/dp/B01GZ6T12K/ref=tmm_pap_swatch_0?_encoding=UTF8&amp;qid=1502622410" target="_blank" rel="noopener">领域驱动设计:软件核心复杂性应对之道</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/08/13/%E5%86%8D%E8%B0%88%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>跨Region实践初探</title>
      <link>http://michael-j.net/2017/08/02/%E8%B7%A8Region%E5%AE%9E%E8%B7%B5%E5%88%9D%E6%8E%A2/</link>
      <guid>http://michael-j.net/2017/08/02/%E8%B7%A8Region%E5%AE%9E%E8%B7%B5%E5%88%9D%E6%8E%A2/</guid>
      <pubDate>Wed, 02 Aug 2017 11:27:13 GMT</pubDate>
      <description>
      
        &lt;p&gt;最近网易云上线华北REGION(cn-north-1)地区的服务，在此过程中我们做出了很多调整以适应跨REGION架构。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>最近网易云上线华北REGION(cn-north-1)地区的服务，在此过程中我们做出了很多调整以适应跨REGION架构。</p><a id="more"></a><p>在此分享一下我在团队内部的分享：<a href="http://pan.baidu.com/s/1eSgUYmY" target="_blank" rel="noopener">http://pan.baidu.com/s/1eSgUYmY</a> 密码：m72t</p><p>这次的跨REGION改造仅仅是第一步，我们意识到要支持多REGION，要做的事情很多。后续有机会进一步跟大家分享网易云在这方面的实践心得。</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/08/02/%E8%B7%A8Region%E5%AE%9E%E8%B7%B5%E5%88%9D%E6%8E%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>记一次坑爹的Debug过程</title>
      <link>http://michael-j.net/2017/06/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9D%91%E7%88%B9%E7%9A%84Debug%E8%BF%87%E7%A8%8B/</link>
      <guid>http://michael-j.net/2017/06/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9D%91%E7%88%B9%E7%9A%84Debug%E8%BF%87%E7%A8%8B/</guid>
      <pubDate>Wed, 21 Jun 2017 10:46:22 GMT</pubDate>
      <description>
      
        &lt;p&gt;昨天QA跟我反馈说系统有几个接口反应很慢，起初我不以为意，因为这几个接口就是简单的写入和删除，最多就是再更新一下缓存，能有多慢。我让QA看看是不是网络抖动，延迟的问题，再看看我们的&lt;code&gt;access_log&lt;/code&gt;里面响应时间是多少。QA说网络比较稳定，&lt;code&gt;access_log&lt;/code&gt;里面显示要好几秒，这就让我有些诧异了。其中有一个删除用户XXX数据的接口响应特别慢，我们在测试环境去复现的时候果然复现了这个问题。当前端直接点击删除的时候，接口过了8秒多才返回，这肯定不正常了，而且&lt;code&gt;access_log&lt;/code&gt;也印证了这一现象。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>昨天QA跟我反馈说系统有几个接口反应很慢，起初我不以为意，因为这几个接口就是简单的写入和删除，最多就是再更新一下缓存，能有多慢。我让QA看看是不是网络抖动，延迟的问题，再看看我们的<code>access_log</code>里面响应时间是多少。QA说网络比较稳定，<code>access_log</code>里面显示要好几秒，这就让我有些诧异了。其中有一个删除用户XXX数据的接口响应特别慢，我们在测试环境去复现的时候果然复现了这个问题。当前端直接点击删除的时候，接口过了8秒多才返回，这肯定不正常了，而且<code>access_log</code>也印证了这一现象。</p><a id="more"></a><p><code>access_log</code>如下所示：（后面的代码和日志我都以XXX来代替这次的业务场景）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10.180.9.150 - 2017-06-20_15:58:55.960 DELETE /v1/xxx/user/comb/region-1497945389492-vfxil 200 95 (9586 ms)</span><br><span class="line">10.180.9.150 - 2017-06-20_16:04:00.239 DELETE /v1/xxx/user/comb/region-1497945389482-yajym 200 95 (4580 ms)</span><br></pre></td></tr></table></figure><p>铁证如山，<code>access_log</code>显示了确实是我们接口响应慢了。这让我有些纳闷了，这个接口的业务场景非常简单，就是删除用户的一条XXX记录，并清除跟它相关的表信息，最后发出一个领域事件，由一个listener来清除缓存，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">@Transactional</span><br><span class="line">public void deleteUserXXX(long uid, String code, String name) throws XXXNotFoundException &#123;</span><br><span class="line">    Optional&lt;XXX&gt; result = getUserXXX(uid, code, name);</span><br><span class="line">    XXX xxx = result.orElseThrow(PolicyNotFoundException::new);</span><br><span class="line">    long xxxId = xxxx.getId();</span><br><span class="line"></span><br><span class="line">    xxxRepository.clearAllVersion(xxxId);</span><br><span class="line">    authorizeService.revokeXXXRefFromYYY(primaryAccountId, xxxId);</span><br><span class="line">    authorizeService.revokeXXXRefFromZZZ(primaryAccountId, xxxId);</span><br><span class="line">    xxxRepository.delete(xxxId);</span><br><span class="line"></span><br><span class="line">    DomainEventPublisher.publish(XXXEvent.newDeleteEvent(xxx));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键是这个接口响应慢也不是每次都出现，响应慢的概率大概有50%，还是比较好复现的。还一个比较重要的信息就是，我们的SQL日志很快就打印完了，基本上我在<code>POSTMAN</code>一发出请求，我们的SQL也就执行完成了。但是<code>POSTMAN</code>此时并没有请求，那么就是说我们还没有返回<code>response</code>给前端。</p><p>怎么会这样？！不应该呀？难道是慢查询，索引的问题，我已经建了索引了呀，况且测试环境数据量这么小，不要索引也不至于这么慢啊！为了确定是不是慢查询的问题，我去咋们的APM工具(蜂巢的APM产品很强大，推荐大家使用)里面查询一下有没有捕获到慢查询的日志，结果很遗憾，并没有看到响应的慢查询日志。此时我就更困惑了。如果不是慢查询还能是什么。</p><p>走投无路的我只能祭出神器了——<code>JProfiler</code>，一款专业的APM工具。在折腾完一番环境配置部署等问题以后，我的客户端重要可以连上测试环境的jvm进行<code>profiling</code>了。用上了<code>JProfiler</code>感觉档次提高了好多，好像马上就能把问题解决了。下图是<code>JProfiler</code>的显示的调用过程。</p><img src="/2017/06/21/记一次坑爹的Debug过程/jprofiler.png" title="JProfiler"><p>调到这里，我只想说WTF！JProfiler显示这个HTTP调用只用了44ms就完成了。</p><p>我的内心又奔溃了，明明<code>access_log</code>显示花了8秒多，为啥<code>JProfiler</code>显示才44ms，难道<code>JProfiler</code>出错了？实际上，我更相信我自己的程序有问题，那为什么<code>JProfiler</code>显示我们的程序执行的很快呢？</p><p>看来<code>JProfiler</code>不能用了，我又想了很久。 <img src="/2017/06/21/记一次坑爹的Debug过程/我想到了.png"></p><p>难道是因为我agent加的太多了，因为测试环境为了统计需要jvm参数里面加了jacoco的agent；还有，apm的agent。这么多agent会不会导致某种性能问题了，虽然我自己都不太相信，但本着大胆尝试地原则我果断去掉了两个agent再重试了几次，现象依旧！</p> <img src="/2017/06/21/记一次坑爹的Debug过程/想不到吧.png"><p>幸好我内心强大，我还是很珍惜每次调试诡异BUG的机会的，因为能学到很多东西。此时的我已经没有什么手段了，事实摆着那里，接口响应很慢，也没有看到慢查询，<code>JProfiler</code>也没用了。然后我又祭出了我的第二个神器——<code>BTrace</code>。</p><p>相信很多人用过<code>BTrace</code>，这是在线调试的神器！虽然我不太想用这玩意，因为它要自己写脚本，内心有点排斥。但是我也没有别的办法了。准备再去看看<code>BTrace</code>的文档的时候发现<code>BTrace</code>的官方文档网站已经关了，WTF!</p> <img src="/2017/06/21/记一次坑爹的Debug过程/btrace.png"><p>我突然想到了以前看到过的另外一款神器——<code>Greys</code>。<code>Greys</code>也是一款在线调试神器，是阿里开源的一个工具。以前我没有用过这个工具，这次形式所迫，不得以而学之。看完文档之后发现它非常强大，不比<code>BTrace</code>弱，而且对开发者比较友好，至少不用去写脚本。我用<code>trace</code>跟踪了一下那个<code>deleteUserXXX</code>方法，结果如下：</p> <img src="/2017/06/21/记一次坑爹的Debug过程/greys.png"><p>啥？为啥我发一次请求这个方法会被调用两次？而且还是被同一个线程执行两次？为此我专门在代码入口处加了一条无用的log来看看这个方法到底被执行了几次。log显示这个方法只执行了一次。那为什么<code>trace</code>显示执行了两次，我为此纠结了很久，有知道的小伙伴可以告诉我。</p><p><code>Greys</code>没有提供太多有价值的线索给我，唯一有价值的信息就是那个线程名称。此时，我又灵关一闪，难道是<code>Stop The World</code> ？ 因为我用的同步请求的方式，所以一个request只会被一个thread处理，而又没有满日志打印，说明不是数据库的问题，只能是jvm本身的问题，难道请求的时候触发了GC ？ 又本着大胆尝试的精神我果断开启了<code>jstat</code>观察GC的情况。</p><img src="/2017/06/21/记一次坑爹的Debug过程/jstat.png"><p>观察很久以后发现自己还是太年轻。别说FGC了，连YGC都没几次，根本不是GC的问题。这可如何是好？对了，还有一个工具没试过，<code>jstack</code>，反正这么多工具都用了，也不差这一个了。</p><p>在请求过程中我用<code>jstack</code>来查看线程的运行状态，得到了如下的运行堆栈。堆栈显示<code>socket</code>在读取什么东西<br>，到底是什么东西呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&quot;http-nio-8080-exec-2&quot; #104 daemon prio=5 os_prio=0 tid=0x0000000006b1b000 nid=0x7392 runnable [0x00007f74dece9000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:170)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:141)</span><br><span class="line">        at com.mysql.jdbc.util.ReadAheadInputStream.fill(ReadAheadInputStream.java:101)</span><br><span class="line">        at com.mysql.jdbc.util.ReadAheadInputStream.readFromUnderlyingStreamIfNecessary(ReadAheadInputStream.java:144)</span><br><span class="line">        at com.mysql.jdbc.util.ReadAheadInputStream.read(ReadAheadInputStream.java:174)</span><br><span class="line">        - locked &lt;0x000000076ef859b8&gt; (a com.mysql.jdbc.util.ReadAheadInputStream)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:3008)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3469)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3459)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3900)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)</span><br><span class="line">        at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680)</span><br><span class="line">        at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2486)</span><br><span class="line">        - locked &lt;0x000000076ef7b928&gt; (a com.mysql.jdbc.JDBC4Connection)</span><br><span class="line">        at com.mysql.jdbc.ConnectionImpl.commit(ConnectionImpl.java:1555)</span><br><span class="line">        - locked &lt;0x000000076ef7b928&gt; (a com.mysql.jdbc.JDBC4Connection)</span><br><span class="line">        at org.apache.commons.dbcp2.DelegatingConnection.commit(DelegatingConnection.java:364)</span><br><span class="line">        at org.apache.commons.dbcp2.DelegatingConnection.commit(DelegatingConnection.java:364)</span><br><span class="line">        at org.springframework.jdbc.datasource.DataSourceTransactionManager.doCommit(DataSourceTransactionManager.java:279)</span><br></pre></td></tr></table></figure><p>我拿着堆栈信息一通Google，最终发现下面这两个网页：<br><a href="https://bugs.mysql.com/bug.php?id=74739" target="_blank" rel="noopener">ReadAheadInputStream hangs on socket read</a><br><a href="https://bugs.mysql.com/bug.php?id=74979" target="_blank" rel="noopener">Server query cache vs protocol issue</a></p><p>啊哈，这个人的堆栈跟我们一样，这是MySQL的一个BUG。哈哈，我居然碰到了MySQL的一个BUG。似乎一个程序员在一个问题上调试了很久还没有找到原因时，总是急于把发现的蛛丝马迹套到某个相识的问题上，而且那个人跟我有着一样的运行堆栈！我现在多么希望就是这个原因啊！</p><p>在<a href="https://bugs.mysql.com/bug.php?id=74979" target="_blank" rel="noopener">Bug #74979</a>的说明中表示这个影响的版本是MySQL 5.7.4，但是我的MySQL 版本是5.7.14。为了确认是否是MySQL的问题，我专门找DBA来一起看这个现象。</p><p>起初，DBA也很诧异，SQL的执行速度是很快的，索引也没有问题，但是COMMIT很慢！这是为什么呢，我并不是MySQL专家，这么专业的事情还是主要交给DBA来分析。再和DBA复现了几次现象以后，DBA也有些纳闷了，再和其他的DBA沟通以后发现我的库所在的盘的IO很高，是磁盘IO的问题！WTF?!</p><p>DBA在给我的库换了一块盘以后一切恢复正常了，但是我此时的内心是这样的！</p><img src="/2017/06/21/记一次坑爹的Debug过程/啊.png"><p>这个例子告诉我，有时候再多的分析也没有，不要想太多，想把基本的监控参数看清楚很重要！哈哈，当然，我再这个过程中又学到了很多新技能，就算这次坑爹的Debug过程花了我快1天半的时间，但我还是觉得很值得！</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/06/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9D%91%E7%88%B9%E7%9A%84Debug%E8%BF%87%E7%A8%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>架构师应该是一种角色，而不是一个职位</title>
      <link>http://michael-j.net/2017/06/03/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%BA%94%E8%AF%A5%E6%98%AF%E4%B8%80%E7%A7%8D%E8%A7%92%E8%89%B2%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E8%81%8C%E4%BD%8D/</link>
      <guid>http://michael-j.net/2017/06/03/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%BA%94%E8%AF%A5%E6%98%AF%E4%B8%80%E7%A7%8D%E8%A7%92%E8%89%B2%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E8%81%8C%E4%BD%8D/</guid>
      <pubDate>Sat, 03 Jun 2017 07:23:13 GMT</pubDate>
      <description>
      
        &lt;p&gt;昨天看到一篇关于“架构师”的文章，读后非常有感触。我个人比较认同作者的大部分观点，故决定将原文进行翻译，和国内的开发者一起分享。原文地址：&lt;a href=&quot;https://dzone.com/articles/architect-should-be-a-role-not-a-position&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;“Architect” Should Be a Role, Not a Position”&lt;/a&gt;。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>昨天看到一篇关于“架构师”的文章，读后非常有感触。我个人比较认同作者的大部分观点，故决定将原文进行翻译，和国内的开发者一起分享。原文地址：<a href="https://dzone.com/articles/architect-should-be-a-role-not-a-position" target="_blank" rel="noopener">“Architect” Should Be a Role, Not a Position”</a>。</p><a id="more"></a><p>当一个资深的开发者变得更加资深时会发生什么事情？他们经常会被提拔做去“架构师”。有时一个架构师也不一定非要是开发者，如果他们能看到更大的蓝图。最终，总有一个人挂着“架构师”的头衔：他对要开发的系统和正在开发的系统做出架构上决策。在一些更大的公司，还有“架构师议会”，每个团队指定的架构师们聚在一起决定着一些明智的事情。</p><p>但我认为专门设立“架构师”的职位是一个糟糕的想法。架构师应该是建筑行业的一个职位，这是说的过去的，因为你不能在项目中期改变和调整架构。但是软件架构是十分灵活的，不应该预先就严格地定义好。而且开发工作和架构设计是如此的紧密关联，所以说某个人决定“什么要做”和“什么不要做”是不科学的。这会带来各种各样的问题，主要是因为架构师经常无法全面的考虑到具体的实现是怎么样。如果一个架构师长时间不写代码，他们更加倾向于忽略“实现细节”，转而仅仅考虑抽象设计。然而，抽象总是伴随着遗漏，只考虑抽象而不考虑特定的实现这样的解决方案很少行得通。</p><p>我的第一个论点就是：在不知道详细地编写所有代码地情况下，你无法在成为一个优秀的架构师。大多数情况下都不是“简单地编码”。如果你已经成为架构师多年，同时也多年没有写过代码了，那几乎可以肯定你不是一个优秀的架构师。</p><p>当然，你可能是一个优秀的架构师。或许在你所在的那个特别的公司里，有人坐在象牙塔中，指挥着码农去整合这个实现那个，这可能说的过去。但即使是这种情况，也有更好的方法。</p><p>架构师应该是一种角色。每个资深的团队成员都可以也应该扮演架构师的角色，不用每个团队指定一个人来当。实际上，最好有多个人来扮演架构师。在会议中讨论架构设计和讨论功能设计类似，如果你是那个要实现所有事情的人，那么你需要带着明确的想法去参会。任何的过度设计（大部分架构师经常会犯这个错误）需要在你面前证明是合理的——“我是否愿意去写这些模板代码，或者是否有一种更简单优雅的实现方式”。</p><p>职位可以使“软件工程师”，但角色可以是“敏捷大师”、”架构师”、”持续集成官”，等等。如果公司需要一个“架构师议会”去决定系统间更宏观的整合，开发者可以提名某个人去参与这些会议，这个人有可能是对这些系统最了解的人。</p><p>我知道现在架构师在想什么——有一些更加高层次的关注点开发要么不太能理解要么不应该为此被打扰。大错特错！如果你的开发不理解更高层次的架构规划，那么迟早你会遇到问题的。是的，因为他们要让代码适应你正在规划的更大的蓝图，他们需要被打扰。</p><p>还有一方面于团队成员的态度和动态的交流。如果某个不是特别优秀或者受人尊敬的开发被提升为“架构师”，那么可能破坏团队的和谐。另一方面，某些人被提升为“架构师”以后可能会过于自信，以至于他们会想当然的去做出设计决定，而不管那些反对他们的好的争论点。</p><p>所以，理想的情况（这是我的第二个论点）是取消架构师的职位。确保你团队中资深的成员能够参与架构设计和决策，那样他们可能会更有干劲，他们也会对他们开发的成果有一个更加清晰的规划。最为重要的是，架构决策不能脱离日常的“现实”的开发环境，否则它们会不必要的复杂化。</p><hr><p>很久没有翻译了，有很多句子拿捏不准。如果有误翻的地方，还望指正，谢谢！</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/06/03/%E6%9E%B6%E6%9E%84%E5%B8%88%E5%BA%94%E8%AF%A5%E6%98%AF%E4%B8%80%E7%A7%8D%E8%A7%92%E8%89%B2%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E8%81%8C%E4%BD%8D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>访问控制：为你的云上业务再加一把锁</title>
      <link>http://michael-j.net/2017/06/01/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%B8%BA%E4%BD%A0%E7%9A%84%E4%BA%91%E4%B8%8A%E4%B8%9A%E5%8A%A1%E5%86%8D%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/</link>
      <guid>http://michael-j.net/2017/06/01/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%B8%BA%E4%BD%A0%E7%9A%84%E4%BA%91%E4%B8%8A%E4%B8%9A%E5%8A%A1%E5%86%8D%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/</guid>
      <pubDate>Thu, 01 Jun 2017 10:56:02 GMT</pubDate>
      <description>
      
        企业上云首当其冲的就是要解决安全性的问题，是否满足企业对安全的诉求成了影响其是否上云的一个十分重要的因素之一。
      
      </description>
      
      <content:encoded><![CDATA[<p>企业上云首当其冲的就是要解决安全性的问题，是否满足企业对安全的诉求成了影响其是否上云的一个十分重要的因素之一。安全是一个很大的话题，从底层资源数据的安全到上层应用访问的安全，从访问客体（资源或服务）的安全到访问主体（人或者第三方服务）的安全，这些都属于安全的范畴之内。访问控制正是从资源访问的主客体关系出发，解决企业对资源访问的权限控制的需求。</p><p>维基百科对<strong><em>访问控制</em></strong>的定义如下：</p><blockquote><p>访问控制是指允许或禁止某人使用某项资源的能力。</p></blockquote><p>云环境下的访问控制使得这个问题变得复杂，我曾写过一篇<a href="http://michael-j.net/2017/03/07/%E5%AF%B9%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%80%9D%E8%80%83/">对云环境下访问控制系统的思考</a>来阐述这个问题。从2.14号上线访问控制以来，接入访问控制的业务越来越多，截止目前已有六大业务支持访问控制；同时，访问控制还对云服务提供了支持，用户可以授权给易盾和视频云来访问其在NOS（网易对象存储）的数据资源。现在，你可以自定义访问控制策略，通过一套特定DSL语法来定义权限。根据自己的实际使用场景和组织架构来定义对权限的需求，这具有十分重要的意义。</p><p>举个例子，如果不允许某某子账号删除<code>avatar</code>桶中<code>file-1.png</code>的图片，而允许其对其他任何文件有所有的控制权限，那么可以定义如下的策略来达到这个目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: 1,</span><br><span class="line">    &quot;statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;action&quot;: [</span><br><span class="line">                &quot;comb:nos:DeleteObject&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;effect&quot;: &quot;deny&quot;,</span><br><span class="line">            &quot;resource&quot;: [</span><br><span class="line">                &quot;comb:nos:*:*:*:avatar/file-1.png&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;action&quot;: [</span><br><span class="line">                &quot;comb:nos:*&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;effect&quot;: &quot;allow&quot;,</span><br><span class="line">            &quot;resource&quot;: [</span><br><span class="line">                &quot;comb:nos:*:*:*:*&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过语言来定义权限，用户将获得十分灵活的权限控制，当然也包含了细粒度的权限控制。使用DSL来定义权限的做法很早之前就存在了，可以追溯到2001年的<a href="https://en.wikipedia.org/wiki/XACML" target="_blank" rel="noopener">XACML</a>时代。目前主流的云计算厂商也均采用这种方式来描述权限。我们采用了业界相同的命名方式来降低用户的理解成本。这里对策略语法做一个简单的介绍。</p><p>策略语法就是有着一定约束关系的JSON格式数据，由<code>version</code>和<code>statement</code>两个部分组成。<code>version</code>目前只支持1，而<code>statement</code>则是描述策略的具体形式。<code>statement</code>由三个部分组成，<code>action</code>、<code>effect</code>和<code>resource</code>，这三个子句构成了访问控制最为核心的三个部分。</p><ul><li><code>effect</code>表示授权类型，只能是<code>allow</code>（允许）或者<code>deny</code>（拒绝）。</li><li><p><code>action</code>表示动作，组成结构为<code>product:service-name:action-name</code>。<code>product</code>目前只支持<code>comb</code>，<code>service-name</code>代表基础服务（蜂巢）下的服务，目前已支持的服务如下：</p><p>服务代号 | 服务名称<br>— | —<br>nos | 对象存储<br>nlb | 负载均衡<br>rds | 关系型数据库<br>mongodb | MongoDB<br>ncr | Redis缓存<br>cdn | CDN</p><p><code>action-name</code>表示具体动作的名称，例如nos支持<code>GetBucket</code>、<code>PutObject</code>等动作，cdn支持<code>CreateDomain</code>、<code>DisableDomain</code>等等，具体的动作请参考对应服务的文档。</p></li><li><p><code>resource</code>表示资源，组成结构为<code>product:service-name:region:az:account-id:resource-descriptor</code>。<code>product</code>和<code>service-name</code>和<code>action</code>中的意义相同，<code>region</code>表示地域，<code>az</code>表示可用域，目前只支持<code>*</code>，<code>account-id</code>是用户的主账号id，目前也只能填入<code>*</code>，<code>resource-descriptor</code>是具体资源的描述符。<code>resource-descriptor</code>根据具体的服务会有变化，整体上是树形结构的。例如：<code>bucket-1/file-1.png</code>可以表示nos中<code>bucket-1</code>的桶中的<code>file-1.png</code>文件，而<code>instance/nlb-1</code>可以表示nlb中实例名称为<code>nlb-1</code>的实例。具体的规则请参考对应服务的文档。</p></li></ul><p><code>statement</code>语句本身是一个Array，你可以在其中最多定义5条子句。这样就允许你将多条策略组合在一个策略里面，也可以根据需要将策略拆改，选择权在你手上。</p><p>通过上面的策略语言，企业完全可以根据自身的实际需要来定义权限，具有非常大的灵活性和自由度。如果你以前使用过其他云的访问控制产品，那么上手会很快。如果是第一次接触此类产品，也不用担心，我们提供了一个强大了“编译器”来检查你的策略语法是否合法，并提供简单直观的错误展示来帮你迅速定位问题，如下图所示。</p><img src="/2017/06/01/访问控制：为你的云上业务再加一把锁/compile_error.png" title="错误提示"><p>另外，访问控制还提供了了<code>子账号</code>、<code>组</code>和<code>角色</code>来满足企业对访问主体描述性的需求，企业可以根据自身的组织架构和研发模式来组合使用这些身份。</p><p>掌握了授权策略后，理解鉴权的执行流程也是很重要的。鉴权流程按照Deny优先原则执行，如果有显式的Deny，那么直接拒绝；如果有显式的allow，那么则允许，否则也拒绝。具体流程如下。</p><img src="/2017/06/01/访问控制：为你的云上业务再加一把锁/auth_flow.png" title="鉴权流程"><p>在授权时请遵循最小权限原则，即根据用户的需要，将刚好能满足其需求的权限赋予给他，这样有助于规避一些越权执行的问题。除此之外，最佳实践还包含及时收回用户不再需要的权限，尽量通过组和角色来授权等等。详细的文档可以参考访问控制的官方文档。</p><p>通过以上的介绍，不知道你是否对访问控制有一个大致的了解。如果还是有些云里雾里，那不如自己去动手定义一个属于自己的访问策略吧！</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/06/01/%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%EF%BC%9A%E4%B8%BA%E4%BD%A0%E7%9A%84%E4%BA%91%E4%B8%8A%E4%B8%9A%E5%8A%A1%E5%86%8D%E5%8A%A0%E4%B8%80%E6%8A%8A%E9%94%81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>评论从多说迁移到Disqus</title>
      <link>http://michael-j.net/2017/05/21/%E8%AF%84%E8%AE%BA%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%BF%81%E7%A7%BB%E5%88%B0Disqus/</link>
      <guid>http://michael-j.net/2017/05/21/%E8%AF%84%E8%AE%BA%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%BF%81%E7%A7%BB%E5%88%B0Disqus/</guid>
      <pubDate>Sun, 21 May 2017 14:25:25 GMT</pubDate>
      <description>
      
        本站的评论系统从多说迁移到Disqus
      
      </description>
      
      <content:encoded><![CDATA[<p>建站以来一直使用多说作为评论系统，我还是非常喜欢国人做的评论系统，简单实用接地气。但是不盈利的商业软件最终只能关闭，这方面国内对盈利模式得探索要不国外落后太多了。</p><p>虽然切换到Disqus以后免不了被墙，但目前我确实还没有找到称心如意的评论软件。如果网友们有好的评论系统，不放留言给我推荐，叩谢！</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/05/21/%E8%AF%84%E8%AE%BA%E4%BB%8E%E5%A4%9A%E8%AF%B4%E8%BF%81%E7%A7%BB%E5%88%B0Disqus/#disqus_thread</comments>
    </item>
    
    <item>
      <title>对云环境下访问控制系统的思考</title>
      <link>http://michael-j.net/2017/03/07/%E5%AF%B9%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <guid>http://michael-j.net/2017/03/07/%E5%AF%B9%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <pubDate>Tue, 07 Mar 2017 12:16:56 GMT</pubDate>
      <description>
      
        最近我在做访问控制方面的工作，故此分享一下我对这个领域的一点思考。
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现在，云计算市场已是一片红海，不论是国内还是国外的云计算市场竞争都相当激烈。主流的云计算厂商在争夺企业客户方面都不留余地，因为企业用户对云计算的发展有着极为重要的意义，尤其是大企业客户。可以毫不夸张的说，没有企业用户，云计算的发展绝不会发展的如此迅速。</p><p>企业上云首当其冲的问题就是安全性，安全性已经成为企业上云最大的障碍。这里的安全性不光是基础设施的安全和稳定，比如虚拟机的高可用、RDS的高可靠等等，也包括应用层面的安全性，如WAF、证书服务、加密服务等等，还包括因为企业本身的IT架构/研发架构的复杂性带来的资源管控方面的安全性需求。毫不夸张地说，谁解决好了企业的安全性诉求，那么他就能在这片红海中立于不败之地。</p><p>安全是一个很大的话题，我不敢妄谈。最近我在做访问控制方面的工作，故此分享一下我对这个领域的一点思考。访问控制是安全中一块，也是十分重要的一块。有些云计算提供商甚至都没有将其划归到安全的范围，可能是没有意识到访问控制的重要性。AWS中访问控制的产品是<a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="noopener">IAM</a>，可以说是云计算厂商中做的最早也最为完善的一个。IAM在其的产品分类中有一个词我觉得形容该产品最为合适——“合规性“。其实访问控制就是满足企业用户对于合规性的需求，说白了就是规范企业用户对云计算资源的访问。</p><p>既然这是一篇关于访问控制的文章，那么我们先来看看关于访问控制的定义。</p><p>维基百科关于<strong><em>访问控制</em></strong>的定义是：访问控制是指允许或者禁止某人使用某项资源的能力。这个定义中有几个关键点需要留意：</p><ol><li>人</li><li>某项资源</li><li>允许/禁止</li><li>能力</li></ol><p>虽说维基百科关于访问控制的定义略显简陋，但是这个定义我觉得已经勾勒出了访问控制系统的大致形态。首先是人，访问控制的主体是人，所以其最为重要的使用群体是用户，那就是说这个系统是一个面向用户的系统。其次是某项资源，资源是访问控制的客体，某项的限定词则表明资源的具体形式是未知的。再次是允许/禁止，这是访问控制对外提供服务的最为直观的表现形式，用一个更为专业的名称来形容的话就是“鉴权”。最后是能力，为什么我把能力专门拿出来作为一个关键点来说，因为这是理论和实践的一个关键区分点之一。访问控制的理论为我们设计对应的系统和产品指明了方向，但是在生产环境中使用的还是遇到各种各样的现实问题。有一点需要特别注意的是，访问控制系统作为一个通用的公共服务，它需要提供的是一种能力，而不是针对特定环境和产品，否则只为沦为某个特定的专家系统。</p><p>维基百科关于【访问控制】的定义在理论层面已经颇为全面，然而从系统的设计到角度来看还缺少一个关键点，那就是——动作。这里的动作（可以也称之为操作）可以理解为具体系统所开放的能力，或者用户可以对系统执行的操作。例如，RDS产品需要开放<code>createDataBase\listDataBase\deleteDatabase</code>等等动作，又如NOS（网易对象存储）需要开放<code>listBucket\createBucket\listObject\putObject</code>等等动作。就算脱离云计算的环境，动作也是访问控制中不可缺少的要素之一，因为任何给人使用的产品都会伴随与人的交互，而这些交互的细粒度表现就是这些动作。</p><p>既然现在我们已经了解了访问控制的基本理论，那是否可以开始设计系统开始编码了呢？千万不要这么做，想清楚再做远比边做边想要节约时间。这听上去有点和现在的“敏捷开发“不太符合，实际上恰恰相反，”敏捷开发”虽然强调持续集成、快速迭代，但是这却是建立在前期良好的架构设计的基础之上的。言归正传，这是一篇关于访问控制实践探究的文章，在我们设计系统之前，先看看以前的访问控制系统一般是怎么做的。</p><h2 id="传统的访问控制模型"><a href="#传统的访问控制模型" class="headerlink" title="传统的访问控制模型"></a>传统的访问控制模型</h2><p>在访问控制系统的设计中，有两种设计模式是十分重要，也是得到广泛应用的，那就是访问控制列表（ACL）和基于角色的访问控制（RBAC）。</p><h4 id="1-访问控制列表（ACL）"><a href="#1-访问控制列表（ACL）" class="headerlink" title="1.访问控制列表（ACL）"></a>1.访问控制列表（ACL）</h4><p>访问控制列表是早期的一种访问控制技术，其原理十分简单，就是记录哪些用户对这个资源能进行哪些操作，有类似如下的二维表维护在文件中：</p><table><thead><tr><th>User</th><th>Create</th><th>Update</th><th>Query</th><th>Delete</th></tr></thead><tbody><tr><td>张三</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>李四</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>王五</td><td>×</td><td>×</td><td>√</td><td>×</td></tr></tbody></table><p>这种访问控制的方式好处显而易见，就是简单直观，易维护。这种设计在操作系统、路由器、交换机和工业控制系统中都得到了广泛的使用。不过，ACL的缺点也是显而易见的，那就是当用户、资源和操作组建增长时，维护这张表的代价会异常庞大，另外，这种设计模式将用户对资源的控制权限直接绑定，十分死板，灵活性不够，无法满足云环境下动态资源授权的需求。</p><h4 id="2-基于角色的访问控制（RBAC）"><a href="#2-基于角色的访问控制（RBAC）" class="headerlink" title="2.基于角色的访问控制（RBAC）"></a>2.基于角色的访问控制（RBAC）</h4><p>基于角色的访问控制将用户按其属性进行分类构建出一个个具体的角色，而将权限授权角色，用户通过扮演角色来间接地获取对应的权限。RBAC非常适合现实环境，尤其是企业，因为使用资源的使用者一般并不是资源的拥有者，资源的所有者属于企业。在云环境中更是如此，可能使用RDS的人是公司的开发或者PE，而RDS的归属者是对应的企业。RBAC从访问控制的主体的角度出发，很好使适应了企业的组织结构，同时也将用户和权限分离开了，用户只需要通过扮演不通的角色就能获得对应的权限，这种方式解决了云环境下动态授权的权限需求。</p><p>那是否RBAC能解决我们所有的问题了？显然不是。现实的问题往往是复杂的，不会像非黑即白这样简单。RBAC将人和权限分离的方法确实解决了一部分灵活性的问题，但是也增加了使用成本，同时它对细粒度的权限控制没有很好的应对之法。</p><h2 id="云环境下面临的挑战"><a href="#云环境下面临的挑战" class="headerlink" title="云环境下面临的挑战"></a>云环境下面临的挑战</h2><p>现在我们也知道了主流的访问控制模型一般是怎么做的了，那么如何应用在云环境中呢？我觉得在云环境下的访问控制系统主要面临以下几个挑战：</p><h4 id="1-资源标识的灵活性"><a href="#1-资源标识的灵活性" class="headerlink" title="1.资源标识的灵活性"></a>1.资源标识的灵活性</h4><p>访问控制的系统的立项一般都晚于云计算中的其他产品，因为它本身属于支撑产品。但随着其他产品形态组建完善，如何很好地描述各个产品的资源就成了一件非常令人头疼地问题。在一些IaaS的产品形态中，很大一部分是以实例(instance)的方式来提供服务的；而在某些PaaS的产品形态中，有些是实例的方式来提供服务，而又有一些有着很强的特殊性，比如上文提到的NOS，它们的资源描述是需要以树形方式来表达的。SaaS产品用统一的访问控制系统来管理一般不太可能，因为每个Software的产品形态和使用方式千差万别，你很难去做到统一。在对访问控制系统的设计过程中我发现了一个很有趣的现象，当你考虑的产品越接近应用层面（上层服务），访问控制系统就越接近专家系统。这样很好理解，越上层的服务它的特殊性越强，所以通用性越差，只能做成专家系统。</p><h4 id="2-细粒度的权限控制"><a href="#2-细粒度的权限控制" class="headerlink" title="2.细粒度的权限控制"></a>2.细粒度的权限控制</h4><p>访问控制系统的有一个比较困难的点，那就是细粒度的权限控制。这一点在访问控制模型中你找不到答案，它们只是在比较宏观的层面讨论了人和权限的关系。细粒度的权限控制是现实中存在的一个需求，比如一个企业有若干台虚拟机，有一些虚拟机用作webserver，而有一些虚拟机用作数据库，还有一些作为中间件服务器，比如Zookeeper等等。而使用这些虚拟机的人各不相同，他们能看到并操作的虚拟机也应该得到严格地监管，否则可能会引起安全事故。细粒度地权限控制关键点在于“多细”，越细致地控制会导致你的系统复杂度成倍增加，不利于的系统地可维护性。我的建议是只做到实例级别，但有一个例外，那就是对象存储。能做到多细的程度很大一部分取决于第一点中你地资源标识地方式，如果你的资源描述方式得当，那么更加细粒度地访问控制并不会增加你系统地复杂度。这个我会在下文中提到。</p><h4 id="3-身份的多样性"><a href="#3-身份的多样性" class="headerlink" title="3.身份的多样性"></a>3.身份的多样性</h4><p>如果一个云计算厂商想吃下一个大客户，满足其业务架构只是其一，还有一个十分重要的条件就是满足其组织架构。大企业绝对有实力也有能力解决其本身的业务架构，其实上不上云更多地是战略性的考虑，他们更加看重云服务的稳定性、安全性和可维护性。同时，其本身的组织架构也十分复杂，要想让其没有阻力地上云，解决其员工的身份问题首当其冲。所以现在主流的云厂商都会提供多种身份的表示方式，例如：子账号、组和角色。</p><h4 id="4-权限的描述方式"><a href="#4-权限的描述方式" class="headerlink" title="4.权限的描述方式"></a>4.权限的描述方式</h4><p>权限的描述方式也是十分重要的一个点，可以说这个点设计得好坏决定了你后期能否悠然地应对业务方的接入还是每天火急火燎地和各个业务方定协议定接口。我们知道所有需要访问控制的云产品必然有其支持的动作（Action），每个产品资源(Resource)的描述方式也各不相同，同时允许（Allow）还是禁止(Deny)针对某个资源的操作也是需要明确给出来的。这三个点构成了权限描述的三个要素。如果在前期的设计中没有充分思考这个问题，那么恭喜你，你很有可能给自己埋了一个深坑。你很有可能设计几张大表，来表示各个业务方支持的动作，资源以及用户和他们的关系。出现这样的设计是因为没有真正理解访问控制系统的业务领域。当你在设计这几张表的时候其实意味着访问控制系统在“理解”各个产品的功能，这对一个通用的访问控制系统是致命的。访问控制系统作为一个底层/共享的通用系统，对外输出地只能是能力，而不是去理解各个产品它们自己地业务领域。说到这里，我还是推荐所有的技术人员都有必要学习一下DDD的理论，就算不用自己写代码，系统性地学习其战略模式也会让你收益颇多。</p><h4 id="5-动态的授权体系"><a href="#5-动态的授权体系" class="headerlink" title="5.动态的授权体系"></a>5.动态的授权体系</h4><p>这一点相比以上4点来说要简单，这是因为如果你的访问控制系统已经很好地解决上面的挑战，那么你也就自然而然得获得了动态的授权体系。之说以是动态的，是因为云环境下用户和权限的关系往往不是一成不变的。用户在某个时刻希望获得A授权，而在另外一个时刻又希望获得B授权，而且有时授权还带有时效性，当过了截至时间授权也就自动失效了。这种动态性的需求是真实存在的，但我认为满足这个需求依赖于针对前4点的设计，如果把前面的设计做好了，那么系统也就自然而然地满足了动态性的需求，这是一个水到渠成的过程。</p><h2 id="业界是如何处理这个问题"><a href="#业界是如何处理这个问题" class="headerlink" title="业界是如何处理这个问题"></a>业界是如何处理这个问题</h2><p>说实话，当我去设计蜂巢的访问控制系统的时候并没有像现在考虑的这么全面。我意识到了一些问题的棘手性，也调研了现在业界做访问控制的方法，可以说做的最好的还是<a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="noopener">IAM</a>。<br><a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="noopener">IAM</a>将用户身份划归为子用户、组和角色，基本上这三种身份标识可以满足身份多样性的要求了。我觉得<a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="noopener">IAM</a>关于权限描述的方式令我耳目一新，它使用了领域专用（DSL）语言来描述权限，具体的形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">  &quot;Statement&quot;: &#123;</span><br><span class="line">    &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">    &quot;Action&quot;: &quot;s3:ListBucket&quot;,</span><br><span class="line">    &quot;Resource&quot;: &quot;arn:aws:s3:::example_bucket&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我第一次接触<a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">DSL</a>的概念，当时对这种设计模式是完全懵逼的，也不太理解其设计思想。随着考虑的问题越来越多，我发现了<a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">DSL</a>的强大之处。因为云环境下的访问控制系统最令人头疼的问题就是资源和权限的描述方式，这种极致的灵活性很难通过设计表格来获得。因为任何的以表为中心的设计方式都会映射到某个具体的领域模型上，又因为各个业务的权限控制各不相同，难道说我要根据各个业务来建立模型？前面也说过了，这是万万不可取的，这样设计只会让你深陷无尽的加班和调试之中。用<a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">DSL</a>来将访问控制和具体的权限理解分隔开了是最为合适的方式。</p><p>通过一套约定的DSL语法来描述权限，访问控制系统可以获得极大的灵活性，同时也不需要理解具体的权限。对权限的理解还是由各个业务方自己控制，这样系统就获得了最大程度的解耦。访问控制系统只用维护这套DSL语法就可以无限的扩展性，多么完美的方案啊！有时间我会专门写一篇关于DSL的文章来对其应用场景进行分析。</p><p>实际上，用DSL语法来描述权限也不是<a href="https://aws.amazon.com/cn/iam/" target="_blank" rel="noopener">IAM</a>首创，早在2001年就出现了响应的规范——<a href="https://en.wikipedia.org/wiki/XACML" target="_blank" rel="noopener">XACML</a>（可扩展的访问控制高标识语言），该规范现在已经发展到3.0了。其大致的鉴权流程如下图所示，如果对其原理由兴趣的同学可以查看对应的资料。</p><img src="/2017/03/07/对云环境下访问控制系统的思考/XACML.png" title="This image shows the XACML architecture and a sample authorization flow."><p>以上就是我对云环境下访问控制系统的一点理解，如有不严谨的地方，还望指正。总而言之，云环境下的访问控制系统面临的挑战很多，充分理解访问控制的原理有助于理解代码背后的意义，让我们的系统设计不至于走偏。基于<a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener">DSL</a>的访问控制模型已经成为业界的主流，但各个云计算厂商自身的业务场景和面向目标人群又各有不通，如何制定适应自身环境的DSL成为了一个关键。后续有机会我会分享网易蜂巢在访问控制系统方面的实践。</p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.cec-ceda.org.cn/information/book/info_6.htm" target="_blank" rel="noopener">访问控制</a><br><a href="http://blog.csdn.net/bluishglc/article/details/6577778" target="_blank" rel="noopener">访问控制模型ACL和RBAC</a><br><a href="https://martinfowler.com/books/dsl.html" target="_blank" rel="noopener">DSL</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2017/03/07/%E5%AF%B9%E4%BA%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%80%9D%E8%80%83/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring Boot反序列对象失败</title>
      <link>http://michael-j.net/2016/12/21/Spring-Boot%E5%8F%8D%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1%E5%A4%B1%E8%B4%A5/</link>
      <guid>http://michael-j.net/2016/12/21/Spring-Boot%E5%8F%8D%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1%E5%A4%B1%E8%B4%A5/</guid>
      <pubDate>Wed, 21 Dec 2016 02:21:55 GMT</pubDate>
      <description>
      
        本文记录了一次我遇到的诡异的反序列对象失败的debug过程，希望对遇到该问题的读者有帮助。
      
      </description>
      
      <content:encoded><![CDATA[<p>现在Spring Boot这个项目很火，尤其是微服务的流行，Spring Boot作为Java语言最热门的微服务框架之一，它极大地简化了Spring的配置过程。只需要一个注解就可以把整个工程拉起来，大大地降低了Spring的学习成本。我记得Spring Boot的某个开发人员说过，Spring Boot最令开发者激动的功能是可以自定义banner，哈哈，我也非常喜欢这个功能。</p><p>言归正传，开始介绍今天我遇到的一个诡异的问题。我使用Redis来缓存一些数据，但是这些数据在反序列的时候报错了。由于原工程涉及一些敏感信息，我新建了一个demo工程来说明这个问题。报错信息如下：</p><blockquote><p>java.lang.ClassCastException: com.netease.boot.dal.Product cannot be cast to com.netease.boot.dal.Product</p></blockquote><p>看到这个报错我就懵逼了，以致于我对了好几遍来确认眼睛没有看花。经过若干次重试，还是一样的错误。有人可能会对<code>Product</code>的实现产生怀疑，是不是没有加<code>serialVersionUID</code>，作为一个专业老司机，这点错误我还是不会犯得。我贴一下相关的代码：</p><p>Product类如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class Product implements Serializable &#123;</span><br><span class="line">    private static final long serialVersionUID = -5837342740172526607L;</span><br><span class="line"></span><br><span class="line">    @Size(min = 1, max = 32)</span><br><span class="line">    private String code;</span><br><span class="line">    @Size(min = 1, max = 16)</span><br><span class="line">    private String name;</span><br><span class="line">    @Size(max = 255)</span><br><span class="line">    private String description;</span><br><span class="line">    @NotNull</span><br><span class="line">    private EMailAddress principalEmail;</span><br><span class="line"></span><br><span class="line">    public Product(String code, String name, String description, EMailAddress principalEmail) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.description = description;</span><br><span class="line">        this.principalEmail = principalEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void changeName(String newName) &#123;</span><br><span class="line">        this.name = newName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void changeDescription(String newDescription) &#123;</span><br><span class="line">        this.description = newDescription;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void changePrincipalEMail(EMailAddress newPrincipalEMail) &#123;</span><br><span class="line">        this.principalEmail = newPrincipalEMail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getDescription() &#123;</span><br><span class="line">        return description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public EMailAddress getPrincipalEmail() &#123;</span><br><span class="line">        return principalEmail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Product&#123;&quot; +</span><br><span class="line">                &quot;bizCode=&apos;&quot; + code + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, description=&apos;&quot; + description + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, principalEmail=&quot; + principalEmail +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redis service相关的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">　　@Override</span><br><span class="line">public void put(String key, Serializable content) throws RedisException &#123;</span><br><span class="line">    Jedis jedis = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        jedis = redisPoolConfig.getJedis();</span><br><span class="line">        byte[] contentBytes = SerializationUtils.serialize(content);</span><br><span class="line">        jedis.set(key.getBytes(ENCODING), contentBytes);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        LOG.error(&quot;Put error:&#123;&#125;.&quot;, e.getMessage(), e);</span><br><span class="line">        throw new RedisException(e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (jedis != null) &#123;</span><br><span class="line">            redisPoolConfig.releaseJedis(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">　　@Override</span><br><span class="line">public &lt;T&gt; T get(String key) throws RedisException &#123;</span><br><span class="line">    Jedis jedis = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        jedis = redisPoolConfig.getJedis();</span><br><span class="line">        byte[] valueBytes = jedis.get(key.getBytes(ENCODING));</span><br><span class="line">        if (valueBytes == null || valueBytes.length == 0) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return SerializationUtils.deserialize(valueBytes);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        LOG.error(&quot;Get error:&#123;&#125;.&quot;, e.getMessage(), e);</span><br><span class="line">        throw new RedisException(e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (jedis != null) &#123;</span><br><span class="line">            redisPoolConfig.releaseJedis(jedis);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实在没办法，这尼玛是什么问题。因为我以前这么使用过，而且工作的非常好，为毛这次就不行了。没办法了，加debug代码，我让get方法返回Object，再外面强转，（冥冥中有一种感觉，像是泛型的问题）。修改后的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public Object get(String key) throws RedisException &#123;</span><br><span class="line">        Jedis jedis = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            jedis = redisPoolConfig.getJedis();</span><br><span class="line">            byte[] valueBytes = jedis.get(key.getBytes(ENCODING));</span><br><span class="line">            if (valueBytes == null || valueBytes.length == 0) &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            Object o = SerializationUtils.deserialize(valueBytes);</span><br><span class="line">            return o;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            LOG.error(&quot;Get error:&#123;&#125;.&quot;, e.getMessage(), e);</span><br><span class="line">            throw new RedisException(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (jedis != null) &#123;</span><br><span class="line">                redisPoolConfig.releaseJedis(jedis);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在反序列化之后加断电debug，观察变量o，得到如下所示的图：<br><img src="http://7xnwpq.com1.z0.glb.clouddn.com/redis-deser.png" alt="redis-get"></p><p>WTF! IDE都识别出来了变量o是Product类型，但是后续的强转还是失败。经过我的测试发现所有的通过redis反序列化出来的类都有这个问题。万般无奈之下，我陷入了深深地沉思之中…之中…中…</p><p>我开始怀疑是序列化的姿势不对，但是为毛以前可以啊。不管了，先加一段测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Product product = <span class="keyword">new</span> Product(<span class="string">"comb"</span>,<span class="string">"蜂巢"</span>,<span class="string">"云计算基础设施产品"</span>,<span class="keyword">new</span> EMailAddress(<span class="string">"hzxx@corp.netease.com"</span>));</span><br><span class="line">        <span class="comment">/*FileOutputStream fileOutputStream = new FileOutputStream("/home/mj/work/product.data");</span></span><br><span class="line"><span class="comment">        fileOutputStream.write(SerializationUtils.serialize(policyContext));</span></span><br><span class="line"><span class="comment">        fileOutputStream.flush();</span></span><br><span class="line"><span class="comment">        fileOutputStream.close();*/</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"/home/mj/work/product.data"</span>));</span><br><span class="line">        oos.writeObject(product);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*FileInputStream fileInputStream=new FileInputStream("/home/mj/work/product.data");</span></span><br><span class="line"><span class="comment">        byte[] rawPolicyContext=new byte[fileInputStream.available()];</span></span><br><span class="line"><span class="comment">        fileInputStream.read(rawPolicyContext);</span></span><br><span class="line"><span class="comment">        PolicyContext pc = SerializationUtils.deserialize(rawPolicyContext);</span></span><br><span class="line"><span class="comment">        System.out.println(pc);*/</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"/home/mj/work/product.data"</span>));</span><br><span class="line">        Product pc = (Product) ois.readObject();</span><br><span class="line">        System.out.println(pc);</span><br></pre></td></tr></table></figure><p>在倒数第二行打点，截图如下：</p><p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/diy-deser.png" alt="diy-deser"></p><p>没截图没毛病啊，很正常啊。我还专门测试了<code>SerializationUtils</code>版的序列化方式(把上面的注释去掉)，发现结果也很正常，这尼玛到底是怎么回事。实际上，<code>SerializationUtils</code>也就是jdk自带的<code>ObjectOutputStream</code>和<code>ObjectInputStream</code>的简单封装。</p><p>在我走投无路之际，正准备研究<code>instanceof</code>的工作原理的时候，脑中闪过一道灵感——难道是classloader的问题？说干就干，debug得到如下情况：</p><p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/classloader-1.png" alt="classloader-1"><br><img src="http://7xnwpq.com1.z0.glb.clouddn.com/classloader-2.png" alt="classloader-2"></p><p>终于发现问题所在了，原来两个classloader不一样，而<code>instanceof</code>是对同一个classloader而言的。再确定原因后，借助强大的google发现了这是Spring Boot DevTools的一个限制，相关的文档链接: <a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools-known-restart-limitations" target="_blank" rel="noopener">http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools-known-restart-limitations</a></p><p>原话是这样的：</p><blockquote><p>Restart functionality does not work well with objects that are deserialized using a standard ObjectInputStream. If you need to deserialize data, you may need to use Spring’s ConfigurableObjectInputStream in combination with Thread.currentThread().getContextClassLoader().<br>Unfortunately, several third-party libraries deserialize without considering the context classloader. If you find such a problem, you will need to request a fix with the original authors.</p></blockquote><p>DevTools是Spring Boot中一个很有用的工具，可以自动帮你重启应用，而不用你每次重启应用来debug，提高了生产效率。具体的用法可以参考相关的文档。这里的限制条件说的很清楚了，重启功能不能和使用标准的<code>ObjectInputStream</code>来反序列对象一起使用，如果你非要使用，那么请从线程的上下文中来获取classloader。</p><p>看到这里我瞬间明白了。因为devtools使用两个classloader，你工程中使用的第三方jar包被一个叫”base”的classloader所加载，而你正在开发的代码被一个叫”restart”的classloader所加载。如果检测到你的classpath路径下文件有变化，restart就会重新加载你工程的类。这样做以后能提高你的类加载速度，这在开发阶段是很有用的一个功能。</p><p>既然知道了原因，就很好解决了。因为我目前的工程比较小，而且只是一个restful后端应用，所有devtools对我的应用帮组不大。注释掉devtools依赖后就解决了上面的问题。如果你想使用这个工具，同时又有反序列化的需求，有两种方式解决：</p><ol><li>自定义一个<code>ObjectInputStream</code>，重写<code>resolveClass</code>方法，也可以使用Spring提供的<code>ConfigurableObjectInputStream</code>类。然后从<code>Thread.currentThread().getContextClassLoader()</code>获取classloader就可以解决该问题。</li><li>配置<code>spring-devtools.properties</code>文件，把你使用的第三方序列化工具也加入<code>restart　classloader</code>的控制范围内就行了。</li></ol><p>这两种方法均可以在Spring Boot的官方文档中有详细描述：<a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools" target="_blank" rel="noopener">http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools</a>。</p><p>总结，从发现问题到定位原因耗时两个多小时，还是要加强对基础概念的深入理解才能快速定位原因啊！</p><p>文本的示例demo我已上传到github，有兴趣的同学可以下载自己debug一下：<a href="https://github.com/mymonkey110/boot-demo.git" target="_blank" rel="noopener">https://github.com/mymonkey110/boot-demo.git</a></p><p>参考资料:</p><p><a href="http://docs.spring.io/spring-boot/docs/1.4.2.RELEASE/reference/htmlsingle/#using-boot-devtools" target="_blank" rel="noopener">Spring Boot官方手册</a><br><a href="https://github.com/spring-projects/spring-boot/issues/3805" target="_blank" rel="noopener">spring-boot issue</a><br><a href="http://stackoverflow.com/questions/30795262/redis-serialization-and-deserialization" target="_blank" rel="noopener">redis serialization</a><br><a href="http://stackoverflow.com/questions/37977166/java-lang-classcastexception-dtoobject-cannot-be-cast-to-dtoobject" target="_blank" rel="noopener">classcastexception</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/12/21/Spring-Boot%E5%8F%8D%E5%BA%8F%E5%88%97%E5%AF%B9%E8%B1%A1%E5%A4%B1%E8%B4%A5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>架构为什么会腐化</title>
      <link>http://michael-j.net/2016/12/15/%E6%9E%B6%E6%9E%84%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%85%90%E5%8C%96/</link>
      <guid>http://michael-j.net/2016/12/15/%E6%9E%B6%E6%9E%84%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%85%90%E5%8C%96/</guid>
      <pubDate>Wed, 14 Dec 2016 16:33:22 GMT</pubDate>
      <description>
      
        今天我想聊一下架构腐化的话题，分享一下我对于架构腐化的看法和应对之道。
      
      </description>
      
      <content:encoded><![CDATA[<p>架构腐化一词我已经忘了从哪本书上看到的了，但是这个词给我留下了非常深刻的印象。关键在于“腐”一词，充分而又形象的描述了架构是怎样一步一步从简单清爽走向复杂污秽的。请允许我用“污秽”一词来描述一个糟糕的架构，因为糟糕的架构就像是一潭散发着臭味的淤泥，让你不想靠近，一旦涉入其中就会难以自拔，苦不堪言。</p><p>我相信所有的开发者都不希望自己的参与项目是一潭淤泥，但是为什么会出现这么多糟糕的架构呢？难道是项目最初的设计者经验不够，又或者项目开发周期太赶？我认识事实并非如此。现在，软件开发者的水平都普遍提高了，因为我们有前人那么多经验可以借鉴，连刚毕业的大学生也知道用MVC模式来搭建框架。难道是MVC模式太挫了，不够用，实际上80%的项目用MVC模式足以应对。那到底是什么原因导致了项目腐化呢？我认为有以下三个原因：</p><h3 id="1-不理解项目的业务价值"><a href="#1-不理解项目的业务价值" class="headerlink" title="1. 不理解项目的业务价值"></a>1. 不理解项目的业务价值</h3><p>实际上，几乎所有的软件（尤其是商业软件）都有其所属的业务价值，理解你所开发的软件的业务价值对项目的成功来说至关重要。我发现很多程序员对业务需求不屑一顾，而对那些所谓的非功能性需求盲目的崇拜和追捧，其实这是一种本末倒置的行为。</p><p>现实世界是一个商业的世界，而商业世界则会充斥着各种各样的业务逻辑。理解这些业务逻辑会极大地增加你的见识、拓宽你的视野。如果你是一个在金融行业工作的程序员，那么长时间在金融领域工作的精力将极大地提高你的市场竞争力。但是如果你不愿意花时间去学习金融领域的知识，而是去盲目的追求最新的技术，那么其实你是丢芝麻捡西瓜，浪费了这个行业带个你的附加价值。我不是不鼓励程序员瞎折腾，实际上我自己有时候也喜欢瞎折腾，倒腾一些新玩意，这视乎是程序员的一种天性。我的意思是说不要放弃了解自己所在行业/领域的知识视为不见，而盲目的追求其他的“高大上”的技术。</p><p>为什么说理解项目的业务价值至关重要呢，那是因为只有理解了其业务价值你才能识别出来这个项目的核心领域所在，这样这个项目才不会走偏。传统的软件开放流程中有一个非常重要的角色存在，叫做“业务分析员”，他的工作在项目的概要设计和详细设计解决十分重要。虽然我也没见过有专职的人员干这个，但是这却是非常重要的一个角色。他会帮你分析你的业务，和产品经理沟通，理解产品的真正意图。在这个沟通过程中，你的领域模型也就逐渐的清晰起来了，哪些是核心哪些是支撑部分也就清楚了。</p><p>有些程序员在接到产品需求后立马就开始工作了，吭哧吭哧地撸袖子上阵，我认为这是十分要不得的。接到产品需求的第一反应不是要想着我要建哪些表哪些字段，而是要多问问自己这个需求是干啥的，产品经理真正的意图是啥，为什么要我来做，跟我的系统有啥关系。千万不要盲从产品经理的话，实际上有些时候他们自己也不知道自己要干啥，为啥要这么干。这个时候必要的交流是不可少的，随着对话的深入，你和产品对真是的需求都会有着更深地认识。新人和实习生在这方面经验往往不足，此时最好找一个比较资深的程序员帮你梳理一下业务流程。</p><p>相反，如果你不知道你的系统的业务价值或者核心所在，什么需求你都来着不拒，那么恭喜你，你的系统正在腐化。当你在抱怨说“为什么这个业务要放在我这里”，“这个我有什么关系”之类的话的时候就可以闻到一丝“腐化”的闻到。你可能会说项目工期紧、人手太少、需求太多之内的外部原因，所以临时地先加到系统中搞一下。Ok，这没有任何问题。但是我还是要说，你知道你的系统的核心价值所在吗？如果你的回答是Yes，那么恭喜你，你是一名合格的程序员了。否则，你可能需要学习一下技术之外的东西的了－那就是沟通。</p><h3 id="2-过度设计"><a href="#2-过度设计" class="headerlink" title="2. 过度设计"></a>2. 过度设计</h3><p>软件开发的头号敌人就是复杂度。现在软件开发是如此的困难，动不动就有十几万行代码出现，但是现实世界就是如此的复杂，不会因为你采用某种架构或者奇淫巧技就能把代码行数降下来。好的架构设计会将系统的复杂度控制在一个合理的范围之内，因为人所能驾驭的代码行数最多也就几十万行，如果一个系统的代码行数达到百万行，那么这个系统就很危险了。现在微服务架构如此火爆，不得不说有这方面的原因。</p><p>如果你在设计一个新系统，那么我需要提醒你一定要控制好复杂度。一个好的系统的核心域往往是简单的、直观的，其他人很快就能理解其核心的工作原理。如果一开始系统设计的十分复杂，那么这个系统的扩展性就会很差，后续的维护将不可想象。但是是不是在设计之初就完全不考虑后续的变化了呢？我的建议是你只需要把你的核心领域模型建好，多问问自己系统最核心的价值是提供什么服务的，照着这个方向去设计，那么你的系统就不会走偏。灵活性和可扩展型往往只是领域模型的延伸，这是一个水到渠成的过程。</p><p>非要给个度的话，我认为5%刚刚好。不要出现超过5%的跟你本次需求无关的概念和行为，而且这5%还是你能确定在不久的将来就会使用的扩展。</p><p>还是那句话，好的设计往往是简单的，复杂是万恶之源。</p><h3 id="3-懒于重构"><a href="#3-懒于重构" class="headerlink" title="3. 懒于重构"></a>3. 懒于重构</h3><p>过度设计不好，完全不设计也不行，尤其是随着敏捷开发的流行，持续交付优于提前设计的思想逐步流行。现在软件交付速度是如此之快，很有可能刚刚设计好的系统，下个月就全变样了。应对这种变化的唯一方法就是持续重构。</p><p>没有任何设计能预料到未来的变化，代码可能会发生变化。新的功能会持续的添加进来，老的功能也在持续的改变。而且每次迭代或者交付，都可能会对核心领域产生影响。千万不要对这种影响视而不见，因为它在改变着你的领域模型。正确地方式是经常调整领域模型以适应新功能所带来的变化，虽然每次调整的幅度可能很小，但是这却能让你的领域模型处于健康的工作状态。没有领域模型或者系统在一开始就是完美的，之所以它们能在后续的迭代过程中良好的工作离不开不断地重构。</p><p>重构不是等到你的系统无药可救的时候才想到的事，而是应该在其不断开发过程中一直进行的工作。如果说持续交付提高了你系统的竞争力，那么持续重构则是这种竞争力的有力保障！</p><p>以上三点是我认为架构腐化最致命的原因，很多思想来源于<a href="https://en.wikipedia.org/wiki/Domain-driven_design" target="_blank" rel="noopener">DDD</a>、<a href="https://book.douban.com/subject/1229923/" target="_blank" rel="noopener">重构</a>和<a href="https://en.wikipedia.org/wiki/Agile_software_development" target="_blank" rel="noopener">敏捷开发</a>。linus torvalds曾经说过：</p><blockquote><p>Talk is cheap. Show me the code.</p></blockquote><p>我认为<em>Talk is not cheap</em>, 好的思想和开发方式价值连城，想好了再做会提高你的工作效率，从而提升你的生活品质。</p><p>这篇文章从下笔到完成，拖了半个多月了，期间琐事太多。对这个话题有兴趣的朋友我们可以留言讨论。</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/12/15/%E6%9E%B6%E6%9E%84%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%85%90%E5%8C%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>值对象的威力</title>
      <link>http://michael-j.net/2016/10/18/%E5%80%BC%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A8%81%E5%8A%9B/</link>
      <guid>http://michael-j.net/2016/10/18/%E5%80%BC%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A8%81%E5%8A%9B/</guid>
      <pubDate>Tue, 18 Oct 2016 15:27:45 GMT</pubDate>
      <description>
      
        值对象是DDD中非常重要的一种技术，掌握这种技术让你写代码事半功倍，体会到OO的精妙。
      
      </description>
      
      <content:encoded><![CDATA[<p>值对象是DDD中非常重要的一种技术，掌握这种技术让你写代码事半功倍，体会到OO的精妙。如果你是一名Java程序员，我相信你或多或少地见过值对象了，只是你没有意识到而已。</p><p>引用维基百科的<a href="https://en.wikipedia.org/wiki/Value_object" target="_blank" rel="noopener">解释</a>：</p><blockquote><p>In computer science, a value object is a small object that represents a simple entity whose equality is not based on identity.</p></blockquote><p>字面意思就是，值对象是一个小对象，它代表着一个简单的实体，而实体的相等性不取决于它的ID。</p><p>刚刚接触OO编程的新手看完上面的解释相信直接是懵逼的，跟我接触这一概念时一样。如何理解值对象了，我还是举一个栗子。比如我们在做一个短信推送的服务，需要根据目标用户的手机号推送到相应的短信网关。我们定义了一个根据手机号推送短信的interface，很有可能我们是这么设计：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void sendMessage(String phone, String message) &#123;</span><br><span class="line">    if(StringUtils.isBlank(phone) &amp;&amp; phone.length()!=13) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;phone format error:&quot;+phone);</span><br><span class="line">    &#125;</span><br><span class="line">    if(phone.starts(&quot;134&quot;)) &#123;</span><br><span class="line">        sendMessageToChinaMobileGateway(phone,message);</span><br><span class="line">    &#125;else if(phone.starts(&quot;130&quot;)&#123;</span><br><span class="line">        sendMessageToChinaUnionGateway(phone,message);</span><br><span class="line">    &#125;else if(phone.starts(&quot;189&quot;) &#123;</span><br><span class="line">        sendMessageToChinaTelecomGateway(phone,message);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        throw new RuntimeException(&quot;unknown phone range&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的过程我们只考虑3个号码段，134(移动)\130(联通)\189(电信)，其他的号码短我们暂不处理。上面的处理方式有什么问题？ </p><p>如果我们的工程里面只有一个地方用的<code>phone</code>的概念，也只有一个地方对<code>phone</code>所属的号码短进行判断，那么没问题。上面的写法没有任何问题，因为它是一个简单问题。但是如果你在做一个短信推送的应用，在你的工程里面会只有一个地方会使用<code>phone</code>这个概念吗，也之有一个地方需要判断号码短吗？ 显然不可能。</p><p>有人可能会争论说，不就是判断号码归属吗？我可以搞一个类似<code>PhoneQueryService</code>之类的查询类，再提供一个<br><code>Operator queryBelong(String phone)</code>的interface不就搞定了吗？ 当然，这么做也没有问题。但是当你的问题域逐渐变得复杂的时候，你就会开始有些不舒服了。因为每一个出现<code>phone</code>的地方，你发现基本上都会需要<code>PhoneQueryService</code>，但是他们在代码上又是两个东西。这种做饭的滥用最终会导致<code>Fat Service</code>的出现，代码的复用性会急剧降低。</p><p>究其原因，是因为我们把<code>phone</code>这个概念和<code>phone</code>的行为给拆开了。你可以用<code>String</code>代表任何字符类型，可以是<code>phone</code>，也可以是<code>name</code>，基本上这种类型可以代表任何东西。使用你API的人无法从中得到任何信息，除了你把变量名称叫做<code>phone</code>以外。同时，判断手机号网段这个动作是和<code>phone</code>本身强相关的，为什么不把这个动作加到<code>phone</code>里面了？！ 现在，我们重构一下代码，得到类似下面的代码结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Phone &#123;</span><br><span class="line">   private String phoneNumber;</span><br><span class="line">   public Phone(String phoneNumber) &#123;</span><br><span class="line">      if(!validate(phoneNumber)) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;phone format error:&quot;+phone);</span><br><span class="line">      &#125;</span><br><span class="line">      this.phoneNumber = phoneNumber;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public static boolean validate(String phoneNmber) &#123;</span><br><span class="line">      //验证逻辑</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public boolean isMobile() &#123;</span><br><span class="line">        return phoneNumber.starts(&quot;134&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   public boolean isUnion() &#123;</span><br><span class="line">         return phoneNumber.starts(&quot;130&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public boolean isTelecom() &#123;</span><br><span class="line">        return phone.starts(&quot;189&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public String getRawPhone() &#123;</span><br><span class="line">        return this.phoneNumber;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public boolean isSameWith(Phone other) &#123;</span><br><span class="line">        return other!=null&amp;&amp;this.phoneNumber.equals(other.getRawPhone());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们新增了一个叫<code>Phone</code>的类，并加入了判断网段归属的逻辑。引入这个类以后<code>sendMessage()</code>发生了什么变化呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void sendMessage(Phone phone, String message) &#123;</span><br><span class="line">    checkNotNull(phone);</span><br><span class="line">    </span><br><span class="line">    if(phone.isMobile()) &#123;</span><br><span class="line">        sendMessageToChinaMobileGateway(phone,message);</span><br><span class="line">    &#125;else if(phone.isUnion())&#123;</span><br><span class="line">        sendMessageToChinaUnionGateway(phone,message);</span><br><span class="line">    &#125;else if(phone.isChinaTelecom()) &#123;</span><br><span class="line">        sendMessageToChinaTelecomGateway(phone,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咋一看，代码好像没有怎么减少啊。对于这个interface来说代码确实没有减少，反而我们还新加一个类。但是现在看看我们获得了什么：</p><ul><li>首先，方法签名变了。不在用String了，取而代之的是<code>Phone</code>类型。这对使用者的约束更强了，我们也再也不用判断phone是否合法了。</li><li>其次，判断网段归属和<code>phone</code>合在一起了，这样我需要判断归属运营商的时候直接调用<code>phone</code>的方法就行了。</li></ul><p>现在，我们已经得到了一个值对象了，那就是<code>Phone</code>。它是一个小对象，代表了手机号这个概念，它的相等性是基于其业务属性的，而不是ID，而且值对象根本就没有ID这个概念。</p><p>值对象最大的好处在于增加了代码复用，同时它也是类型安全的（这一点和我之前提到了enum类似）。如果你只在一个地方使用值对象，那么你是不会体会到值对象带来的好处的。但是，每当你的代码应用一次值对象，你就会收获值对象带来的好处。<strong><em>用的越多，收益越大</em></strong>，这一点和单元测试比较类似。使用值对象的另外一个好处就是前置的安全校验，尤其是你在编写SDK或者开放接口的时候。因为你无法知道使用者会如何使用你的API，那么通过值对象来获得一个前置的安全校验有着非常大的好处。</p><p>值对象用在什么地方呢？ 我个人的经验就是，如果在你的工程中反复出现一个具体的概念（往往跟现实生活有关），而且这个概念中涉及的行为是某种确定性的（比如你知道了手机号，就知道对应的运营商一样），那么你可以考虑一下值对象。引用《实现领域驱动设计》中关于值对象特征的定义:</p><ul><li>描述了领域中的一件东西</li><li>不可变的</li><li>将不同的相关属性组合成了一个概念整体</li><li>当度量和描述改变时，可以用另外一个值对象予以替换</li><li>可以和其他值对象进行相等性比较</li><li>不会对协作对象造成副作用</li></ul><p>最为重要的就是它描述了领域中的某件东西，并且它是不可变的。值对象一旦创建就不会发生变化，如果你需要表示另外一个东西，用另外一个值对象来代替它。</p><p>值对象是DDD中非常重要的部分，我们应该尽可能对使用值对象来建模，因为它是易于使用和替换的。但是值对象的实例化确实一个令人头疼的问题，尤其是聚合中存在1对多的关系时。由于这些内容涉及到DDD的多方面的知识，我不在这里展开讨论了。后续会专门讲值对象的持久化问题。之所以在讲DDD之前首先讲值对象，因为它还是少数几个可以完全脱离DDD并不失其威力的利器。就算你完全不了解DDD，也可以非常顺手的使用值对象。</p><p>说了这么多，我相信你也对值对象有个具象的认识了。纸上得来终觉浅，不如看看你现有的代码中哪些可以用值对象来代替吧！</p><p>参考文献：</p><p><a href="https://en.wikipedia.org/wiki/Value_object" target="_blank" rel="noopener">Wikipedia值对象的定义</a><br><a href="http://martinfowler.com/bliki/ValueObject.html" target="_blank" rel="noopener">Martin Fowler值对象的解释</a><br><a href="https://book.douban.com/subject/25844633/" target="_blank" rel="noopener">实现领域驱动设计</a><br><a href="https://www.infoq.com/presentations/Value-Objects-Dan-Bergh-Johnsson" target="_blank" rel="noopener">Power Use of Value Objects in DDD</a>: 强烈推荐</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/10/18/%E5%80%BC%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A8%81%E5%8A%9B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>论Enum的重要性</title>
      <link>http://michael-j.net/2016/09/20/%E8%AE%BAEnum%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</link>
      <guid>http://michael-j.net/2016/09/20/%E8%AE%BAEnum%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/</guid>
      <pubDate>Tue, 20 Sep 2016 14:18:11 GMT</pubDate>
      <description>
      
        Enum是Java中非常重要的一种数据类型，用好Enum是写好代码必须掌握的技术。
      
      </description>
      
      <content:encoded><![CDATA[<p>我们都知道Java中有一种数据类型是枚举类，实际上很多强类型的语言都有枚举。但是很多人对枚举类不那么重视，或者不能正确地应用枚举，也就不能发挥其威力了。这里分享一下我对枚举的理解，及其常见的用法。</p><p>既然Java专门为枚举建立了类型，那么我们应该在什么时候去使用enum呢，我认为在以下两个场景中可以尝试使用。</p><h4 id="1-封装有限的的变化"><a href="#1-封装有限的的变化" class="headerlink" title="1. 封装有限的的变化"></a>1. 封装有限的的变化</h4><p>相信很多人都遇到这样一个场景，我们有一个父类，父类下面有几个子类，而这几个子类是可以确定的。我们并不想父类被不相干的类所继承，那么我们可以通过enum来限制子类。实际上你想把代码控制在预期的范围之类时，都可以通过enum来达到效果。</p><h4 id="2-状态代码"><a href="#2-状态代码" class="headerlink" title="2. 状态代码"></a>2. 状态代码</h4><p>我们经常会遇到使用状态码的情况，例如在任务处理过程中。我发现很多人喜欢使用int或者long来表示状态码，然后通过定义对应的变量来表示其意义。不是说这种方式不好，但我从中嗅出了一丝坏味道。如果通过int或者long来表示状态码，如果出现了不在业务范围内的值该怎么办？为什么状态码不能直接表示其意义，还需要通过文档来说明呢？我一直比较推崇Self-Explained的编程习惯，代码和文档合二为一。</p><p>那么使用Enum有什么好处了，我们为什么要用Enum呢？相比于int或者string，enum最大的优势就是有它是类型安全的。如何理解类型安全呢，我举一个例子：很多APP都有第三方登陆的功能，服务器要根据客户端传过来的登陆类型(type)来调用对应平台的接口来获取用户信息。我的代码是这样写的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TPAccountRouterImpl implements TPAccountRouter &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    @Qualifier(&quot;wbAccountResolver&quot;)</span><br><span class="line">    private TPAccountResolver wbTPAccountResolver;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    @Qualifier(&quot;wxAccountResolver&quot;)</span><br><span class="line">    private TPAccountResolver wxTPAccountResolver;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    @Qualifier(&quot;qqAccountResolver&quot;)</span><br><span class="line">    private TPAccountResolver qqTPAccountResolver;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public TPAccount getAccountInfo(final String tuid, String accessToken, AccountType accountType) throws TPException &#123;</span><br><span class="line">        TPAccountResolver tpAccountResolver;</span><br><span class="line"></span><br><span class="line">        switch (accountType) &#123;</span><br><span class="line">            case WB:</span><br><span class="line">                tpAccountResolver = wbTPAccountResolver;</span><br><span class="line">                break;</span><br><span class="line">            case WX:</span><br><span class="line">                tpAccountResolver = wxTPAccountResolver;</span><br><span class="line">                break;</span><br><span class="line">            case QQ:</span><br><span class="line">                tpAccountResolver = qqTPAccountResolver;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                throw new TPException(&quot;unknown account type&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return tpAccountResolver.getAccountInfo(tuid, accessToken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TPAccountRouter</code>是一个账号解析的路由器，根据<code>AccountType</code>来调用对应平台的解析器来解析。配合switch-case语法，利用策略模式我们就可以写出一个还算优美的代码。如果把<code>accountType</code>换成<code>int</code>会怎样？那么我们不得不加上一句及其烦人的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(accountType&lt;0 || accountType&gt;3) &#123;</span><br><span class="line">  throw new IllegalArgumentException(&quot;type illegal&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保护性代码，同时将case子句换成一个一个静态常量，最后还在API文档上配上说明，1,2,3各代表什么意义。我相信大家一定能感受出来两种代码写法带来的区别。</p><p>另外一个有点，我认为就是enum的self-explain特性，上面的例子中也直观的反应了这一点。Enum结合了int和String的优点，并将其发扬光大。</p><p>关于Enum怎么用，网上有很多的介绍，可以参考这篇文章：<a href="http://www.cnblogs.com/happyPawpaw/archive/2013/04/09/3009553.html" target="_blank" rel="noopener">http://www.cnblogs.com/happyPawpaw/archive/2013/04/09/3009553.html</a>，还是比较全面的。最常用的就是直接申明各个枚举值，基本上能满足大部分业务场景了。也有很多场景下，我们会在enum中加入成员变量，这是因为业务中存在和Enum相对应的文档和动作。再举一个我写过的代码例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public abstract class AbstractCheckedException extends Exception &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = -3143228702981231790L;</span><br><span class="line"></span><br><span class="line">    public AbstractCheckedException() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected abstract ErrorCode errorCode();</span><br><span class="line"></span><br><span class="line">    public int code() &#123;</span><br><span class="line">        return errorCode().code();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String msg() &#123;</span><br><span class="line">        return errorCode().msg();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static int successCode() &#123;</span><br><span class="line">        return ErrorCode.SUCCESS.code();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public enum ErrorCode &#123;</span><br><span class="line">        SUCCESS(1000, &quot;success&quot;),</span><br><span class="line">        PARAM_ERROR(1001, &quot;parameter error&quot;),</span><br><span class="line">        ILLEGAL_REQUEST(1002, &quot;illegal request&quot;),</span><br><span class="line">        SYS_ERROR(1003, &quot;system error&quot;),</span><br><span class="line">        NAMESPACE_NOT_FOUND(2001, &quot;namespace not found&quot;),</span><br><span class="line">        NAMESPACE_ALREADY_EXIST(2002, &quot;namespace already exist&quot;),</span><br><span class="line">        APP_NOT_FOUND(2003, &quot;app not found&quot;),</span><br><span class="line">        APP_ALREADY_EXIST(2004, &quot;app already exist&quot;),</span><br><span class="line">        TASK_NOT_FOUND(2005, &quot;task not found&quot;),</span><br><span class="line">        TASK_ALREADY_EXIST(2006, &quot;task already exist&quot;),</span><br><span class="line">        CRON_EXPRESSION_ERROR(2007, &quot;cron expression error&quot;),</span><br><span class="line">        ZOOKEEPER_ERROR(3001, &quot;zookeeper error&quot;),</span><br><span class="line">        NODE_NOT_EXIST(3002, &quot;node not exist&quot;),</span><br><span class="line">        NODE_ALREADY_EXIST(3003, &quot;node already exist&quot;),</span><br><span class="line">        UNKNOWN_ERROR(9999, &quot;unknown error&quot;);</span><br><span class="line"></span><br><span class="line">        private int code;</span><br><span class="line">        private String msg;</span><br><span class="line"></span><br><span class="line">        ErrorCode(int code, String msg) &#123;</span><br><span class="line">            this.code = code;</span><br><span class="line">            this.msg = msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int code() &#123;</span><br><span class="line">            return code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String msg() &#123;</span><br><span class="line">            return msg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static ErrorCode getErrorCode(int code) &#123;</span><br><span class="line">            for (ErrorCode it : ErrorCode.values()) &#123;</span><br><span class="line">                if (it.code() == code) &#123;</span><br><span class="line">                    return it;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return UNKNOWN_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我在<a href="https://github.com/mymonkey110/jscheduler" target="_blank" rel="noopener">jscheduler</a>中封装了高层了受检异常，这点收到了Zookeeper中<code>KeeperException</code>的启发。我在ErrorCode中加入了code和message，因为code和message是和这个枚举绑定的，放到枚举中再合适不过呢，我将之称为文档的绑定。还有情况是因为业务动作和枚举相关，比如第三方登陆的例子，我们完全可以第三方登陆接口的URL放到<code>AccountType</code>中，然后后续的解析方法直接从中取的URL进行调用就行，因为这个解析方法是和Enum一一对应的。这样的例子实在太多了，不胜枚举。</p><p>总之，如果你有一类相识的业务场景，并且这些业务场景只有有限的变化，是可以预期的，那么建议你考虑一下使用Enum。相信我，它值得尝试！</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/09/20/%E8%AE%BAEnum%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DDD-复杂问题解决之道</title>
      <link>http://michael-j.net/2016/09/18/DDD-%E5%A4%8D%E6%9D%82%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/</link>
      <guid>http://michael-j.net/2016/09/18/DDD-%E5%A4%8D%E6%9D%82%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/</guid>
      <pubDate>Sun, 18 Sep 2016 14:09:45 GMT</pubDate>
      <description>
      
        本文分享了我对于DDD的观点和对程序员成长的认识。
      
      </description>
      
      <content:encoded><![CDATA[<p>上个星期在团队内部进行了关于DDD的分享，分享链接：<a href="http://slides.com/michael-j/ddd-tackling-complex-problem#/" target="_blank" rel="noopener">http://slides.com/michael-j/ddd-tackling-complex-problem#/</a>。</p><p>分享的过程中发现还是有很多小伙伴对DDD不太了解，或者一知半解。DDD其实不是一个新的技术，实际上距离Eric Evans出版《Domain Driven Design》已经12年了。与其说DDD是一门编程技术，我更愿意将它称之为软件开发方法。我发现国内的技术分享两级分化比较严重，要么太过高大上——关于架构、新技术之类，要么太底层——关于数据库优化、底层性能优化之类，但很少有人来讲中间的那一层——软件编程方法。</p><p>在我看来，一个新人要成长为技术大牛，都要经历下面三个阶段：</p><h3 id="1-Make-It-Work-（1-2-年）"><a href="#1-Make-It-Work-（1-2-年）" class="headerlink" title="1. Make It Work （1~2 年）"></a>1. Make It Work （1~2 年）</h3><p>刚刚踏入职场的新手程序员往往处于这个阶段，他们首要的工作是要让系统能正常工作。出于工作的需要，他们开始了解语言、框架、数据库、缓存。如果在大公司的话，可能会更早的接触服务框架、中间件等。但是他们的主要工作还是实现业务需求，对代码的质量没有过多的要求。有时候可能感觉到现在的写法可能不太好，但是又不知道怎么去组织代码才能让它们看上去更舒服，经常会刚到迷茫，好像刚工作一年就看到了未来十年的影子，这是十分令人沮丧的。这个阶段一般会持续1~2年。</p><h3 id="2-Write-better-code-3-5-年"><a href="#2-Write-better-code-3-5-年" class="headerlink" title="2. Write better code (3~5 年)"></a>2. Write better code (3~5 年)</h3><p>这个阶段是新手程序员向老司机转变的一个时机。他们已经能独立完成常见的业务需求，并给出自己的意见。写出的代码不仅是为了完成功能，更多地是在寻找一种平衡的美。这种美很难言明，它是介于现实逻辑和代码组织的一种完美结合。正好我也处于这个阶段，我会有时因为一次完美的解耦而欣喜，也会因为业务的妥协而忧伤。在这个时期，我在寻找一种“术”，一种能随心所欲驾驭代码的术。我开始了解到OO技术的精妙，开始理解设计模式的妙用，学着掌控整个项目的发展，只为达到软件的最高境界——“可复用”。这个阶段肯能持续时间很长，因为我们要细细去品味优秀代码的味道并为己所用，这需要时间的沉淀。</p><h3 id="3-Create-suitable-architect-5年"><a href="#3-Create-suitable-architect-5年" class="headerlink" title="3. Create suitable architect (5年 ~ )"></a>3. Create suitable architect (5年 ~ )</h3><p>当你能随心所欲的操纵代码时，你就会去寻找你还未涉及的阶段。这个阶段可能会产生多种分化，你可能会对项目的整体架构产生兴趣而走上架构师的道路，也可能对某些专有技术情有独钟而成为某一方面的技术专家。不论后面的发展方向如何，此时代码对你已经不是问题了，而成为了你的“工具”。国内的技术分享往往也集中在这个层面。好的架构往往有着相似的部分，但是每个架构又有它独有的业务背景，你需要剥离其中的业务部分，找出能为自己的项目有用的设计。没有完美的架构，只有最合适的架构，任何现实的架构都充满着妥协和折中。这个阶段持续时间可能更长，你也需要机缘能参与几个重大项目的架构设计。</p><p>说白了，软件开发还是一门需要经验的行业。我并不太相信天才的存在，因为没有长时间浸泡在代码之中项目之中，你是很难理解代码和业务的关系的，这需要大量的时间。现在“新技术”层出不穷，我的建议是，在没有成为真正的架构师之前，不要盲目的追逐这些“新技术”，这只会耗费你大量的精力。</p><p>言归正传，我认为DDD是一门教你Write better code的软件开发方法。就算你是底层的研发人员，我相信你也会从中收益。如果你是一名业务程序员（80%的都是），为什么不多花一些时间去真正理解你的业务呢？不要再去追逐那些“新技术”，多去思考一下我的代码该如何解耦、业务如何切分、代码怎么写才能更好的复用。如果你坚持这么做，我相信不出两年你对技术和业务的理解会发生质变。</p><p>学习DDD其实还是有一定的曲线的，如果你的团队中已经有人尝试过DDD了不妨向他取经，因为DDD的精髓更多的在于编程的思想，而不在于具体的代码。后期我会分享一些关于DDD、OO、Microservice方面的心得，如果你有这方面的心得和困惑也可以与我交流，分享是技术人成长的很重要的途径。</p><p>近期，我换了工作，加入了网易蜂巢团队。以前上研究生的时候就搞云计算，想不到时隔两年之后，又加入了云计算的浪潮之中，也算是殊途同归。</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/09/18/DDD-%E5%A4%8D%E6%9D%82%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E4%B9%8B%E9%81%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Zookeeper:distributed process coordination中文版</title>
      <link>http://michael-j.net/2016/08/02/Zookeeper-distributed-process-coordination/</link>
      <guid>http://michael-j.net/2016/08/02/Zookeeper-distributed-process-coordination/</guid>
      <pubDate>Tue, 02 Aug 2016 08:53:05 GMT</pubDate>
      <description>
      
        Zookeeper:distributed process coordination中文译本。
      
      </description>
      
      <content:encoded><![CDATA[<p>最近使用zookeeper比较多，但是国内关于zookeeper方面的数据太少。能介绍其使用同时也讲解原理的书太少了。Zookeeper:distributed process coordination是一本关于zookeeper不可多得的好书。读完以后我对zookeeper有能一个非常直观的了解。</p><p>现在分布式应用开发越来越常见，基本上大部分的分布式应用都需要与其它应用进行协同。Zookeeper非常擅长于处理分布式协同。所以我决定利用工作之余的时间翻译这本书籍，完全出于个人兴趣。</p><p><img src="/images/zookeeper/zookeeper.jpg" alt="zookeeper:distributed process coordination"></p><p><a href="https://www.gitbook.com/book/mymonkey110/zookeeper-distributed-process-coordination" target="_blank" rel="noopener">GitBook阅读地址</a></p><p><a href="https://github.com/mymonkey110/zookeeper-book/blob/master/SUMMARY.md" target="_blank" rel="noopener">GitHub阅读地址</a></p><p>由于本人第一次翻译技术书籍，肯定会有很多翻译不当的地方，欢迎大家能及时指正。如果有对本书翻译有兴趣的小伙伴，可以通过以下方式参与贡献：</p><p>参与讨论：邮件列表：<a href="mailto:&#x7a;&#107;&#95;&#x74;&#114;&#x61;&#110;&#x73;&#x6c;&#x61;&#x74;&#x6f;&#114;&#64;&#x67;&#x72;&#111;&#117;&#x70;&#115;&#x2e;&#x31;&#54;&#51;&#46;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#x7a;&#107;&#95;&#x74;&#114;&#x61;&#110;&#x73;&#x6c;&#x61;&#x74;&#x6f;&#114;&#64;&#x67;&#x72;&#111;&#117;&#x70;&#115;&#x2e;&#x31;&#54;&#51;&#46;&#99;&#111;&#x6d;</a>，申请加入地址：<a href="http://163.fm/UJNWGHS" target="_blank" rel="noopener">http://163.fm/UJNWGHS</a></p><p>部分贡献：通过issue进行讨论，如果通过，我会进行修改。这种方式我无法统计贡献者的名字，建议使用下面的方式参与翻译。</p><p>在 GitHub 上 fork 到自己的仓库，如 user/zookeeper-book，然后 clone 到本地，并设置用户信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:user/zookeeper-book.git</span><br><span class="line">$ cd zookeeper-book</span><br><span class="line">$ git config user.name &quot;yourname&quot;</span><br><span class="line">$ git config user.email &quot;your email&quot;</span><br></pre></td></tr></table></figure><p>修改代码后提交，并推送到自己的仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ #do some change on the content</span><br><span class="line">$ git commit -am &quot;Fix issue #1: change helo to hello&quot;</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><p>在 GitHub 网站上提交 pull request。<br>定期使用项目仓库内容更新自己仓库内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add upstream https://github.com/mymonkey110/zookeeper-book.git</span><br><span class="line">$ git fetch upstream</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git rebase upstream/master</span><br><span class="line">$ git push -f origin master</span><br></pre></td></tr></table></figure><p>PS: 2016/8/15 Update:</p><p>很遗憾，因为授权的问题，不得不停止翻译的工作。本书已经有中文版的译本了，我后来才得知，所以我也不会取得中文版的翻译授权了。因为本人第一次翻译，事先没有搞清这些事情，才导致了现在的情况。不得不说，十分遗憾，感谢关注本书翻译的伙伴。我相信已有的中文译本应该还不错，如果需要的伙伴可以去购买。So, that’s it, it’s over, thanks for your attention.</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/08/02/Zookeeper-distributed-process-coordination/#disqus_thread</comments>
    </item>
    
    <item>
      <title>让百度索引你的github的博客</title>
      <link>http://michael-j.net/2016/06/23/%E8%AE%A9%E7%99%BE%E5%BA%A6%E7%B4%A2%E5%BC%95%E4%BD%A0%E7%9A%84github%E7%9A%84%E5%8D%9A%E5%AE%A2/</link>
      <guid>http://michael-j.net/2016/06/23/%E8%AE%A9%E7%99%BE%E5%BA%A6%E7%B4%A2%E5%BC%95%E4%BD%A0%E7%9A%84github%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid>
      <pubDate>Thu, 23 Jun 2016 08:53:05 GMT</pubDate>
      <description>
      
        Github屏蔽了百度的爬虫，导致众多托管在github上的博客无法进入百度的索引，损失了很多阅读量。本文分享一下解决这个问题的个人心得。
      
      </description>
      
      <content:encoded><![CDATA[<p>不知不觉中，写博客是一件很潮的事情，尤其是程序员。自然，我也是其中的一员。博客无非两种类型，一种是动态类型的，以Wordpress为代表；另外一种则是存静态的，以Hexo, Jekyll为代表。现在，程序员都喜欢把博客托管在github上。一来省去了买虚拟主机的费用，二来可以通过git工具来管理博客，用起来十分方便。我的博客就是用hexo搭建的。</p><p>首先，github是不支持动态博客的，它只能托管存静态的网页，也就是说你只能放置一些html,js,css,jpg,png…之类的静态文件。其次，github屏蔽了百度的爬虫，也就是说百度不能索引你的博客内容。虽说程序员基本上都用google，但是你肯定还是想能被百度搜索到的。想知道自己的博客是否被索引可以这样查询，在搜索引擎中输入：site: 你的博客域名。</p><p>解决github屏蔽百度爬虫的思路就是“迁出”我们的博客，让百度爬虫不直接访问github就行了。</p><h2 id="方案一：利用CDN制作镜像网站"><a href="#方案一：利用CDN制作镜像网站" class="headerlink" title="方案一：利用CDN制作镜像网站"></a>方案一：利用CDN制作镜像网站</h2><p>我们知道cdn能缓存静态资源，如果我们利用cdn制作我们的镜像网站，再将百度索引的解析cdn上，那么爬虫就不会访问github服务器了，而是访问cdn缓存服务器。国内最火的cdn服务商就是七牛和又拍云了。我发现七牛不支持自动回源功能，而又拍云在这方面做得比较好，我们可以使用又拍云来做为我们博客的镜像网站。</p><p>我以本站为例，讲一下配置的流程：</p><h4 id="1-创建服务"><a href="#1-创建服务" class="headerlink" title="1. 创建服务"></a>1. 创建服务</h4><p>   <img src="/images/baidu_index/3.pic_hd.jpg" alt="创建服务"></p><h4 id="2-配置回源"><a href="#2-配置回源" class="headerlink" title="2. 配置回源"></a>2. 配置回源</h4><p>   <img src="/images/baidu_index/5.pic_hd.jpg" alt="配置回源"></p><h4 id="3-绑定域名"><a href="#3-绑定域名" class="headerlink" title="3. 绑定域名"></a>3. 绑定域名</h4><p>完成上面的操作后，又拍云会自动分配一个域名给我。此时，我们就需要绑定自己的域名。添加需要绑定的域名：</p><p>   <img src="/images/baidu_index/5.pic.jpg" alt="绑定域名"></p><p>如果你希望博客能以www的方式来访问，那你还需要添加www的二级域名</p><h4 id="4-配置解析"><a href="#4-配置解析" class="headerlink" title="4. 配置解析"></a>4. 配置解析</h4><p>添加完域名绑定后，此时我们就只需要配置dns解析到又拍云了。我使用的是阿里云的域名系统，下图就是我设置的域名解析配置。</p><p>   <img src="/images/baidu_index/6.pic_hd.jpg" alt="配置解析"></p><p>因为github在国外访问速度还是很快的，所以对于海外的用户直接访问github就可以了，不用再访问又拍云了。<br>添加解析后一般需要几分钟才生效，看自己添加的域名dns解析生效了没有可以使用nslookup命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~/blog  ᐅ nslookup michael-j.net</span><br><span class="line">Server:192.168.199.2</span><br><span class="line">Address:192.168.199.2#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">michael-j.netcanonical name = mj-blog.b0.aicdn.com.</span><br><span class="line">mj-blog.b0.aicdn.comcanonical name = ctn.b9.aicdn.com.</span><br><span class="line">Name:ctn.b9.aicdn.com</span><br><span class="line">Address: 183.134.101.194</span><br></pre></td></tr></table></figure><p>  此时，我发现michael-j.net的域名已经成功解析到了又拍云。</p><ol start="5"><li>完成</li></ol><p>完成以上步骤后，你会收到又拍云发给你关于域名绑定通过的邮件。此时你就可以在浏览器中访问你的博客啦！</p><p>最关键的问题是，我们要验证百度是否能正常的抓取我们的博客？ 我们使用百度站长的测试工具来测试一下：</p><p>  <img src="/images/baidu_index/7.pic_hd.jpg" alt="抓取诊断"></p><p>哈哈，现在百度终于可以正常爬去我们的网站啦，接下来就是耐心的等待了，一般最多七天百度就会收录了。</p><h2 id="方案二：自己托管博客"><a href="#方案二：自己托管博客" class="headerlink" title="方案二：自己托管博客"></a>方案二：自己托管博客</h2><p>与利用cdn来制作镜像网站的思路一样，我们完全可以把博客托管在自己的服务器上，当然你得掏银子啦！💰 我个人觉得自己买一台属于自己的虚拟主机还是值得投入了，除了博客外你可以利用这台机器做很多事情，最低配的ecs也花不了多少钱，可以几个人合用一台。</p><p>Nginx是世界有名的反向代理服务器，同时它对静态文件的支持非常好，性能很高。我们完全可以利用Nginx来作我们博客的服务器。</p><h4 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1. 安装Nginx"></a>1. 安装Nginx</h4><p>Ubuntu\Debian：<code>apt-get install nginx</code></p><p>Centos\Redhat: <code>yum install nginx</code></p><p>其他系统自行google</p><h4 id="2-配置Nginx"><a href="#2-配置Nginx" class="headerlink" title="2. 配置Nginx"></a>2. 配置Nginx</h4><p>在/etc/nginx/conf.d新作配置，一定要以<code>.conf</code>结尾。我新建名为<code>michael-j.net.conf</code>的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name michael-j.net;</span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">     root /home/michael/mymonkey110.github.io;</span><br><span class="line">     index index.html;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   access_log /var/log/nginx/michael-j.access.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意root是我们博客的目录，后面会提到。</p><h4 id="3-重启nginx"><a href="#3-重启nginx" class="headerlink" title="3. 重启nginx"></a>3. 重启nginx</h4><p>执行<code>nginx -s reload</code>生效</p><h4 id="4-自动下载博客内容"><a href="#4-自动下载博客内容" class="headerlink" title="4. 自动下载博客内容"></a>4. 自动下载博客内容</h4><p>我希望每次博客仓库有更新的时候能自动重建本地仓库，为此我专门写了一个工具git-watcher: <a href="https://github.com/mymonkey110/git-watcher" target="_blank" rel="noopener">https://github.com/mymonkey110/git-watcher</a>。当有新的内容push到你的仓库是，它会自动拉去并重建本地仓库。基本原理就是利用github的webhook功能，当有新的push事件发生时，github会发布相应的事件到指定的接口。git-watcher监听push事件，当接受到push事件去pull仓库。如果你觉得这个工具有点儿意思，Please star it.</p><h5 id="4-1-安装git-watcher-amp-git"><a href="#4-1-安装git-watcher-amp-git" class="headerlink" title="4.1 安装git-watcher &amp; git"></a>4.1 安装git-watcher &amp; git</h5><p><code>pip install git-watcher</code></p><p><code>apt-get install git</code></p><h5 id="4-2-启动git-watcher"><a href="#4-2-启动git-watcher" class="headerlink" title="4.2 启动git-watcher"></a>4.2 启动git-watcher</h5><p><code>git-watcher -u https://github.com/mymonkey110/mymonkey110.github.io.git -s 654321</code></p><p><code>-u</code>参数配置我们的博客仓库地址</p><p><code>-s</code>参数是我们webhook的secret key</p><p>git-watcher还支持其他一些参数配置，-h见说明</p><h5 id="4-3-配置dns解析"><a href="#4-3-配置dns解析" class="headerlink" title="4.3 配置dns解析"></a>4.3 配置dns解析</h5><p>将默认的dns解析到我们自己的主机上</p><p><img src="/images/baidu_index/10.pic_hd.jpg" alt="配置解析"></p><h5 id="4-4-配置webhook"><a href="#4-4-配置webhook" class="headerlink" title="4.4 配置webhook"></a>4.4 配置webhook</h5><p>进入仓库的<code>settings</code> －&gt; <code>Webhooks &amp; services</code></p><p>设置：<code>Payload URL</code>，这里输入我们主机的地址，这里只能用ip地址。同时，还要设置Secret，这个是用来签名body内容用的，一定要与git-watcher中配置一致</p><p><img src="/images/baidu_index/13.pic.jpg" alt="配置Webhook"></p><p>注意，我们只选择发送<code>push</code>事件就可以了。</p><h5 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5 测试"></a>4.5 测试</h5><p>我们进行一些修改，然后push到博客的仓库，检测一下网站内容是否更新。如果正常更新，那说明已经大功告成了。这是可以再用百度的抓取工具进行诊断。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解决百度抓取github内容的问题基本思路都是让百度不直接访问Github，而是通过一个中间服务器来缓存内容。两种方式都需要付费，相对来说使用又拍云搭建镜像服务器在流量较小的情况下比较有优势，速度快，费用少；而自己租用主机在博客流量较大的时候比较经济，你可以选择按带宽计费的方式，同时你还获得了一台完全由你控制的主机，何乐而不为呢？！</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/06/23/%E8%AE%A9%E7%99%BE%E5%BA%A6%E7%B4%A2%E5%BC%95%E4%BD%A0%E7%9A%84github%E7%9A%84%E5%8D%9A%E5%AE%A2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>博客域名更新：michael-j.net</title>
      <link>http://michael-j.net/2016/06/17/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%96%B0/</link>
      <guid>http://michael-j.net/2016/06/17/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%96%B0/</guid>
      <pubDate>Fri, 17 Jun 2016 07:20:31 GMT</pubDate>
      <description>
      
        博客域名正式更新为：michael-j.net
      
      </description>
      
      <content:encoded><![CDATA[<p>由于备案原因😢，弃用老的域名michael-j.xyz,正式修改为：</p><p><strong><em><a href="http://michael-j.net">http://michael-j.net</a></em></strong></p><p>本博客主要纪录本人对技术、管理、生活的一些感悟。技术人一定要有沉淀，写博客是一个非常好的方式，我也经常鼓励团队中其他人写博客，记录自己的成长。</p><p>喜欢本站内容的同学可以加入收藏哦，也支持rss订阅！😊</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/06/17/%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D%E6%9B%B4%E6%96%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java异常的选择：Checked Exception还是Unchecked Exception ?</title>
      <link>http://michael-j.net/2016/06/07/Java%E5%BC%82%E5%B8%B8%E7%9A%84%E9%80%89%E6%8B%A9/</link>
      <guid>http://michael-j.net/2016/06/07/Java%E5%BC%82%E5%B8%B8%E7%9A%84%E9%80%89%E6%8B%A9/</guid>
      <pubDate>Tue, 07 Jun 2016 07:20:31 GMT</pubDate>
      <description>
      
        java程序中经常会遇到异常的处理，何时选用Checked Exception和Unchecked Exception经常会让程序员苦恼，本文分享一下我在这方面的心得。
      
      </description>
      
      <content:encoded><![CDATA[<p>曾经听到过关于老司机和新手程序员的区别，其中最大的一个区别就在于异常的处理。新手程序员总是天真得把世界想得太美好，基本上没想过会出现异常的情况，而一个经验丰富的老司机会把最坏的打算考虑进去，给出相应的解决办法，使得发生异常时对系统的影响降低到最小。对此，我深表认同。现实的情况总是复杂的，而且还有很多不怀好意的人时刻准备攻击你的系统。使用你系统的用户越多，这种潜在的风险也就越大。</p><p>异常处理是应对这些风险的最强有力的武器。在Java的世界里，异常有两种：受检异常(checked exception)和非受检异常（unchecked exception）。想必所有的Javaer都使用过这两种异常，但是何时使用哪个异常缺失经常困扰程序员的头疼问题。在此，我分享一下自己的看法，如果你有不同的意见，请留意探讨。</p><h4 id="1-如果正常情况下会出现，那么使用Checked-Exception；反之，则使用Unchecked-Exception"><a href="#1-如果正常情况下会出现，那么使用Checked-Exception；反之，则使用Unchecked-Exception" class="headerlink" title="1.如果正常情况下会出现，那么使用Checked Exception；反之，则使用Unchecked Exception"></a>1.如果正常情况下会出现，那么使用Checked Exception；反之，则使用Unchecked Exception</h4><p>这条准则是我在决定使用Checked Exception还是Unchecked Exception的第一原则。如果API的使用者在正常使用的过程中都会出现异常，那么这种异常就属于Checked Exception。因为这种异常时属于程序执行流程众多分支之一，API的使用者必须意识到这种情况，并做出相应的处理。</p><p>举个栗子：</p><p>我希望向zookeeper中创建一个节点，那么这种情况就隐含了两个前提条件：</p><ul><li>父节点已经被创建（如果有的话）</li><li>本节点还未被创建</li></ul><p>那么，这个API的签名大致应该是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createNode</span><span class="params">(String path,<span class="keyword">byte</span>[] data)</span> <span class="keyword">throws</span> FatherNodeNotExist, NodeExist</span>;</span><br></pre></td></tr></table></figure><p>API的使用者看到这个签名的定义时就会得到一个强烈的心理暗示，我需要考虑父节点不存在和本节点已存在的情况，那么他就不得不显示的去处理这两种异常。</p><p>有的朋友可能会争论说，我正常的情况下不会出现这种情况，因为使用这个API的前提就是先创建好父节点，而后创建本节点，那我就不用抛出两种异常了，使用者也轻松了许多。但事实真的如此吗？我们想当然的认为了使用者是<code>自己人</code>，他们会乖乖的按照我们的想法去先创建父节点，再创建本节点，如果是在一个很局限的使用场景下，每个人都说经过严格培训的，那么你可以去做这样的假设，但是我还是不推荐你这么做，因为这样设计使得系统是脆弱的，不稳定的。如果能通过系统能自己避免这些错误，为什么不呢？况且，如果你把这个API开放给第三方的使用者，那么情况会更糟糕，你根本不知道他们会怎样去使用API，这非常恐怖！</p><p>有时候情况会变得很复杂，<code>正常情况</code>的鉴定变得很困难，你肯定会遇到这种时候，此时就需要结合你的业务场景去权衡其中的利弊。这依赖与你的经验和对业务场景的理解，我无法给你一个绝对的建议，那样是不负责任的。</p><p>我再举个常见的栗子：用户修改他拥有的资源信息。在菜谱APP中给出一个接口，让用户修改他菜谱的信息。那么这里一个隐含的条件就是用户修改他自己的菜谱信息，他是无权限修改别人的菜谱信息的。那么这个API的签名可能是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateMenu</span><span class="params">(<span class="keyword">long</span> menuId,<span class="keyword">long</span> uid,String title,String description...)</span></span>;</span><br></pre></td></tr></table></figure><p>如果用户尝试去修改不属于他的菜谱呢？我们是否需要throws UserPermissionException之类受检异常？我认为是不需要的。判断是这属于正常情况吗？我认为这不算是正常情况。<br>正常情况下，客户端调用修改信息的接口，那么menuId一定是属于这个用户的。如果出现这种情况，要么是你系统设计的就有问题，要么就是不怀好意的人在破坏你的系统。前者需要重新设计我们的系统，而后者我们更不用关系，直接抛出一个RuntimeException就可以，因为他不算正常用户。</p><h4 id="2-调用者中能从异常中恢复的，推荐使用受检异常；反之，则使用非受检异常"><a href="#2-调用者中能从异常中恢复的，推荐使用受检异常；反之，则使用非受检异常" class="headerlink" title="2. 调用者中能从异常中恢复的，推荐使用受检异常；反之，则使用非受检异常"></a>2. 调用者中能从异常中恢复的，推荐使用受检异常；反之，则使用非受检异常</h4><p>注意这里的一个关键词是<code>推荐</code>，决定使用哪种异常最为根本的还是第一条原则。如果第一条原则难以判断时，才考虑调用者。这条原则和<code>Effective Java</code>中的第58条很像，如果有这本书的朋友可以再拿出来读读。</p><p>我和<code>Effective Java</code>#58不同的观点在于，这条原则只能是<code>推荐</code>，另外，对于所有不能恢复的情况我都建议使用非受检异常。我对可恢复的理解是，如果API的调用者能够处理你抛出的异常，并给出积极的响应和反馈，并指导它的使用者做出调整，那么这就是可恢复的。不可恢复就是API的调用者无法处理你抛出的异常，或者仅仅只是打个LOG记录一下，不能对它的使用者做出提示，那么都可认为是不可恢复的。</p><p>还是最开始的栗子，如果调用<code>createNode</code>的调用者能响应<code>FatherNodeNotExist</code>，并把这种情况反应到终端上，那么使用受检异常是有积极意义的。对于不可恢复的情况，包括编程错误，我建议都是用非受检异常，这样系统能<code>fail fast</code>，把异常对系统的影响降到最低，同时你还能获得一个完整的异常堆栈信息，何乐而不为呢？！</p><p>基本上，这两条原则就能帮你决定到底是使用受检异常还是非受检异常了。当然，现实的情况很复杂，需要根据你所处的具体业务场景来判断，经验也是不可或缺的。在设计API的时候多问下自己这是正常情况下出现的吗，调用者可以处理这个异常吗，这会很有帮助的！</p><p>异常处理是一个非常大的话题，除了选择<code>checked exception</code>还是<code>unchecked exception</code>以外，还有一些一般的通用原装，例如：</p><ul><li>只抛出与自己有关的异常</li><li>封装底层异常</li><li>尽量在抛出异常的同时多携带上下文信息</li></ul><p>这些在<code>Effective Java</code>中都有详细的介绍，朋友可以认真读一下这本书，写的非常好！</p><p>对异常处理有不同理解的朋友可以给我留言，一起讨论，共同进步！</p><p>参考文献：</p><p><a href="https://github.com/HackathonHackers/programming-ebooks/blob/master/Java/Effective%20Java%20\(2nd%20Edition\" target="_blank" rel="noopener">Effective Java, 2nd Edition</a>.pdf)</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/06/07/Java%E5%BC%82%E5%B8%B8%E7%9A%84%E9%80%89%E6%8B%A9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>防范xss的正确姿势</title>
      <link>http://michael-j.net/2016/04/12/%E9%98%B2%E8%8C%83xss%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</link>
      <guid>http://michael-j.net/2016/04/12/%E9%98%B2%E8%8C%83xss%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</guid>
      <pubDate>Tue, 12 Apr 2016 07:20:31 GMT</pubDate>
      <description>
      
        最近对xss攻击的的防范又有了新的理解，特此分享一下心得。
      
      </description>
      
      <content:encoded><![CDATA[<p>xss攻击是web攻击中非常常见的一种攻击手段。如果你还没有听说过xss攻击，可以先了解xss的相关知识和原理，例如:<a href="https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)" target="_blank" rel="noopener">https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)</a>。</p><p>防范xss攻击的方式也十分简单：转义！</p><p>但是转义的时机？是在持久化之前转义呢，还是读数据之后escape呢？</p><p>我开始想也没想就选择了第一种方式，因为这种方法看上去一劳永逸，但是我现在越来越倾向于第二种方式。</p><p>实际上选择第一种还是第二种需要根据你的实际情况来定。我们知道xss攻击是一种web攻击手段，它的运行环境是在用户的浏览器中，也就是说用户的运行环境是不可控的。那么在持久化之前进行转义看上去似乎不错，因为我们可以利用filter或者interceptor拦截所有的写入请求，统一进行转义。这样一来，我们的业务逻辑就完全不需要care转义的问题了，因为我们取到的数据已经都是转义的过的了。</p><p>如果用户的终端是可控的，比如：Native App，那么入库之前进行转义就显得多此一举，因为所有的输出方式都是在我们的App中展现的，自然也就不会出现了xss攻击的问题了。例如用户在评论中输入了<code>&lt;哈哈&gt;</code>，你觉得用户希望输出<code>&amp;lt;哈哈&amp;gt</code>;，还是<code>&lt;哈哈&gt;</code>呢？ 结果是显而易见的。</p><p>现实的情况往往是复杂的，不会只有黑和白、0与1、native和web，更多的是它们交织在一起，互相入侵对方的领域。基本上现在大部分的App都有分享功能，那么恶意的用户完全可以在评论中插入注入代码，再将该评论分享出去，那么其它被分享的用户就有被攻击的风险。解决的方法就是针对分享的数据进行全局转义，事实上已经很多模版系统已经帮我们考虑了这部分问题，例如Django和Jinja2的模版就是默认开启自动转义的。如果是前后端分离的场景，也可以有前端来进行escape。</p><p>我推荐使用“入库不转义读转义”还有一个原因，那就是前期转义格式的不确定性和后期输出的多样性。如果你正在正在开发一个rest服务器，你与App使用json格式通信。为了简单，在开始业务代码前，你对所有输入数据按照html格式进行转义。那么你可以十分放心分享出去的数据是安全的，因为所有的数据在持久化之前就已经转义了，同时你会痛苦unescape给App的数据。如果那天老板要求你以xml的格式输出这些数据（可能是其它系统的输入要求，也可能是打印报表），那么你会更加痛苦。因为xml和html的转义字符还是有些不同的，你不得不先unescape回原始数据然后再按照xml的格式escape一次。如果这样你觉得都还ok，那么我开始有点佩服你了。如果老板还要求你有更多的输出格式，那么你会更加痛苦，这还是在没有考虑输入格式变化的情况下。因为一个转义的问题导致逻辑变得复杂，影响系统的稳定性是得不偿失的。</p><p>最后，我总结一下这两种方式的优缺点：</p><table><thead><tr><th>转义方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>入库前转义</td><td>一劳永逸</td><td>需要针对多端进行不同的输出，灵活性不足，无法应对后期数据格式的变化</td></tr><tr><td>读取前转义</td><td>简单，灵活，能应对各种数据格式的场景</td><td>需要对每个输出数据转义，人工处理容易遗漏</td></tr></tbody></table><p>本人推荐第二种方式来防范xss攻击。虽然需要对每个输出数据都进行转义，但是如果你使用带自动转义的模版或者框架来处理的话，那么就可以极大的提高效率，又可以规避安全的问题。最后还是要提醒大家，安全无小事，即使你觉得没有人会攻击的系统，还是要规避这些风险，安全是系统的基石。</p><p>参考文献：</p><p><a href="https://n0tw0rthy.wordpress.com/2011/10/07/when-do-you-escape-your-data/" target="_blank" rel="noopener">Why escape-on-input is a bad idea</a></p><p><a href="https://n0tw0rthy.wordpress.com/2011/10/07/when-do-you-escape-your-data/" target="_blank" rel="noopener">When do you escape your data?</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/04/12/%E9%98%B2%E8%8C%83xss%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mac下拳皇97黑屏问题的解决方法</title>
      <link>http://michael-j.net/2016/03/18/Mac%E4%B8%8B%E6%8B%B3%E7%9A%8797%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <guid>http://michael-j.net/2016/03/18/Mac%E4%B8%8B%E6%8B%B3%E7%9A%8797%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <pubDate>Thu, 17 Mar 2016 16:00:00 GMT</pubDate>
      <description>
      
        教你如何解决mac下玩拳皇97时的黑屏问题
      
      </description>
      
      <content:encoded><![CDATA[<p>使用Mac系统很久了，渐渐的已经依赖上了这个系统。虽然Mac OS能让我们更加关注于工作，但是偶尔我们还是希望能小小的娱乐一把。我就比较喜欢玩一些小游戏，比如<code>拳皇97</code>。</p><p><code>拳皇街机</code>系列满载的我们80后慢慢的回忆啊！想玩97的朋友可以去：<a href="http://www.pc6.com/mac/112306.html" target="_blank" rel="noopener">http://www.pc6.com/mac/112306.html</a>下载。</p><p>按照提示方法，我发现运行一直是黑屏状态，十分蛋疼。Google了一番后最终找到了解决方法：</p><p>打开<code>MAM</code>E的<code>Preferenc</code>e -&gt; 切换到<code>Video</code> -&gt; <code>Rendering Option</code>中的<code>Render frames using</code>切换到 <code>OpenGL</code>模式</p><p>重新载入游戏就大功告成啦！！！ 祝大家游戏愉快～</p><p>还搞不定可以参考下面这篇帖子👇：</p><p><a href="https://www.reddit.com/r/mac/comments/3nr2gr/mame_135_on_el_capitan_loads_black_screen_when/" target="_blank" rel="noopener">https://www.reddit.com/r/mac/comments/3nr2gr/mame_135_on_el_capitan_loads_black_screen_when/</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/03/18/Mac%E4%B8%8B%E6%8B%B3%E7%9A%8797%E9%BB%91%E5%B1%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>实现领域事件</title>
      <link>http://michael-j.net/2016/01/19/%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/</link>
      <guid>http://michael-j.net/2016/01/19/%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/</guid>
      <pubDate>Tue, 19 Jan 2016 08:53:05 GMT</pubDate>
      <description>
      
        最近在实践DDD的过程中对领域事件颇有感触，分享一下我的心得和实践方法。
      
      </description>
      
      <content:encoded><![CDATA[<p>当你的系统或者业务变得日益复杂时，<code>DDD</code>的模式是一种非常值得尝试的架构模式。<code>DDD</code>让你更加关注于你的业务领域，思考你的业务模型，帮组你理清繁杂的业务关系。我推荐所有还没有了解过或者接触过<code>DDD</code>的后端工程师都去学习一下该架构模式。本文主要关注<code>DDD</code>中的<code>领域事件</code>，以及一种可能的实践方式。</p><a id="more"></a><p>我们知道领域模型的变化会产生领域事件。例如，用户在完成注册后，系统会发出一封带有确认信息的邮件到用户的邮箱；用户关注的好友发送动态后他会收到相应的通知等等。在业务比较简单或者不用考虑性能的情况下，我们可以直接把对领域事件的处理嵌入到领域服务中。考虑这样一个场景：用户回复了某条评论，那么被回复的那个用户（也就是那条评论的所有者）需要收到一个PUSH消息。这个场景比较简单，我们可能直接写出类似下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  void  reply(long fromUserId,long toUserId,String content) &#123;</span><br><span class="line">   saveReply(fromUserId,toUserId,content);</span><br><span class="line">sendPush(toUserId,content); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，我们就直接把发送PUSH的动作嵌入到了回复的逻辑中。这样做有以下两个问题：</p><ul><li>回复动作处理了它不关心的逻辑。发送PUSH不是回复的强关联逻辑，也就是说即使push发送不成功也应该让回复动作成功。上面的代码将回复和发送PUSH耦合在了一起。</li><li>如果出现了多个对回复动作感兴趣的业务方，那么上面的代码将不可维护。比如，我们有一个回复的计数器，它要统计回复的总量。如果把增加计数器的动作写在回复中，那么将不可维护，因为每次出现新的业务方都要修改回复逻辑。这显然返回了<code>开闭原则</code>。</li></ul><p>解决上诉问题的方法很简单，就是使用<code>领域事件</code>。<code>领域事件</code>很好理解，说白了就是与领域相关的事件。事件的产生往往伴随着相应的动作，例如上面所提到的回复动作。有了领域事件，每个领域本身就只需要关系其自己的业务逻辑，并在处理完自身逻辑的同时抛出相应的领域事件。对这些领域事件感兴趣的业务方可以<code>订阅</code>该事件，然后进行后续的处理。这与<code>观察者</code>模式和<code>发布订阅</code>模式是十分相像的。我更倾向于<code>发布订阅</code>这个词，它更好的表达了发布者和订阅者的一种解耦。</p><p><code>发布订阅</code>模式有很多种的实现，有很多开源框架和类库也实现了这种模式。例如<code>Spring</code>中的事件，<code>Guava</code>中的<code>EventBus</code>都是很好的实践。直接采用这些工具会有两个问题：</p><ul><li>无法灵活的处理同步事件和异步事件。<code>Spring</code>框架自带的事件机制是同步的，那么领域事件的发布者的执行流程就和订阅者的处理流程在一个调用堆栈中了，在某些情况下这事不可接收的。<code>EventBus</code>是支持同步和异步两种模式的，但是它要求在初始化时就指定好事件是<code>同步</code>的还是<code>异步</code>的，这对于使用方不够灵活。</li><li>订阅方无法控制事件的订阅与取消。出于解耦和灵活性的考虑，我们往往把事件注册的动作放倒订阅方。<code>Spring</code>框架让这种订阅关系变得模糊，因为事件的注册是通过事件<code>ApplicationListener</code>接口完成的，那么订阅方就无法获得事件发布者的引用，进而无法取消事件的订阅。当然，取消事件订阅的情景并不常见，所以这种情况在大部分场景下也是可以接受的。</li></ul><p>无论是出于对事件发送同步异步的控制，还是处于订阅方更高的灵活性要求，自己在这些框架和工具上再进行封装都还是要必要的。下面我给出我的一种实践方案。</p><p>我推荐在<code>guava</code>的<code>EventBus</code>上面进行封装，因为它已经实现了同步和异步的模式，并且使用注解的订阅方式对程序员也十分友好。</p><p>首先，我们需要定义一个<code>领域事件</code>的抽象基类(DomainEvent)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 领域事件基类</span></span><br><span class="line"><span class="comment"> * Created by Michael Jiang on 16/1/12.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DomainEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Date occurredTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">identify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DomainEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        occurredTime =<span class="keyword">new</span> Date();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getOccurredTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> occurredTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个抽血基类中定义了发生时间和identify的一个抽象方法，该方法用来标示事件。下面我们就可以定义领域事件的发布器了(EventPublisher)，如下图所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 领域事件发射器</span></span><br><span class="line"><span class="comment"> * Created by Michael Jiang on 16/1/12.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DomainEventPublisher</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">DomainEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">identify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(Object listener)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">publish</span><span class="params">(T event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">asyncPublish</span><span class="params">(T event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我先定义了领域发布器的一个通用接口，主要包括四个方法：</p><ul><li>identify() 发布器标示，用来区分不同的发布器。</li><li>register(Object) 注册接口，订阅方调用该接口来订阅事件。</li><li>publish(T event) 同步发布事件接口</li><li>asyncPublish(T event) 异步发布事件接口</li></ul><p>同时，我给出了一个基于<code>Guava</code>的实现，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Guava事件发布器实现</span></span><br><span class="line"><span class="comment"> * Created by Michael Jiang on 16/1/12.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GuavaDomainEventPublisher</span> <span class="keyword">implements</span> <span class="title">DomainEventPublisher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EventBus syncBus = <span class="keyword">new</span> EventBus(identify());</span><br><span class="line">    <span class="keyword">private</span> EventBus asyncBus = <span class="keyword">new</span> AsyncEventBus(identify(), Executors.newFixedThreadPool(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object listener)</span> </span>&#123;</span><br><span class="line">        syncBus.register(listener);</span><br><span class="line">        asyncBus.register(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(DomainEvent event)</span> </span>&#123;</span><br><span class="line">        syncBus.post(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncPublish</span><span class="params">(DomainEvent event)</span> </span>&#123;</span><br><span class="line">        asyncBus.post(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我在实现中初始化了两个eventBus，一个是同步的<code>syncBus</code>，用于发布同步事件；另外一个是异步的<code>asyncBus</code>，用于发布异步事件。其中我将异步线程池硬编码为1个线程，基本满足大部分情况，也可酌情修改或者开放这个参数，有各个领域事件的发布器来实现。</p><p>具体的领域事件发布器直接继承<code>GuavaDomainEventPublisher</code>，并覆盖identify()方法后就可以使用了。</p><p>这里我并没有专门去设计订阅方，因为<code>Guava</code>提供的注解方式已经十分方便了。我设计了一个简单的demo放倒了github上面，有兴趣的朋友可以直接查看源代码。如果你有更好的设计方法或者思路，可以直接留言进行讨论。</p><p>Demo地址：<a href="https://github.com/mymonkey110/event-light" target="_blank" rel="noopener">https://github.com/mymonkey110/event-light</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/01/19/%E5%AE%9E%E7%8E%B0%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>评论设计</title>
      <link>http://michael-j.net/2016/01/05/%E8%AF%84%E8%AE%BA%E8%AE%BE%E8%AE%A1/</link>
      <guid>http://michael-j.net/2016/01/05/%E8%AF%84%E8%AE%BA%E8%AE%BE%E8%AE%A1/</guid>
      <pubDate>Tue, 05 Jan 2016 09:52:07 GMT</pubDate>
      <description>
      
        本文主要分享了我在设计评论模块中的一些心得，希望对读者有些许帮助。
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本文主要分享了我在设计评论模块中的一些心得，希望对读者有些许帮助。</p></blockquote><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>现阶段评论做的最好的我想应该是<code>网易新闻</code>（app）里面的评论模块了，其“盖楼”的方式让人印象深刻，评论已经成为该app的核心功能之一了。市面上大部分app的评论模块设计的还是相对简单的，这是可以理解的，因为评论模块不是这些app的核心功能之一。</p><p>在设计评论模块前可以和pd或者boss沟通，我们的评论功能是核心功能之一吗？实际上，90%的app采用简单的评论设计就可以了，也就是采用<code>一问一答</code>，类似于如下的设计。</p><p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/2.pic.jpg?imageView/2/w/480/h/640|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="一问一答"></p><p>这种设计十分简单、直接，也满足了用户评论、回复的基本要求，对于没有大量用户评论或者评论不是核心功能的app来说就够用了。暂且把这种场景称之为<code>场景A</code>。</p><p>如果你是新闻类或者咨询类的app，有着大量的用户评论，那么设计“盖楼”的效果还是可取的，这样能帮助用户找到该条评论或者回复的上下文情景。但是根据“盖楼”的显示效果不同，设计上也是有很大的差别的。如果是以<code>评论为主</code>的显示方式，类似于下面的显示方式。</p><p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/3.pic.jpg?imageView/2/w/500/h/800|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="评论为主"></p><p>这里可以把评论分为<code>评论</code>和<code>回复</code>，所有的<code>回复</code>均挂在<code>评论</code>下面，类似于树状结构。把这种场景称之为<code>场景B</code></p><p>最后就是类似于网易新闻的评论设计了，贴一张截图</p><p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/5.pic.jpg?imageView/2/w/400/h/600|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="同级显示"></p><p>这种场景下设计最为复杂，因为回复和评论是同等级的，回复还可以引用完整的回复路径，就是可以溯源到最开始的评论上。这种场景我将至称为<code>场景C</code>。</p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>由于我 一直使用<code>mysql</code>，我就以<code>mysql</code>为例谈一下针对上面三种场景的设计。</p><h4 id="场景A"><a href="#场景A" class="headerlink" title="场景A"></a>场景A</h4><p>这种场景下一般评论数量较少，评论不为活跃，可以把不区分评论和回复，而统一看成评论。区别在于有的评论是直接评论<code>主题</code>(每个评论都挂在某个主题下，如文章、帖子等)，而有些评论是<code>@</code>其他用户的，为了能cover这两张场景，使用一张表就可以达到效果，评论表如下设计：</p><table><thead><tr><th>表字段</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>topic_id</td><td>主题ID</td></tr><tr><td>topic_type</td><td>主题type</td></tr><tr><td>content</td><td>评论内容</td></tr><tr><td>from_uid</td><td>评论用户id</td></tr><tr><td>to_uid</td><td>评论目标用户id</td></tr></tbody></table><p>为了能复用评论模块，我们引入一个<code>topic_type</code>字段来区分主题的类别。</p><p><code>from_uid</code>表示评论人的id，通过该id我们可以检索到评论人的相关信息。</p><p><code>to_uid</code> 是评论目标人的id，如果没有目标人，则该字段为空。</p><p>出于性能的考虑，往往我们会冗余评人的相关信息到评论表中，比如评论人的nick、头像等，目标用户也是如此。这样一来我们就只用查询单表就可以达到显示的效果。</p><p>有时，目标用户有多个，那么可以将<code>to_uid</code>字段修改为<code>to_uids</code>，保存时用分隔符来分割用户id，而目标用户的信息再去查询缓存或者数据库。也可以简单的将多个目标用户的信息一起存成json格式，可以应付简单的展现需求。</p><h4 id="场景B"><a href="#场景B" class="headerlink" title="场景B"></a>场景B</h4><p>在以评论为主的树形显示的情况下，数据库的设计十分灵活，可以使用单表，添加一个<code>parent_id</code>字段来指向父评论。如果数据库本身支持嵌套查询，那么还是比较方便的，SqlServer、Oracle都支持，但是mysql不支持，那就只能通过存储过程来实现。在互联网应用中，能不使用<code>触发器</code> ｀存储过程`的话，尽量不要去使用，因为其对性能有影响。</p><p>我们还可以将评论拆分为<code>评论表</code> 和 <code>回复表</code>，<code>评论</code>挂在各种<code>主题</code>下面，而<code>回复</code>都挂在<code>评论</code>下面。</p><p><code>评论表</code>的设计如下：</p><table><thead><tr><th>表字段</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>topic_id</td><td>主题ID</td></tr><tr><td>topic_type</td><td>主题type</td></tr><tr><td>content</td><td>评论内容</td></tr><tr><td>from_uid</td><td>评论用户id</td></tr></tbody></table><p><code>回复表</code>的设计如下：</p><table><thead><tr><th>表字段</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>comment_id</td><td>评论ID</td></tr><tr><td>reply_id</td><td>回复目标id</td></tr><tr><td>reply_type</td><td>回复类型</td></tr><tr><td>content</td><td>回复内容</td></tr><tr><td>from_uid</td><td>回复用户id</td></tr><tr><td>to_uid</td><td>目标用户id</td></tr></tbody></table><p>由于我们拆分了评论和回复，那么评论表就不再需要目标用户字段了，因为评论均是用户对主题的评论，评论表的设计更佳简洁了。</p><p>回复表我添加了一个<code>comment_id</code>字段来表示该回复挂在的根评论id，这样设计也是出于性能方面的考虑，我们可以直接通过评论id一次性的捞出该评论下的所有回复，然后通过程序来编排回复的显示结构。通过适当的冗余来提高性能也是常用的优化手段之一。这里给出一段我通过来评论id来查找并组织所有回复的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;ReplyDTO&gt; getReplyListByRid(Long rid) &#123;</span><br><span class="line">List&lt;ReplyDO&gt; replyDOList = replyDAO.queryReplyByCid(rid);</span><br><span class="line">        if (replyDOList == null || replyDOList.size() == 0) &#123;</span><br><span class="line">            return new ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;ReplyDTO&gt; replyDTOList = new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;ReplyDTO&gt; parentList = new ArrayList&lt;&gt;();</span><br><span class="line">        for (ReplyDO replyDO : replyDOList) &#123;</span><br><span class="line">            ReplyDTO replyDTO = convertReplyToDTO(replyDO);</span><br><span class="line">            if (replyDTO.getReplyType() == ReplyType.COMMENT) &#123;</span><br><span class="line">                replyDTOList.add(replyDTO);</span><br><span class="line">                parentList.add(replyDTO);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                boolean foundParent = false;</span><br><span class="line">                if (replyDTOList.size() &gt; 0) &#123;</span><br><span class="line">                    for (ReplyDTO parent : parentList) &#123;</span><br><span class="line">                        if (parent.getId().equals(replyDTO.getReplyId())) &#123;</span><br><span class="line">                            if (parent.getNext() == null) &#123;</span><br><span class="line">                                parent.setNext(new ArrayList&lt;ReplyDTO&gt;());</span><br><span class="line">                            &#125;</span><br><span class="line">                            parent.getNext().add(replyDTO);</span><br><span class="line">                            parentList.add(replyDTO);</span><br><span class="line">                            foundParent = true;</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (!foundParent) &#123;</span><br><span class="line">                    throw new RuntimeException(&quot;sort reply error,should not go here.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return replyDTOList;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>reply_type</code>表示回复的类型，因为回复可以是针对评论的回复(comment)，也可以是针对回复的回复(reply)， 通过这个字段来区分两种情景。</p><p><code>reply_id</code>表示回复目标的id，如果reply_type是comment的话，那么reply_id＝commit_id，如果reply_type是reply的话，这表示这条回复的父回复。</p><p>在数据结构的设计上，我在replyDTO中设计了一个<code>List&lt;ReplyDTO&gt; next</code>属性，这样在形成了一个树形的结构，类似如下结构。</p><p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/6.pic.jpg?imageView/2/w/300/h/600|watermark/2/text/aHR0cDovL21pY2hhZWwtai54eXo=" alt="树形结构"></p><p>客户端可以直接根据该结构来进行树形结构的显示。</p><h4 id="场景c"><a href="#场景c" class="headerlink" title="场景c"></a>场景c</h4><p>要达到网易新闻中评论的效果我还没有特别好的建议。这种场景中评论和回复是同级显示的，回复不在显示结构上不用挂在一个评论下面。双表的设计在这里就不太合适了，因为涉及到评论和回复的混排，使用双表则会导致查询的逻辑过于复杂。所以建议还是采用单表的设计，不区分评论和回复会简化应用层的逻辑。我们统一都看成评论，而有些评论是可以引用其他评论的。本人推荐采用闭包表的设计，例如：</p><p>comment表设计</p><table><thead><tr><th>表字段</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>topic_id</td><td>主题ID</td></tr><tr><td>topic_type</td><td>主题type</td></tr><tr><td>content</td><td>评论内容</td></tr><tr><td>from_uid</td><td>评论用户id</td></tr></tbody></table><p>parent_children表</p><table><thead><tr><th>表字段</th><th>字段说明</th></tr></thead><tbody><tr><td>id</td><td>主键</td></tr><tr><td>parent_id</td><td>父id</td></tr><tr><td>child_id</td><td>子id</td></tr></tbody></table><p>comment表保存所有评论内容，而parent_children表则记录评论表中各个评论的父子关系。</p><p>查询时往往会按照时间排序，我们可以直接按id或者创建时间降序排列查询comment表即可。如果用户想查询一条评论的完整引用，则可以通过parent_children来找到对应的路径。向上查找到评论只需要可执行：</p><blockquote><p>select parent_id from parent_children where child_id=${id} and parent_id != ${id}</p></blockquote><p>向下查找所有的子孙评论可执行：</p><blockquote><p>select child_id from parent_children where parent_id = ${id} and parent_id != ${id}</p></blockquote><p>闭包表在查询时非常方便，但是插入的性能稍差，因为除了插入评论表以外，还需要把该条评论所有的父子关系插入到父子关系表中。插入性能会随着评论层级的加深而线性下降。</p><h3 id="海量数据优化"><a href="#海量数据优化" class="headerlink" title="海量数据优化"></a>海量数据优化</h3><p>如果你的系统每天都会有成千上万条评论，那么单表的设计肯定是不行，优化的方式也有很多。</p><ul><li><p>分库分表。分库分表是最为常用也最有效的优化方式，建议按照主题来分库分表。这样同一个主题下面的评论就会落到同一张表里，避免了跨表查询。</p></li><li><p>适当的数据冗余。如果你需要显示评论人的相关信息，那么在插入评论时就把这些信息写入评论表中，避免多次查询。实际上，如果是纪录数据，都可以冗余对应的数据信息，因为它们的数据的实时行和一致性要求并不高，用户不会因为评论中的头像没更新而撕了你，哈哈。</p></li><li><p>附加幂等数据只允许单项操作。如果pd要求你能给评论点赞，那么你可以告诉他只能点赞，不能取消。因为从幂等性的要求来说，每个赞都是一条记录。评论的赞数如果都从点赞表中统计得出，那么性能开销会十分巨大，而且点赞如此轻量级的一个操作一定会加剧点赞表的竞争操作。所以建议直接在评论表中添加一个<code>like_count</code>的计数器，该字段只增不减。</p></li><li><p>热门评论加缓存。类似于网易新闻的热门评论，读取频度非常高，可以专门开接口给客户端，同时该接口做缓存。</p></li></ul><p>参考文献：</p><p><a href="http://blog.csdn.net/tiantiandjava/article/details/45390859" target="_blank" rel="noopener">逻辑数据库设计 - 单纯的树(递归关系数据)</a></p><p><a href="http://qinxuye.me/article/storing-hierachical-data-in-database/" target="_blank" rel="noopener">在数据库中存储层级结构</a></p><p><a href="http://stackoverflow.com/questions/4048151/what-are-the-options-for-storing-hierarchical-data-in-a-relational-database" target="_blank" rel="noopener">What are the Options for Storing Hierarchical Data in a Relational Database</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2016/01/05/%E8%AF%84%E8%AE%BA%E8%AE%BE%E8%AE%A1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Debug:Tomcat deploy twice</title>
      <link>http://michael-j.net/2015/10/30/Tomcat%20deploy%20twice/</link>
      <guid>http://michael-j.net/2015/10/30/Tomcat%20deploy%20twice/</guid>
      <pubDate>Fri, 30 Oct 2015 02:46:31 GMT</pubDate>
      <description>
      
        tomcat重复部署的问题
      
      </description>
      
      <content:encoded><![CDATA[<p>最近写了一个分布式时间调度系统，用于调度集群类的定时任务程序。架构如下：</p><p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/jscheduler.png" alt=""></p><p>有一个集中化的Scheduler来调度集群中所有的job,集群中的job只负责实现具体job内容，而Trigger的定义和管理均在Scheduler中实现。Trigger通过MQ将触发消息发送到集群中的某台机器上。</p><p>在部署Scheduler的过程中观察日志如下出现以下奇怪的现象：</p><p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/E77611B1-937A-49AD-B51D-797143F9B6B1.png" alt="debug-1"></p><p>我们发现在同一时刻Scheduler对一个Job触发了两次，而在集群的某台机器上发现一个Job被触发了4次：</p><p><img src="http://7xnwpq.com1.z0.glb.clouddn.com/9CDEE719-9454-4E4B-99C3-684518E9F49F.png" alt="debug-2"></p><p>当我在自己的机器上始终无法复现该问题。由于是同一个war包，故排出了代码的问题。不同之处在于，我本机启动的方式是用jetty的插件直接启动的，而服务器上则是用的是tomcat容器。经过一番排查发现，是tomcat重复部署的问题，tomcat的<a href="https://tomcat.apache.org/tomcat-7.0-doc/deployer-howto.html" target="_blank" rel="noopener">官方文档</a>有如下说明:</p><blockquote><p>Any Context Descriptors will be deployed first.</p></blockquote><p>因为我想讲应用直接部署在/下，所以在server.xml中的localhost节点下加入了context的配置。根据tomcat的官方文档，如果host下面有context的配置则会先部署，而后容器再部署一次。也就是说，应用被部署了两次。这也就解释了为什么scheduler会触发两次，而job会触发4次了。</p><p>解决的方法是将<code>deployOnStart</code>设置为<code>false</code>，<code>autoDeploy</code>设置为<code>false</code>。</p><p>参考：</p><p><a href="http://stackoverflow.com/questions/7223108/quartz-job-runs-twice-when-deployed-on-tomcat-6-ubuntu-10-04lts" target="_blank" rel="noopener">http://stackoverflow.com/questions/7223108/quartz-job-runs-twice-when-deployed-on-tomcat-6-ubuntu-10-04lts</a></p>]]></content:encoded>
      
      <comments>http://michael-j.net/2015/10/30/Tomcat%20deploy%20twice/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Btrace Sample Scripts</title>
      <link>http://michael-j.net/2015/10/19/Debug-Tomcat-deploy-twice/</link>
      <guid>http://michael-j.net/2015/10/19/Debug-Tomcat-deploy-twice/</guid>
      <pubDate>Mon, 19 Oct 2015 09:16:28 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://kenai.com/projects/btrace/pages/Home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Btrace&lt;/a&gt; is very powerful tool for online debuggi
        
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://kenai.com/projects/btrace/pages/Home" target="_blank" rel="noopener">Btrace</a> is very powerful tool for online debugging, here is the sample scripts in tar btrace.</p><p>The scripts are very useful, so I decide to upload them. Here is the scripts below:</p><ul><li>AWTEventTracer.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AWTEventTracer.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AWTEventTracer.java</a></li><li>AllCalls1.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls1.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls1.java</a></li><li>AllCalls1Sampled.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls1Sampled.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls1Sampled.java</a></li><li>AllCalls2.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls2.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls2.java</a></li><li>AllCalls2Sampled.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls2Sampled.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls2Sampled.java</a></li><li>AllCalls3.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls3.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls3.java</a></li><li>AllCalls3Sampled.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls3Sampled.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllCalls3Sampled.java</a></li><li>AllLines.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllLines.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllLines.java</a></li><li>AllMethods.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllMethods.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllMethods.java</a></li><li>AllMethodsSampled.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllMethodsSampled.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllMethodsSampled.java</a></li><li>AllSync.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllSync.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-AllSync.java</a></li><li>ArgArray.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ArgArray.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ArgArray.java</a></li><li>Classload.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Classload.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Classload.java</a></li><li>CommandArg.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-CommandArg.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-CommandArg.java</a></li><li>DTraceInline.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-DTraceInline.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-DTraceInline.java</a></li><li>DTraceRefDemo.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-DTraceRefDemo.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-DTraceRefDemo.java</a></li><li>Deadlock.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Deadlock.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Deadlock.java</a></li><li>FileTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-FileTracker.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-FileTracker.java</a></li><li>FinalizeTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-FinalizeTracker.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-FinalizeTracker.java</a></li><li>HistoOnEvent.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-HistoOnEvent.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-HistoOnEvent.java</a></li><li>Histogram.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Histogram.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Histogram.java</a></li><li>HistogramBean.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-HistogramBean.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-HistogramBean.java</a></li><li>JInfo.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-JInfo.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-JInfo.java</a></li><li>JMap.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-JMap.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-JMap.java</a></li><li>JStack.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-JStack.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-JStack.java</a></li><li>JdbcQueries.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-JdbcQueries.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-JdbcQueries.java</a></li><li>LogTracer.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-LogTracer.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-LogTracer.java</a></li><li>MemAlerter.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-MemAlerter.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-MemAlerter.java</a></li><li>Memory.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Memory.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Memory.java</a></li><li>MultiClass.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-MultiClass.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-MultiClass.java</a></li><li>NewArray.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-NewArray.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-NewArray.java</a></li><li>NewComponent.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-NewComponent.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-NewComponent.java</a></li><li>OnThrow.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-OnThrow.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-OnThrow.java</a></li><li>ProbeExit.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ProbeExit.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ProbeExit.java</a></li><li>Profiling.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Profiling.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Profiling.java</a></li><li>Sizeof.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Sizeof.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Sizeof.java</a></li><li>SocketTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-SocketTracker.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-SocketTracker.java</a></li><li>SocketTracker1.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-SocketTracker1.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-SocketTracker1.java</a></li><li>SubtypeTracer.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-SubtypeTracer.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-SubtypeTracer.java</a></li><li>SysProp.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-SysProp.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-SysProp.java</a></li><li>Test.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Test.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Test.java</a></li><li>ThreadBean.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadBean.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadBean.java</a></li><li>ThreadCounter.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadCounter.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadCounter.java</a></li><li>ThreadCounterBean.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadCounterBean.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadCounterBean.java</a></li><li>ThreadStart.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadStart.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-ThreadStart.java</a></li><li>Timers.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-Timers.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-Timers.java</a></li><li>URLTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-URLTracker.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-URLTracker.java</a></li><li>WebServiceTracker.java : <a href="http://7xnmye.com1.z0.glb.clouddn.com/btrace-WebServiceTracker.java" target="_blank" rel="noopener">http://7xnmye.com1.z0.glb.clouddn.com/btrace-WebServiceTracker.java</a></li></ul><p>You can access them with curl or wget, wish you happy debugging!</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2015/10/19/Debug-Tomcat-deploy-twice/#disqus_thread</comments>
    </item>
    
    <item>
      <title>利用Autoconfig打包Java WEB应用</title>
      <link>http://michael-j.net/2015/10/17/%E5%88%A9%E7%94%A8Autoconfig%E6%89%93%E5%8C%85Java-WEB%E5%BA%94%E7%94%A8/</link>
      <guid>http://michael-j.net/2015/10/17/%E5%88%A9%E7%94%A8Autoconfig%E6%89%93%E5%8C%85Java-WEB%E5%BA%94%E7%94%A8/</guid>
      <pubDate>Sat, 17 Oct 2015 06:39:08 GMT</pubDate>
      <description>
      
        本文主要介绍常用的后台应用打包的几种方式
      
      </description>
      
      <content:encoded><![CDATA[<p>简介： 本文主要介绍常用的后台应用打包的几种方式</p><p>后端应用上线前都需要经过重新打包，可千万别小看了这个阶段，这个是非常非常重要的！如果打错了包或者使用错了配置文件，结果可能是毁灭性的！</p><p>我们都知道每个软件项目或者公司都会维护几套隔离环境，例如以前在阿里就会有<code>日常测试</code>、<code>日常</code>、<code>预发</code>和<code>线上</code>几个环境，还有根据特殊需要配置的独立环境，如<code>性能环境</code>等等。 当然，对于小公司或者创业公司来说不需要准备这么多套环境，但至少是需要<code>测试</code>和<code>线上</code>两套环境的。多套环境的可以有效的隔离线上和线下，提高开发人员的工作效率，又不至于将不稳定的代码带到线上。其中最重要的一个环节就是打包，我主要介绍两种简单的打包方式。</p><h2 id="利用Spring配置"><a href="#利用Spring配置" class="headerlink" title="利用Spring配置"></a>利用Spring配置</h2><p>现在Java WEB应用可以说90%都使用了Spring框架，而Spring框架早就帮我们考虑了这个问题。我一开始也是使用这个配置方式，在Spring配置文件中引入一下配置：</p><blockquote><p>&lt;context:property-placeholder location=”file:${APP_HOME}/config.properties”/&gt;</p></blockquote><p>Spring是支持classpath和file的，个人推荐使用<code>file</code>模式来查找外部配置文件，因为这样我们就不必将配置文件引入到工程目录中了，因为工程目录对所有的开发人员都可见，这样会降低配置文件的安全性。引入外部配置文件一个常见的做法就是使用环境变量，我们新建一个<code>APP_HOME</code>的环境变量来区分不同的环境。</p><p>在使用配置文件的地方利用placeholder进行配置即可，例如以下方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;db.driverClass&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;db.url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;db.username&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;db.password&#125;&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>在Spring启动以后，它会去查找你配置的外部配置文件，并逐个替换使用的配置中的placeholder。</p><p>这种方式的优点就是简单，灵活，但是缺点也是很明显的：</p><ul><li><p>只支持Spring配置文件的替换，不支持其他框架配置文件的替换。<br> 如果你想替换logback.xml中的某个配置，例如日志输出目录或者日志输出级别，它是做不到的。</p></li><li><p>大规模部署不方便。<br>如果只有一两机器这样部署还是比较方便的，但是如果有几十台甚至上百台这样打包就十分麻烦了。如果改动一个配置项，就需要保持所有机器的同步的，所以一般大一点的公司都会有专门负责配置的服务，例如阿里的ConfigServer。</p></li></ul><h2 id="利用AutoConfig打包"><a href="#利用AutoConfig打包" class="headerlink" title="利用AutoConfig打包"></a>利用AutoConfig打包</h2><p>AutoConfig 是阿里内部使用的一个打包工具，十分方便，也十分强大，这里有它的介绍：<a href="http://openwebx.org/docs/autoconfig.html" target="_blank" rel="noopener">http://openwebx.org/docs/autoconfig.html</a></p><p>下面是我利用AutoConfig打包的步骤：</p><ul><li><p>添加不同环境的配置</p><p>为了直接利用Maven打出不同环境的包，我们在需要打包的module的pom中添加下面的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">      &lt;autoconfig.properties&gt;antx.properties.dev&lt;/autoconfig.properties&gt;</span><br><span class="line">      &lt;env&gt;dev&lt;/env&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></li></ul><p>然后加入profile配置：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;!-- 本地开发环境 --&gt;</span><br><span class="line">           &lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;autoconfig.properties&gt;antx.properties.dev&lt;/autoconfig.properties&gt;</span><br><span class="line">               &lt;env&gt;dev&lt;/env&gt;</span><br><span class="line">           &lt;/properties&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;!-- 测试环境 --&gt;</span><br><span class="line">           &lt;id&gt;test&lt;/id&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;autoconfig.properties&gt;antx.properties.test&lt;/autoconfig.properties&gt;</span><br><span class="line">               &lt;env&gt;test&lt;/env&gt;</span><br><span class="line">           &lt;/properties&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;!-- 生产环境 --&gt;</span><br><span class="line">           &lt;id&gt;online&lt;/id&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;autoconfig.properties&gt;antx.properties.online&lt;/autoconfig.properties&gt;</span><br><span class="line">               &lt;env&gt;online&lt;/env&gt;</span><br><span class="line">           &lt;/properties&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">   &lt;/profiles&gt;</span><br></pre></td></tr></table></figure><ul><li><p>添加autoconfig maven插件支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba.citrus.tool&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;autoconfig-maven-plugin&lt;/artifactId&gt;</span><br><span class="line"> &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">               &lt;userProperties&gt;$&#123;user.home&#125;/conf/$&#123;autoconfig.properties&#125;&lt;/userProperties&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;autoconfig&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">&lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></li></ul><p> 其中,userProperties属性就是我们使用的配置文件。</p><ul><li><p>利用Maven进行打包</p><p>进入到需要打包的module中，然后执行<code>mvn package -P&lt;env&gt;</code>，其中env代表不同的环境，在上面的配置中env只能为dev、test和online.<br>我们可以将最终的包名也带上环境名称，以区分打出来的不同环境的包，如下配置：</p></li></ul><p><code>&lt;finalName&gt;包名-${env}&lt;/finalName&gt;</code></p><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h3><p>如果开发人员使用的是jetty插件来进行本地开发的，那么需要将jetty:run改为jetty:run-war，因为autoconfig是需要执行package才会进行触发的，而jetty:run不会执行package阶段。可以参考一下配置：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- jetty插件 --&gt;</span><br><span class="line"> &lt;plugin&gt;</span><br><span class="line">     &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;7.6.16.v20140903&lt;/version&gt;</span><br><span class="line">     &lt;configuration&gt;</span><br><span class="line">         &lt;webAppSourceDirectory&gt;src/main/webapp&lt;/webAppSourceDirectory&gt;</span><br><span class="line">         &lt;scanIntervalSeconds&gt;3&lt;/scanIntervalSeconds&gt;</span><br><span class="line">         &lt;connectors&gt;</span><br><span class="line">             &lt;connector implementation=&quot;org.eclipse.jetty.server.nio.SelectChannelConnector&quot;&gt;</span><br><span class="line">                 &lt;port&gt;8080&lt;/port&gt;</span><br><span class="line">                 &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;</span><br><span class="line">             &lt;/connector&gt;</span><br><span class="line">         &lt;/connectors&gt;</span><br><span class="line">         &lt;war&gt;target/包名-$&#123;env&#125;.war&lt;/war&gt;</span><br><span class="line">     &lt;/configuration&gt;</span><br><span class="line"> &lt;/plugin&gt;</span><br></pre></td></tr></table></figure></code></pre>]]></content:encoded>
      
      <comments>http://michael-j.net/2015/10/17/%E5%88%A9%E7%94%A8Autoconfig%E6%89%93%E5%8C%85Java-WEB%E5%BA%94%E7%94%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java也能玩转WebSocket</title>
      <link>http://michael-j.net/2015/05/30/Java%E4%B9%9F%E8%83%BD%E7%8E%A9%E8%BD%ACWebSocket/</link>
      <guid>http://michael-j.net/2015/05/30/Java%E4%B9%9F%E8%83%BD%E7%8E%A9%E8%BD%ACWebSocket/</guid>
      <pubDate>Sat, 30 May 2015 00:00:00 GMT</pubDate>
      <description>
      
        本篇介绍使用Netty来实现Websocket，为实践篇，不涉及原理性讨论。
      
      </description>
      
      <content:encoded><![CDATA[<p><strong><em>本篇介绍使用Netty来实现Websocket，为实践篇，不涉及原理性讨论。</em></strong></p><h4 id="1-什么是Websocket"><a href="#1-什么是Websocket" class="headerlink" title="1. 什么是Websocket?"></a>1. 什么是Websocket?</h4><p>  <a href="http://zh.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">WebSocket</a> 是H5提供的一个基于TCP链接全双工的通信协议，可以简单HTTP协议的长链接升级版。</p><p> 为什么要用websocket、使用websocket的好处已经websocket的原理这里就不再赘述了，上面的两篇文章都介绍的非常清楚了。</p><h4 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h4><ul><li><p>升级Nginx</p><p>Nginx从1.3.13版本开始支持WebSocket协议，由于集团里面使用的是Tengine，所以需要先查看Tengine版本号。使用下面命令即可：</p><p><code>/home/admin/cai/bin/nginx-proxy -v</code></p><p>执行完后发现：Tengine version: Tengine/1.4.6 (nginx/1.2.9) ，nginx版本太低。升级Tengine就行，较新的Tengine都以支持Websocket.</p><p>升级Tengine命令执行：<code>sudo yum install -b current tengine</code> 会安装最新版的Tengine。</p><p>安装配置的过程还是由很多坑的。</p><p>接下来就是配置nginx了，配置很简单，按照一下配置即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location /chat/ &#123;</span><br><span class="line">  proxy_pass http://127.0.0.1:9999/;</span><br><span class="line">  proxy_http_version 1.1;</span><br><span class="line">  proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">  proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想更加灵活的配置可参考: <a href="http://nginx.org/en/docs/http/websocket.html" target="_blank" rel="noopener">http://nginx.org/en/docs/http/websocket.html</a></p><p>最后，重新加载nginx配置就可以了，<code>sudo sh nginxctl reload</code>。</p></li><li><p>升级WEB容器</p><p>这一步并不是必须的，如果你使用的Websocket的实现依赖于WEB容器，那么就必须升级WEB容器来支持。</p><p>JSR356规范制定了Websocket的标准，只要是实现了JSR356规范的容器均支持Websocket。Tomcat从7.0.47版本开始支持JSR356标准，并且要求JDK版本至少为1.7。</p><p>由于升级WEB容器带来的变化太多，本人并没有采用这种方式。</p></li></ul><h4 id="3-Java对Websocket的支持"><a href="#3-Java对Websocket的支持" class="headerlink" title="3. Java对Websocket的支持"></a>3. Java对Websocket的支持</h4><ul><li><p>JavaEE 7开始全面支持Websocket协议</p><p>Spring4.0才实现了JavaEE 7标准，那么如果希望Spring直接支持Websocket协议，那么必须将Spring升级到4.0以上。使用Spring框架来支持Websocket的好处就是可以使用它大量的注解和服务，而且可以很好的与现有业务相结合。</p></li><li><p>WEB容器对Websocket的支持</p><p>前面提到了JSR356标准指定了Websocket规范，在这个标准出来后很多WEB容器都纷纷实现了该标准，以支持Websocket。该阶段处于Websocket的初期，各个容器的实现方式也各不相同，如果不想升级到Spring4而又想使用Websocket，那么就可以利用容器的特性了。<br>如果你有这方面的需求可以参考：<br><a href="http://blog.fens.me/java-websocket-intro" target="_blank" rel="noopener">http://blog.fens.me/java-websocket-intro</a> 、<a href="http://redstarofsleep.iteye.com/blog/1488639" target="_blank" rel="noopener">http://redstarofsleep.iteye.com/blog/1488639</a></p></li><li><p>利用Netty来实现Websocket</p><p><a href="http://netty.io/" target="_blank" rel="noopener">Netty</a>是一个Java语言实现的非常高效的基于事件的网络库，感谢师兄告诉我这个框架。我也是刚接触这个框架不久，原理我就不谈了。如果你有Linux下的开发经验一定对这种框架不会陌生，这些框架的底层都经历了select\poll到epoll的转变，在Linux下有Libev\Libevent之类相似的框架，以及Node底层的Libuv也是如此，这方面的资料也是非常多的。</p><p>我们要用Netty是不仅是因为它是一个高效的网络库，而且它还是实现了很过高层的网络协议，其中就包括Websocket。Netty对Websocket有很好的支持，而且它对Websocket的处理是原生的，不依赖于底层容器，那么我们就可以在不升级底层容器已经改变Spring框架的基础上来编写基于Websocket的应用了。</p></li></ul><h4 id="4-Netty来创建Websocket链接"><a href="#4-Netty来创建Websocket链接" class="headerlink" title="4. Netty来创建Websocket链接"></a>4. Netty来创建Websocket链接</h4><ul><li><p>启动Websocket服务器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> EventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> ChannelPipelineInitializer channelPipelineInitializer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(WebSocketServer.class);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      InnerWebSocketServer wsServer = <span class="keyword">new</span> InnerWebSocketServer();</span><br><span class="line">      <span class="keyword">new</span> Thread(wsServer).start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.port = port;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">InnerWebSocketServer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">              serverBootstrap.group(workGroup).channel(NioServerSocketChannel.class)</span><br><span class="line">                      .childHandler(channelPipelineInitializer);</span><br><span class="line">              ChannelFuture future = serverBootstrap.bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>,port)).syncUninterruptibly();</span><br><span class="line">              logger.info(<span class="string">"WebSocket Server is running on "</span> + future.channel().localAddress());</span><br><span class="line">              future.channel().closeFuture().sync();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              logger.error(<span class="string">"Start Websocket error:&#123;&#125;."</span>,e.getMessage(),e);</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              workGroup.shutdownGracefully();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><em>Tips:注意为了让Netty在Spring初始化的时候启动，我指定了init方法为这个bean的初始化方法。而Netty的监听方法是一个同步调用(sync方法),这会阻碍Spring继续初始化，导致初始化失败。所以我在初始化方法中启动了另外一个线程来完成WebsocketServer的初始化。</em></strong></p><ul><li><p>注册处理Pipeline</p><p>Netty的处理请求的方式与Webx的很相似，连名字都叫Pipeline。我们先要注册一系列的Handler来完成对一个Websocket的请求的处理，类似于Spring里面Interceptor的概念。</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Component</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelPipelineInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">   <span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> WebSocketFrameHandler webSocketFrameHandler;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">   <span class="keyword">private</span> HttpRequestHandler httpRequestHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       ChannelPipeline pipeline=ch.pipeline();</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">       pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">64</span>*<span class="number">1024</span>));</span><br><span class="line">       pipeline.addLast(httpRequestHandler);</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">"/ws/"</span>));</span><br><span class="line">       pipeline.addLast(webSocketFrameHandler);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong><em>Tips:httpRequestHandler和websocketFrameHandler是自己实现的处理Handler。前者会负责对请求做一些基本校验已经获取SESSION的动作，而后者是则是消息处理的Handler，实现了各种事件的处理逻辑，也是跟业务紧密相关的地方。</em></strong></p><ul><li><p>实现WebSocketFrameHandler</p><p>一般情况下我们只用实现<code>SimpleChannelInboundHandler</code>就可以了.</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Component</span></span><br><span class="line"> <span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketFrameHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WebSocketHandlerFactory webSocketHandlerFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(WebSocketFrameHandler.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        WebSocketHandler handler = getWebSocketHandlerByChannel(ctx.channel());</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>)</span><br><span class="line">            handler.read(ctx, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.channelInactive(ctx);</span><br><span class="line">        logger.info(<span class="string">"Client "</span> + ctx.channel() + <span class="string">" disconnected!"</span>);</span><br><span class="line">        getWebSocketHandlerByChannel(ctx.channel()).disconnect(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.channelActive(ctx);</span><br><span class="line">        WebSocketHandler handler = getWebSocketHandlerByChannel(ctx.channel());</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>)</span><br><span class="line">            handler.connect(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (evt == WebSocketServerProtocolHandler.ServerHandshakeStateEvent.HANDSHAKE_COMPLETE) &#123;</span><br><span class="line">            logger.info(<span class="string">"Client "</span> + ctx.channel() + <span class="string">" connected!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"Caught WebSocket Error,error:&#123;&#125;."</span>, cause.getMessage(), cause.getStackTrace());</span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line">        WebSocketHandler handler = getWebSocketHandlerByChannel(ctx.channel());</span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>)</span><br><span class="line">            handler.caughtException(ctx, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> WebSocketHandler <span class="title">getWebSocketHandlerByChannel</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">        String topic = channel.attr(WebSocketConstants.TOPIC).get();</span><br><span class="line">        WSTopicIdentify topicIdentify = WSTopicIdentify.getTopicFromValue(topic);</span><br><span class="line">        <span class="keyword">if</span> (topicIdentify == WSTopicIdentify.UNKNOWN)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> (WebSocketHandler&lt;ChannelHandlerContext, Object&gt;) webSocketHandlerFactory.getWebSocketHandler(topicIdentify);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong><em>Tips:为了让Websocket与具体业务分离，建议对不同的业务实现自己的WebsocketHandler,而这里总的handler根据业务的标识符路由到不同的业务handler即可。</em></strong></p><h4 id="5-让Netty更好的于业务结合"><a href="#5-让Netty更好的于业务结合" class="headerlink" title="5. 让Netty更好的于业务结合"></a>5. 让Netty更好的于业务结合</h4><ul><li><p>与Spring结合</p><p>由于业务上基本都是使用Spring框架，为了在Spring中使用Netty，需要将Netty的启动Server配置为一个Bean, 由Spring服务初始化。注意Netty启动会阻塞本身线程的问题。那么跟Netty相关的Pipeline子handler均要定义为bean，这样就可以使用原有的业务系统中的服务了。</p></li><li><p>按业务路由</p><p>考虑到以后会有其他业务使用Websocket的场景，那么我们必须将websocket的能力按照业务进行区分。本人的建议是从URL上来区分业务，不同的业务使用不同URL。去掉通用websocket的前缀后，根据后门的URL来区分业务。<br><code>ctx.channel().attr(WebSocketConstants.TOPIC).set(msg.getUri().substring(WebSocketConstants.wsUriPrefix.length()));</code></p><p>建议设置一个Websocket的ENUM TOPIC，不同的业务拥有不同的TOPIC，这样就可以根据URL来区分业务了。</p></li></ul><h4 id="6-后记"><a href="#6-后记" class="headerlink" title="6. 后记"></a>6. 后记</h4><p> 使用Netty处理websocket还是非常方便的，加上其本事强大的网络处理能力，使得上层应用无需关系底层实现。虽然和Node.js这样技术比起来还是比较笨重，但随着业务的发展，我相信Java的优势会渐渐体现出来。</p><p> 使用websocket本事不难，难得是在分布式环境下使用长链接技术。其中涉及到业务状态的保存与恢复、服务器间通信的问题、停机维护的问题、状态跟踪的问题等等，如果业务比较复杂，那么异常处理的情况都会非常复杂。</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2015/05/30/Java%E4%B9%9F%E8%83%BD%E7%8E%A9%E8%BD%ACWebSocket/#disqus_thread</comments>
    </item>
    
    <item>
      <title>利用Tair实现分布式并发锁</title>
      <link>http://michael-j.net/2014/12/23/%E5%88%A9%E7%94%A8Tair%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E5%B9%B6%E5%8F%91%E9%94%81/</link>
      <guid>http://michael-j.net/2014/12/23/%E5%88%A9%E7%94%A8Tair%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E5%B9%B6%E5%8F%91%E9%94%81/</guid>
      <pubDate>Tue, 23 Dec 2014 00:00:00 GMT</pubDate>
      <description>
      
        最近大量使用到了Tair来控制并发，分享一下心得。
      
      </description>
      
      <content:encoded><![CDATA[<p>最近大量使用到了Tair来控制并发，有点心得，总结如下。</p><ul><li><p>利用Tair实现全局并发锁</p><p> 现在基本上线上服务器都是集群环境，那么当我们需要对中心化数据（例如:Tair、数据库）的同一内容进行读写时就会碰到并发问题，这是一种非常常见的需求。解决并发问题的方法无非有两种，在并发点控制并发或者在并发源头控制。<br><img src="http://img3.tbcdn.cn/L1/461/1/48437662f3c9714c3dafff4c0a29fe84215571ba" alt="_"></p><p> 图画的有点丑。并发点控制最常用的一种方式就是使用锁，每个需要访问数据的线程都需要先获取锁，然后才能去访问数据库。根据获取锁的策略的不同，又可以根据不同纬度分为乐观锁、悲观锁，忙等、闲等，互斥锁、读写锁等等。</p><p> 在并发源头控制就是利用第三方的工具，一般是消息队列来将并发访问串行化，然后由统一的数据操作者来访问数据。消息队列的使用不在本文的讨论范文内。比较有名的开源消息队列有,<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">RabbitMQ</a>,<a href="http://zeromq.org/" target="_blank" rel="noopener">ZeroMQ</a>。当然,公司内部也有对应的产品，如<a href="http://baike.corp.taobao.com/index.php/Notify" target="_blank" rel="noopener">Notify</a>,<a href="http://gitlab.alibaba-inc.com/middleware/metaq3/wikis/what_is_metaq" target="_blank" rel="noopener">MetaQ</a>。</p><p>由于在分布式环境中，要实现全局的并发锁，那么我们必须借助第三方的服务来进行协调。数据库和缓存经常会成为我们的优先选择。出于性能的考虑，一般选用缓存来实现全局并发锁，其中的关键也就是借助Tair的<a href="http://baike.corp.taobao.com/index.php/Faq#.E4.BB.80.E4.B9.88.E6.98.AFversion.EF.BC.9F" target="_blank" rel="noopener">Version</a>控制，相比已经有很多人已经在这样做了。Tair提供了以下API：</p><p><code>ResultCode put(int namespace, Object key, Serializable value, int version, int expireTime)</code></p><p>利用该API实现并发控制轻而易举,伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    //加锁</span><br><span class="line">public boolean lock(String key, int timeOut) &#123;</span><br><span class="line">         ResultCode rc = tairManager.put(NAMESPACE, key, DEFAULT_VALUE, INIT_VERSION, timeOut);</span><br><span class="line">         return rc!=null&amp;&amp;ResultCode.SUCCESS.equals(rc)?true:false;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     //解锁</span><br><span class="line">     public boolean unlock(String key) &#123;</span><br><span class="line">         ResultCode rc = tairManager.invalid(NAMESPACE, key);</span><br><span class="line">return rc!=null&amp;&amp;ResultCode.SUCCESS.equals(rc)?true:false;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>  这主要是利用了Tair的VERSION特性。如果KEY不存在的话，传入一个固定的初始化VERSION，Tair会在保存这个缓存的同时设置这个缓存的VERSION为你传入的<em>VERSION+1</em>；然而KEY如果已经存在，Tair会校验你传入的VERSION是否等于现在这个缓存的VERSION，如果相等则允许修改，否则将失败。  其过程如下图所示：</p><p><img src="http://img2.tbcdn.cn/L1/461/1/c8f6cdafb3401daf724c9e0649f69ce9de71b057" alt="global_lock"></p><p>   这是一个很通用的过程，但是却能涵盖大部分的场景。其实理解这个过程非常简单，这里可以把其想象成受精卵形成的过程。虽然有成千上万个精子会进入卵巢，但当第一个精子和卵子结合以后就会形成一层隔离层，以阻止其他精子的进入。而这里的隔离层就类似于TAIR的<a href="http://baike.corp.taobao.com/index.php/Faq#.E4.BB.80.E4.B9.88.E6.98.AFversion.EF.BC.9F" target="_blank" rel="noopener">VERSION</a>。如果想知道更多过程可以参考<a href="http://baike.corp.taobao.com/index.php/Faq#.E4.BB.80.E4.B9.88.E6.98.AFversion.EF.BC.9F" target="_blank" rel="noopener">VERSION</a>的文档。</p><ul><li><p>利用Tair实现全局TOP-N并发锁</p><p>全局TOP-N并发锁是我自己想出来的一个名字，有点不明觉厉吧。实际业务中我们可能会遇到这样一种情况，在短时间内会有大量的并发来获取某种资源，但是我们这个资源又有数量限制。例如，抢火车票，在某一时刻将1000张火车票发出去，假如有大量的用户在同一时间来抢这些火车票就会形成并发，同时我们又有着很高的性能要求。以抢火车票为例，下面是我的思考过程。</p><p>因为我需要控制并发，要告诉第1001个用户你没有抢到，那么我肯定需要一个计数器来保存火车票发售的实时情况，那么很容易就写出了以下伪代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if(get(ticker_counter)&lt;1000)) &#123;</span><br><span class="line">    bool lockFlag=lock(key,60);</span><br><span class="line">if(lockFlag) &#123;</span><br><span class="line">int counter=get(ticker_counter);</span><br><span class="line">if(++counter&lt;1000) &#123;</span><br><span class="line">set(ticker_counter=counter)</span><br><span class="line">&#125;</span><br><span class="line">unlock(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  首先获取当前计数器的值，如果&gt;=1000则直接失败返回,表示已经被抢完了，但是如果&lt;1000，表示还没被抢完，则尝试去获取全局锁，如果获取成功则增加计数器的值，注意此时是需要再获取一次计数器的。但是这样会有一个明显的问题，就是当A获取了锁，正在执行增加计数器操作时，B也去尝试获取锁，此时必然是失败的。但是我现在就应该告诉他你已经失败了吗，你没有机会获得这张火车票了吗？显然不是。因为我们允许获取的资源是一个范围，那么当没有明确地表示现在资源已经超出这个返回了或者没有资源了，那么现在所有尝试得到资源的线程或者用户都是有机会的。此时，书中的一个概念浮现出来——信号量。这种业务场景正好是信号量技术能够解决的。但是在分布式环境下如何解决这个问题呢。</p><p>  我想到了Linux环境下编程时的很多技术。其中就有一个很这个业务场景非常相似的API，就是POSIX系列里面的<code>pthread_cond_wait()</code>和<code>pthread_cond_signal()</code>。前者会一直阻塞直到等待的资源变为可用，而后者会唤醒一个正在等待某个资源的线程。如果有有这两个语义的API存在的话就会变得非常简单，伪代码将变为：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(get(ticker_counter)&lt;1000)) &#123;</span><br><span class="line">    pthread_cond_wait();</span><br><span class="line">int counter=get(ticker_counter);</span><br><span class="line">if(++counter&lt;1000) &#123;</span><br><span class="line">set(ticker_counter=counter)</span><br><span class="line">&#125;</span><br><span class="line">pthread_cond_signal();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  只可惜在分布式环境下没有这两个语义的API操作存在，那么久不得不转化思维。之所以我需要这两个语义的API存在是因为我希望在A线程完成工作以后，将这个状态/消息通知到其他在等待的线程，并且这些线程是分布式的。其实这里是可以使用到消息模型的。notify会选择集群中的一台服务器投递消息，这就可以作为唤醒操作。所有的worker一开始都去监听notify的消息，直到其中一个worker收到，然后去checkAndInc(counter)，最后再发出一个消息，如此循环就能达到目的。最后只需要增加一个Trigger,在最开始执行的时候直接去执行，而不用等待notify消息，就能完成完整的流程。但是，如此简单地一个功能，真的要实现的这么复杂吗？当然不行，什么时候都要坚持KISS原则。</p><p>  其实，我最终的目的很简单，就是增加一个计数器的值，然后达到某一上线时希望能够得到一个错误返回。因为在做以前一个项目时使用到了Tair中计数器的功能，带着侥幸的心理重新去找Tair的API，居然发现了这个重要API:</p><pre><code>`Result&lt;Integer&gt; incr(int namespace, Serializable key, int value, int defaultValue, int expireTime, int lowBound, int upperBound)`</code></pre><p>  当我看到这个API的时候感悟良多，在此还是要感谢一下设计这个API的作者，因为这个API的设计就是为这种业务场景而生的。这个<code>incr()</code>操作可以指定一个范围段，如果value值不在这个范围段中就会报错。有个这个API那么伪代码就简化成以下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = tairManager.incr(NAMESPACE, key, 1, 0, 60, 0, 1000);</span><br><span class="line">    return ResultCode.SUCCESS.equals(result.getRc())? true : false</span><br></pre></td></tr></table></figure><p>   这个多么的简洁和优雅,而且又有着很高的性能。如果有着类似的业务场景，推荐大家不妨试一下这个API。</p><ul><li><p>一点思考</p><p>现在分布式计算越来越受到重视，随着去IOE的深入，大型机的时代一去不复返。但是分布式计算的流行使得程序员思考问题的方式也在发生改变，以前在单机上运行很好地系统，拿到分布式环境下可能就会出现各种问题。虽然整体架构发生了很大的变化，但是单机时代的很多思想还是值得我们去借鉴的。就比如信号量计算，PV操作。以前这些技术靠操作系统去实现就好了，但是在分布式环境下就很难实现这些以前看似很自然的功能。从某种程度上，这又为我们的中间件技术指明了发展的道路。如果哪一天业务程序员能在分布式环境中像在单机环境里编程，那分布式技术的发展就达到了一个新的高度。</p></li></ul>]]></content:encoded>
      
      <comments>http://michael-j.net/2014/12/23/%E5%88%A9%E7%94%A8Tair%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E5%B9%B6%E5%8F%91%E9%94%81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C#网络编程初步之TCP</title>
      <link>http://michael-j.net/2011/10/03/C#%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%88%9D%E6%AD%A5%E4%B9%8BTCP/</link>
      <guid>http://michael-j.net/2011/10/03/C#%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%88%9D%E6%AD%A5%E4%B9%8BTCP/</guid>
      <pubDate>Mon, 03 Oct 2011 02:22:40 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;阅读背景：本文针对有C#的初学者而写的，主要讲解如何利用C#进行网络编程。&lt;br&gt;如果你已经有一些网络编程的经验（只需要懂得网络编程的基本常识即可），并且理解C#的基本语法，那么这篇文章可以很快地带你进入C#网络编程的世界。&lt;br&gt;如果你的基础不好，也不要紧
        
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>阅读背景：本文针对有C#的初学者而写的，主要讲解如何利用C#进行网络编程。<br>如果你已经有一些网络编程的经验（只需要懂得网络编程的基本常识即可），并且理解C#的基本语法，那么这篇文章可以很快地带你进入C#网络编程的世界。<br>如果你的基础不好，也不要紧，我相信这篇文章也会有你需要的内容。</strong></p><p>网络编程基础复习：</p><p>   <img src="http://hi.csdn.net/attachment/201110/2/0_1317580064Gkl4.gif" alt="TCP-Module"></p><p> 图1. TCP编程基本模型</p><p> 相信很多人看到图1应该不会陌生，这是一个利用TCP进行通信的经典模型图。我想大家都应该把这张图记在心中。<br> 在此我就不讲述上图中每个API的意思了，百度一下，你就知道。我想说的是，难道你不觉得这么编程很累吗?<br> 我们需要去调用每个API函数，然后每个判断返回值是多少，如果你忘记了哪个API的参数形式还得去查MSDN，这种时间花费是巨大的，尤其当你做应用层的快速开发时。</p><p> 图2是利用UDP通信时的编程基本模型，这个模型较为简单，但是应用极为广泛，相比TCP而言，我本人觉得利用UDP通信是一门更为高深的技术，因为它是无连接的，<br> 换言之，它的效率与灵活度就更高些。</p><p>   <img src="http://hi.csdn.net/attachment/201110/2/0_131757970540yA.gif" alt="UDP-Module"></p><p>图2. UDP编程基本模型</p><p>   在此我补充一点，关于何时利用TCP通信、何时利用UDP通信的问题。他们的特性其实已经决定了他们的适用范围。<br>   在进行大数据量、持续连接时，我们使用TCP，例如FTP协议；而在进行小规模数据、突发性高的通信时，我们使用UDP，例如聊天程序。<br>   但是，这并不是绝对的事情。例如流媒体通信，它是大数量、持续的通信，但是使用的是UDP协议，为什么呢？<br>   ——因为我们不关心丢失的帧，人的肉眼是无法识别出少量的帧丢失的。那么使用UDP通信就可以大幅度提高效率，降低网络负载。</p><h3 id="C-之TCP编程"><a href="#C-之TCP编程" class="headerlink" title="C#之TCP编程"></a>C#之TCP编程</h3><p><strong>如何创建一个套接字?</strong></p><p>我们先来看看利用Winsock2是如何建立一个套接字的：</p><p>首先，我们要加载套接字库，然后再建立套接字。大致代码如下：</p><pre><code>WORD wVersion=MAKEWORD(2,2);WSADATA wsaData;if(WSAStartup(wVersion,&amp;wsaData)){WSACleanup();returnFALSE;}m_sock=WSASocket(AF_INET,SOCK_DGRAM,IPPROTO_UDP,NULL,0,0);if(m_sock==INVALID_SOCKET){        MessageBox(&quot;创建套接字失败！&quot;);        return FALSE;}</code></pre><p>  难道你不觉得利用Winsock2创建一个套接字很费劲吗？如果你在Linux环境中变成倒是可以省掉加载套接字的部分，<br>  但是却只能反复的调用API，这样也是很费时的事情。那我们再看看看利用C#是如何帮你简化工作的。这里我会介绍TCPClient类。</p><p>  <img src="http://hi.csdn.net/attachment/201110/2/0_131758022652u1.gif" alt="msdn"></p><p>  以上是从MSDN上截取的一段话，可见我们利用TCPClient还处理与TCP通信相关的操作。TCPClient有四个构造函数，每个构造函数的用法是有不同的。这里我补充一个知识，那就是端地址在C#中描述。<br>  我们知道，我们用一个IP地址和一个端口号就可以表示一个端地址。在C#中我们利用IPEndPoint类来表示一个端地址，本人经常利用如下的构造函数来创建一个IPEndPoint类。</p><pre><code>IPEndPoint localEP = new IPEndPoint(IPAddress.Parse(&quot;127.0.0.1&quot;),6666);</code></pre><p>这样来表示一个端地址是不是比创建一个struct sockaddr_in的结构体来的快呢？</p><p><strong>如何绑定一个端地址？</strong></p><p>  我们已经创建了一个端地址，也构造了套接字（TCPClient类），那么如何将二者绑定起来呢?也许你已经发现了，在建立TCPClient的时候我们其实就可以绑定端地址了。<br>  如果你使用的TCPClient tcp_Client=new TCPClient()的构造函数来创建的TCPClient,那么系统会认为你没有人为的制定端地址，而会自动帮你制定端地址，在创建客户端的TCPClient时我们常常这样做，<br>  因为我们不关心客户端的端地址。如果是服务器监听呢？在服务器监听时我们会使用例外一个类，叫做TCPListener，接下来我会讲到。我们可以利用TCPClient(IPEndPoint)来构造一个绑定到固定端地址的TCPClient类。例如：</p><pre><code>TcpClient tcp_Client = new TcpClient(localEP);</code></pre><p><strong>如何监听套接字？</strong></p><p>   到现在为此我们还没讨论如何监听一个套接字。在传统的socket编程中，我们创建一个套接字，然后把它绑定到一个端地址，而后调用Listen()来监听套接字。而在C#中，我们利用TCPListener来帮我们完成这些工作。让我们先来看看如何在C#监听套接字。</p><pre><code>IPEndPointlocalEP = new IPEndPoint(IPAddress.Parse(&quot;127.0.0.1&quot;),6666);TcpListenerListener = new TcpListener(localEP);Listener.Start(10);</code></pre><p>  我们首先创建需要绑定的端地址，而后创建监听类，并利用其构造函数将其绑定到端地址，然后调用Start(int number)方法来真正实施监听。这与我们传统的socket编程不同。以前我们都是先创建一个socket，然后再创建一个sockaddr_in的结构体。我想你应该开始感受到了C#的优势了，它帮我们省去了很多低级、繁琐的工作，让我们能够真正专注于我们的软件架构和设计思想。</p><p><strong>如何接受客户端连接？</strong></p><p>  接听套接字后面自然就是接受TCP连接了。我们利用下面一句话来完成此工作：</p><pre><code>TcpClient remoteClient =Listener.AcceptTcpClient();</code></pre><p>  类似于accept函数来返回一个socket,利用TCPListener类的AcceptTcpClient方法我们可以得到一个与客户端建立了连接的TCPClient类，<br>  而由TCPClient类来处理以后与客户端的通信工作。我想你应该开始理解为什么会存在TCPClient和TCPListener两个类了。<br>  这两个类的存在有着更加明细的区分，让监听和后续的通信真正分开，让程序员也更加容易理解和使用了。</p><p>这里我还得补充一点：监听是一个非阻塞的操作<code>Listener.Start()</code>，而接受连接是一个阻塞操作<code>Listener.AcceptTcpClient</code>。</p><p>说了这么多，还不如来个实例来的明确。接下来，我会通过一个简单的控制台聊天程序来如何使用这些。先贴代码吧！</p><p>服务器端：</p><pre><code>using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Net;using System.Net.Sockets;namespace Demo{    class Program    {        static void Main(string[]args)        {            byte[]SendBuf = Encoding.UTF8.GetBytes(&quot;Hello,Client!&quot;);    //发给客户端的消息；            IPEndPointlocalEP = new IPEndPoint(IPAddress.Parse(&quot;127.0.0.1&quot;),6666);        //本地端地址            TcpListenerListener = new TcpListener(localEP);            //建立监听类，并绑定到指定的端地址            Listener.Start(10);           //开始监听                                                                        Console.WriteLine(&quot;Server is listening...&quot;);                                       TcpClientremoteClient = Listener.AcceptTcpClient();  //等待连接（阻塞）            Console.WriteLine(&quot;Client:{0} connected!&quot;,remoteClient.Client.RemoteEndPoint.ToString()) ;     //打印客户端连接信息；            remoteClient.Client.Send(SendBuf);     //发送欢迎信息；            remoteClient.Close();                  //关闭连接；        }    }}</code></pre><p>客户端:</p><pre><code>using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Net;using System.Net.Sockets;namespace Demo_Client{    class Program    {        static void Main(string[] args)        {            byte[] RecvBuf=new byte[1024];                    //申请接收缓存；            int RecvBytes = 0;                                            //接收字节数；            string recvmsg=null;                                      //接收消息；            IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(&quot;127.0.0.1&quot;), 6666);      //远程服务器端地址；            TcpClient remoteServer = new TcpClient();                   //创建TCPClient类来与服务器通信；            remoteServer.Connect(remoteEP);                                  //调用connect方法连接远端服务器；            Console.WriteLine(&quot;I&apos;m using {0}.&quot;, remoteServer.Client.LocalEndPoint);          //打印自己使用的端地址；            RecvBytes=remoteServer.Client.Receive(RecvBuf);                           //接受服务器发送过来的消息；            recvmsg=Encoding.UTF8.GetString(RecvBuf,0,RecvBytes);          //将接受到的字节码转化为string类型；            Console.WriteLine(&quot;Server says:{0}.&quot;, recvmsg);              //打印欢迎信息；        }    }}</code></pre><p>   在C#网络编程中，我们要用到两个名空间，分别是System.Net和System.Net.Socket。<br>   可能有人会有这样的疑惑，干嘛要申请一个Byte数组。我们知道，在传统socket编程中，我们都是用char<em>来发送或者接受消息的，<br>   其实char</em>和Byte[]是同源的。他们都是一个Byte，而使用Byte[]能更易于人们理解和转化为其他类型。我们知道网络间传输的字节流，而Byte[]刚好符合了这个思想。<br>   如果对以上类的用法不理解或者不熟悉的话，建议查看MSDN，上面讲解的很详细。</p><p>现在看看运行效果：</p><p><img src="http://hi.csdn.net/attachment/201110/2/0_1317579792B9CZ.gif" alt="result"></p><p>图3 运行效果（左为服务器，右为客户端）</p><p>  好啦，到这里我们C#网络编程初步之TCP基本上算告一段落了，我只讲解了最为基础的部分，仅做抛砖引玉的作用。每个类的使用千变万化，希望你能找到最适合自己使用方法。现在你可以对比以前类似程序的代码了，看看我前面有没有说错。而且，越到后来你会越来越体会到C#人性化的一面。</p><p>  后期的博文中，我会更新C#网络编程初步之UDP.本人更喜欢利用UDP来进行通信，至于为什么我已经说过了。以后，我会逐步写一些网络编程的高级内容，例如异步通信、多线程编程，并关注程序员经常遇到的一些棘手问题，比如TCP边界的确定等等。有机会，我也会同大家讨论网络编程中常用的软件设计思想与架构。</p><p>（本文图1、图2来自互联网，有部分信息来自MSDN。如需转载本文，请注明出处！谢谢）</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2011/10/03/C#%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%88%9D%E6%AD%A5%E4%B9%8BTCP/#disqus_thread</comments>
    </item>
    
    <item>
      <title>超小型局域网组建的方案</title>
      <link>http://michael-j.net/2011/09/03/%E8%B6%85%E5%B0%8F%E5%9E%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E5%BB%BA%E7%9A%84%E6%96%B9%E6%A1%88/</link>
      <guid>http://michael-j.net/2011/09/03/%E8%B6%85%E5%B0%8F%E5%9E%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E5%BB%BA%E7%9A%84%E6%96%B9%E6%A1%88/</guid>
      <pubDate>Sat, 03 Sep 2011 15:20:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;生活中我们经常会遇到需要组建一个超小型局域网共享上网的问题，比如在学校组建一个小型局域网共享上网，或者组建一个家庭网络共享上网等，在此过程中会碰到很多小问题，&lt;br&gt;本人故撰此文，望能减少一些不必要的麻烦。&lt;/p&gt;
&lt;p&gt;在学校上网，可以通过校园网，也可以通过电信宽带或者A
        
      
      </description>
      
      <content:encoded><![CDATA[<p>生活中我们经常会遇到需要组建一个超小型局域网共享上网的问题，比如在学校组建一个小型局域网共享上网，或者组建一个家庭网络共享上网等，在此过程中会碰到很多小问题，<br>本人故撰此文，望能减少一些不必要的麻烦。</p><p>在学校上网，可以通过校园网，也可以通过电信宽带或者ADSL拨号上网（通过电话线上网）等。通过校园网上网，经济实惠，当然网速也是惊人的，尤其是喜欢玩游戏的同学就更悲剧了。<br>通过校园网上网没有什么灵活性和扩展性，故在此不讲了。就以通过电信上网为例来进行分析与组建。如果你们寝室或出租屋有宽带接入，那么恭喜你了，<br>你可以省下一个“猫”钱。4台PC以下共享上网的话，那必需购置一台4孔的交换机，一般在40~50元左右，然后购置网线若干，就是普通的直连线，一块钱一米的那种。(像我们学校水晶头都收钱，悲剧！)<br>至此，所需的硬件就准备好了。</p><p>  然后就是子网划分了，由于是超小型局域网，在这里可以使用C类IP私有地址，即192.168.A.B ,子网掩码为255.255.255.0，网关为192.168.A.1 。（网关最后一位可以改变，但一旦确定就不应更改。）<br>  注意：0=&lt;A&lt;=254，A一旦确定也不应更改，1=&lt;B&lt;=254随着不同的PC应不同，不应重复。显然，该子网划分可允许254台PC接入，完全满足超小型局域网组建的需要。<br>子网划分完之后就是将相应的IP地址填入本地网络适配器中，可参照下图。 </p><p>到此局域网以组建完毕，可以进行局域网的对战、文件交互等操作，如果想连上Internet,那就继续往下看吧！<br>DNS应填写你所在区的DNS服务器的IP地址，例如你在湘大，可以填写首选DNS：<code>208.67.222.222</code>，备用DNS：<code>202.67.220.220</code>.<br>填写完之后就单击确定。</p><p><strong>在此强调，除IP地址最后一位外，其余的在不同PC配置时均不要更改，切记！</strong></p><p>接下来就是一些必要软件的安装，既然是通过电信上网，那就要装星空极速。然后在填入电信给你的上网账号就可以上网了，当然此时还只有你一个人能上网。其实有条件的同学可以包电信的“我的一家”这种上网业务，它允许多台PC共用一个账号上网。湖南电信这边上网是绑定MAC地址的，理应只允许一个账号让一台PC机上网，其实这是很不合理的。废话少说，要想多台PC共享上网，可以让交换机拨号，当然你买的交换机要支持拨号这种功能，具体操作可以上网BAIDU一下。也可以选择共享上网软件，在此我推荐湘大学长自己做的一款软件，拼卡啦，这是我用过的最好用的共享上网软件，简单，方便，我也感到蛮自豪的。在湘大上网用这款软件完全没问题，不过在其他地方上不上的了我就不知道了。关于这款软件的使用方法可以参照<a href="http://www.xiaorsz.com/lan-internet-sharing-software-pinkala-download/" target="_blank" rel="noopener">http://www.xiaorsz.com/lan-internet-sharing-software-pinkala-download/</a>  。<br>在此说明一下，一台PC通过星空极速拨号上网后，然后在通过拼卡啦创建共享，其余的PC通过拼卡啦加入共享即可都上网了。网络上还有很多其他的共享上网软件，比如CCPROXY，不过需要一台PC充当服务器，像拼卡啦这样实现服务器切换这么方便的，我还没发现。<br>好啦，现在我们已经可以多机共享上网啦！</p><p>如果你是包年的用户，或者不计流量的那种，建议使用交换机、路由器、猫自动拨号上网，很方便，插上网线就能上！如果有流量限制，且共享上网的PC较多，<br>（比如我原来寝室的6台PC共用一个账号上网的那些耻人们，呵呵，开个玩笑！）建议用共享软件上网，虽然每次都要拨号，不过可以省流量！<br>如果你住在南苑，600块钱一年的那种难寝室，那就只用通过<a href="http://zh.wikipedia.org/wiki/ADSL" target="_blank" rel="noopener">ADSL</a>上网了，有得上就行！那你得乖乖的买个猫，二手的也行。把电话线连接分线器，分线器一端连接座机，一段连接猫。然后猫在连接交换机的普通以太网口，有的交换接有个WAN接口，不要连那个。然后PC在连接到交换机即可，其他配制方法同上。<br>因为是共享上网，电信本着能赚就赚的原则肯定是不允许的。你会发现优势网页打不开但是QQ却登的上，这是因为电信查封了你们的80（HTTP服务使用的）端口，这是一个知名端口，而QQ是用随机端口，它就没办法了。此时，让那台拨号的PC端口重连一下就又可以打开网页了，因为这是换了个公网IP。<br>好啦，写到这里也就结束了。我省略了很多细节，大家都可以<a href="http://www.baidu.com" target="_blank" rel="noopener">Baidu</a>的到，希望对想共享上网的同学有所帮助。</p><p>如果有其他的方案也可以留言，互相交流！</p>]]></content:encoded>
      
      <comments>http://michael-j.net/2011/09/03/%E8%B6%85%E5%B0%8F%E5%9E%8B%E5%B1%80%E5%9F%9F%E7%BD%91%E7%BB%84%E5%BB%BA%E7%9A%84%E6%96%B9%E6%A1%88/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
